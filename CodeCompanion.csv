Domain,Topic,Description,Structure,# Steps,Step 1,Step 1 skeleton,Step 2,Step 2 skeleton,Step 3,Step 3 skeleton,Step 4,Step 4 skeleton,Step 5,Step 5 skeleton,Step 6,Step 6 skeleton,Code
Basics,Password Generator,"This project is a simple password generator that creates random, secure passwords based on user-specified criteria. It utilizes the Python secrets module for generating cryptographically strong random numbers and the string module for creating a character set.","1. Define the Character Set: Use the string module to include all ASCII letters, digits, and punctuation.
2. Password Generation Function: Write a function to generate a single password of specified length by randomly selecting characters from the defined set.
3. User Interaction: Implement a loop to repeatedly ask the user for the number of passwords and their lengths, handling exceptions for non-integer inputs.
4. Generate and Display Passwords: For the number of passwords specified, generate each and print them out.",4,"import string

def define_character_set():
    return string.ascii_letters + string.digits + string.punctuation

# Function call to see the character set
character_set = define_character_set()
print(character_set)","import string

def define_character_set():
    # This function should return a string containing all ASCII letters, digits, and punctuation
    pass

# Function call to see the character set
character_set = define_character_set()
print(character_set)","import random

def generate_password(length, character_set):
    return ''.join(random.choice(character_set) for _ in range(length))

# Sample dataset and function call
character_set = string.ascii_letters + string.digits + string.punctuation
password = generate_password(10, character_set)  # Generate a 10-character password
print(password)","import random

def generate_password(length, character_set):
    # Implement a function that returns a string consisting of 'length' randomly chosen characters from 'character_set'
    pass

# Sample dataset and function call
character_set = string.ascii_letters + string.digits + string.punctuation
password = generate_password(10, character_set)  # Generate a 10-character password
print(password)","def get_user_input():
    while True:
        try:
            num_pass = int(input(""How many passwords do you want to generate? ""))
            password_length = int(input(""Enter the length of the password(s): ""))
            return num_pass, password_length
        except ValueError:
            print(""Please enter a valid integer."")

# Function call to execute the step
num_pass, password_length = get_user_input()
print(f""Number of Passwords: {num_pass}, Length of Each Password: {password_length}"")","def get_user_input():
    # Implement a loop that repeatedly asks for two integers: the number of passwords and the length of each password.
    # Use try-except to handle non-integer inputs and loop until valid integers are provided.
    pass

# Function call to execute the step
num_pass, password_length = get_user_input()
print(f""Number of Passwords: {num_pass}, Length of Each Password: {password_length}"")","def generate_and_display_passwords(num_pass, password_length, character_set):
    print(""Generated passwords:"")
    for i in range(num_pass):
        password = generate_password(password_length, character_set)
        print(f""{i+1}. {password}"")

# Sample dataset and function call
character_set = string.ascii_letters + string.digits + string.punctuation
num_pass, password_length = 5, 12  # Generate 5 passwords, each 12 characters long
generate_and_display_passwords(num_pass, password_length, character_set)","def generate_and_display_passwords(num_pass, password_length, character_set):
    # Implement a function that prints 'num_pass' passwords, each 'password_length' long, using the 'character_set'.
    # Each password should be printed on a new line with an index.
    pass

# Sample dataset and function call
character_set = string.ascii_letters + string.digits + string.punctuation
num_pass, password_length = 5, 12  # Generate 5 passwords, each 12 characters long
generate_and_display_passwords(num_pass, password_length, character_set)",,,,,"import string
import secrets

# Define the set of characters to be used in the password
CHARACTER_SET = string.ascii_letters + string.digits + string.punctuation

def generate_password(length):
    """"""Generate a random password of the specified length.""""""
    password = ''.join(secrets.choice(CHARACTER_SET) for i in range(length))
    return password

def main():
    # Prompt the user for the number of passwords to generate and their length
    while True:
        try:
            num_pass = int(input(""How many passwords do you want to generate? ""))
            password_length = int(input(""Enter the length of the password(s): ""))
            break
        except ValueError:
            print(""Please enter a valid integer."")
            continue 
    # Generate the specified number of passwords and print them to the console
    print(""Generated passwords:"")
    for i in range(num_pass):
        password = generate_password(password_length)
        print(f""{i+1}. {password}"")

if __name__ == ""__main__"":
    main()"
Basics,Count Down Timer,"This project creates a simple countdown timer that counts down from a specified number of seconds up to 86400 (one day), displaying the time remaining in hours, minutes, and seconds format. The timer updates every second.","1. User Input: Prompt the user to enter the number of seconds for the countdown.
2. Time Calculation: Depending on the total seconds, calculate the hours, minutes, and seconds.
3. Timer Display and Countdown: Update the display in-place every second until the countdown reaches zero.
4. End Message: Once the countdown is over, display a message indicating that the time is up.",4,"def get_user_input():
    try:
        total_seconds = int(input(""Enter the number of seconds for the countdown: ""))
        return total_seconds
    except ValueError:
        print(""Please enter a valid integer."")
        return None

# Function call to test user input
seconds = get_user_input()
print(""Seconds entered:"", seconds)","def get_user_input():
    # Prompt the user to input the number of seconds for the countdown, validate it, and return it.
    pass

# Function call to test user input
seconds = get_user_input()
print(""Seconds entered:"", seconds)","def calculate_time(total_seconds):
    hours = total_seconds // 3600
    remaining_seconds = total_seconds % 3600
    minutes = remaining_seconds // 60
    seconds = remaining_seconds % 60
    return hours, minutes, seconds

# Sample dataset and function call
total_seconds = 3661  # Example for 1 hour, 1 minute, and 1 second
hours, minutes, seconds = calculate_time(total_seconds)
print(f""Hours: {hours}, Minutes: {minutes}, Seconds: {seconds}"")","def calculate_time(total_seconds):
    # Calculate hours, minutes, and seconds from total_seconds.
    pass

# Sample dataset and function call
total_seconds = 3661  # Example for 1 hour, 1 minute, and 1 second
hours, minutes, seconds = calculate_time(total_seconds)
print(f""Hours: {hours}, Minutes: {minutes}, Seconds: {seconds}"")","import time

def countdown_timer(total_seconds):
    while total_seconds > 0:
        hours, minutes, seconds = calculate_time(total_seconds)
        print(f""\rCountdown: {hours}h {minutes}m {seconds}s left"", end="""")
        time.sleep(1)
        total_seconds -= 1
    print(""\rCountdown complete!                         "")

# Function call to test the countdown (using a smaller number for demonstration)
countdown_timer(10)","import time

def countdown_timer(total_seconds):
    # Countdown from total_seconds to zero, updating the display in-place every second.
    pass

# Function call to test the countdown (using a smaller number for demonstration)
countdown_timer(10)","def display_end_message():
    print(""Time is up!"")

# Function call to display the end message
display_end_message()","def display_end_message():
    # Print ""Time is up!"" when the countdown is over.
    pass

# Function call to display the end message
display_end_message()",,,,,"import time

def countdownTimer():
	# get the number of seconds 
	no_of_secs = int(input('How many seconds?: '))
	while no_of_secs:
		if no_of_secs < 60:
			# calculate the number of hours, minutes and seconds
			hrs = no_of_secs // 3600
			mins = no_of_secs // 60
			secs = no_of_secs % 60
			# format the hours, minutes
			# and seconds to be displayed
			timer = '%02d:%02d:%02d' %(hrs, mins, secs)
			print(timer, end='\r')
			# delay execution of code by one second
			time.sleep(1)
			# countdown the number of seconds
			no_of_secs -= 1
		elif 60 <= no_of_secs < 3600:
			# calculate the number of hours, minutes and seconds
			hrs = no_of_secs // 3600
			mins = no_of_secs // 60
			secs = no_of_secs % 60
			# format the hours, minutes
			# and seconds to be displayed
			timer = '%02d:%02d:%02d' %(hrs, mins, secs)
			print(timer, end='\r')
			# delay execution of code by one second
			time.sleep(1)
			# countdown the number of seconds
			no_of_secs -= 1
		elif 3600 <= no_of_secs <= 86400:
			# calculate the number of hours, minutes and seconds
			hrs = no_of_secs // 3600
			mins = (no_of_secs % 3600) // 60
			secs = (no_of_secs % 3600) % 60
			# format the hours, minutes
			# and seconds to be displayed
			timer = '%02d:%02d:%02d' %(hrs, mins, secs)
			print(timer, end='\r')
			# delay execution of code by one second
			time.sleep(1)
			# countdown the number of seconds
			no_of_secs -= 1
	print('Time Up!')

countdownTimer()"
Games,BlackJack Game,"This project is a Python implementation of the classic casino card game Blackjack, designed to be played in the command line interface. The game is for a single player playing against an automated dealer. It uses basic concepts of card games, such as shuffling decks, drawing cards, calculating scores, and determining game outcomes based on Blackjack rules.","1. Setup and Initialization:
Import Libraries: The project starts by importing the random module for shuffling the deck.
Initialize Deck and Players: A deck of cards is created combining standard suits and values. Arrays for the player's hand (pl) and the dealer's hand (dl) are initialized to store drawn cards.
2. Game Functions:
Check Blackjack: Function to determine if a hand's value is exactly 21.
Check Bust: Function to check if a hand's total value exceeds 21, indicating a bust.
Ace Value Determination: Function to decide if an Ace counts as 1 or 11 based on the current hand value.
Adjust Sum: Function to adjust the total value of a hand, taking into consideration the flexible value of Aces.
3. Gameplay Mechanics:
Start Game: Function to shuffle the deck, draw initial cards for both player and dealer, and display the initial hands where the dealer shows only one card initially.
Player's Turn: Players decide whether to ""Hit"" (draw another card) or ""Stay"" (end their turn) based on their current hand's value. This function also handles user input for these decisions.
4. Loop Through Player Actions:
The main game loop continues to prompt the player for actions until they choose to stay, achieve a blackjack, get a bust, or reach a total score of 21.
5. Dealer's Turn:
After the player completes their turn, the dealer reveals their second card and proceeds to draw cards based on the game rules: the dealer must continue to draw cards until their score meets or exceeds 17.
6. Outcome Evaluation:
Compare the final scores of the player and the dealer to determine the winner, considering cases where the dealer or player gets blackjack, busts, or simply achieves a higher score without exceeding 21.",6,"import random

def setup_and_initialization():
    # Import random module and initialize deck and players' hands.
    deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A']*4  # Multiplied by 4 for each suit
    player_hand = []
    dealer_hand = []
    return deck, player_hand, dealer_hand

# Function call to setup and initialize game
deck, player_hand, dealer_hand = setup_and_initialization()
print(""Deck:"", deck)
print(""Player's Hand:"", player_hand)
print(""Dealer's Hand:"", dealer_hand)","import random

def setup_and_initialization():
    # Import random, initialize a deck with standard playing cards, and set up empty hands for the player and dealer.
    pass

# Function call to setup and initialize game
deck, player_hand, dealer_hand = setup_and_initialization()
print(""Deck:"", deck)
print(""Player's Hand:"", player_hand)
print(""Dealer's Hand:"", dealer_hand)","def check_blackjack(hand):
    # Check if the hand value is exactly 21
    return sum(hand) == 21

def check_bust(hand):
    # Check if the hand value exceeds 21
    return sum(hand) > 21

def ace_value_determination(hand, current_sum):
    # Decide if Ace counts as 1 or 11
    return 11 if current_sum + 11 <= 21 else 1

def adjust_sum(hand):
    # Adjust the sum considering Aces as 1 or 11
    return sum(hand)  # Simplified, assumes Ace handling elsewhere

# Sample dataset and function calls for testing
sample_hand = [7, 'A']
print(""Blackjack:"", check_blackjack(sample_hand))
print(""Bust:"", check_bust(sample_hand))
print(""Adjusted Sum:"", adjust_sum(sample_hand))","def check_blackjack(hand):
    # Check if the total value of a hand is exactly 21.
    pass

def check_bust(hand):
    # Determine if the total value of a hand exceeds 21.
    pass

def ace_value_determination(hand, current_sum):
    # Decide if an Ace in a hand should count as 1 or 11 based on the current total value.
    pass

def adjust_sum(hand):
    # Adjust the total value of a hand, especially considering Aces which can be 1 or 11.
    pass

# Sample dataset and function calls for testing
sample_hand = [7, 'A']
print(""Blackjack:"", check_blackjack(sample_hand))
print(""Bust:"", check_bust(sample_hand))
print(""Adjusted Sum:"", adjust_sum(sample_hand))","def start_game(deck, player_hand, dealer_hand):
    # Shuffle the deck and deal initial cards
    random.shuffle(deck)
    player_hand.extend([deck.pop(), deck.pop()])
    dealer_hand.extend([deck.pop(), deck.pop()])
    print(f""Dealer shows: {dealer_hand[0]} and hides one card"")
    return player_hand, dealer_hand

# Function call to start the game
player_hand, dealer_hand = start_game(deck, player_hand, dealer_hand)","def start_game(deck, player_hand, dealer_hand):
    # Shuffle the deck, deal two cards each to the player and dealer, show one dealer card and hide the other.
    pass

# Function call to start the game
player_hand, dealer_hand = start_game(deck, player_hand, dealer_hand)","def player_actions(deck, player_hand):
    # Player decides to hit or stay
    action = input(""Hit (1) or Stay (0)? "")
    while action == '1':
        player_hand.append(deck.pop())
        if check_bust(player_hand):
            print(""Player Busts!"")
            break
        action = input(""Hit (1) or Stay (0)? "")
    return player_hand

# Function call to process player actions
player_hand = player_actions(deck, player_hand)","def player_actions(deck, player_hand):
    # Allow the player to repeatedly choose to 'Hit' or 'Stay', drawing a card on 'Hit', until they choose to 'Stay' or bust.
    pass

# Function call to process player actions
player_hand = player_actions(deck, player_hand)","def dealers_turn(deck, dealer_hand):
    # Dealer draws cards until the score meets or exceeds 17
    while sum(dealer_hand) < 17:
        dealer_hand.append(deck.pop())
    return dealer_hand

# Function call to process dealer's turn
dealer_hand = dealers_turn(deck, dealer_hand)","def dealers_turn(deck, dealer_hand):
    # Dealer draws cards until their total is 17 or higher.
    pass

# Function call to process dealer's turn
dealer_hand = dealers_turn(deck, dealer_hand)","def evaluate_outcome(player_hand, dealer_hand):
    # Compare final scores to determine the winner
    player_score = sum(player_hand)
    dealer_score = sum(dealer_hand)
    if player_score > dealer_score:
        return ""Player Wins!""
    elif dealer_score > player_score:
        return ""Dealer Wins!""
    else:
        return ""It's a tie!""

# Function call to evaluate the game outcome
outcome = evaluate_outcome(player_hand, dealer_hand)
print(outcome)","def evaluate_outcome(player_hand, dealer_hand):
    # Compare the final scores of the player and dealer to declare a winner.
    pass

# Function call to evaluate the game outcome
outcome = evaluate_outcome(player_hand, dealer_hand)
print(outcome)","import random as rn
deck = [2,3,4,5,6,7,8,9,10,'J','Q','K','A']
suit = ['spade' , 'heart' , 'diamond' , 'club']
arr = []
pl = []
dl = []

# Check Blackjack__________________________________________
def check_Twenty_One(s):
    if s==21:
        return True
    else:
        return False

# Check Bust_______________________________________________
def Bust(s):
    if s>21:
        return True
    else:
        return False

# Check Ace is 1 or 11_____________________________________
def check_For_Ace(s):
    if (s+11)<=21:
        return 11
    else:
        return 1

# Adjust the sum___________________________________________
def check_sum(s):
    if s < 21:
        return s

    for i in range(len(pl)-1,-1,-1):
        if pl[i] == 'A':
            s -= 10
            break
    return s

# creating a well shuffled pack of cards___________________
def startGame():
    print(""Welcome to the BlackJack Game:\n"")
    for i in suit:
        for j in deck:
            arr.append([i,j])
    rn.shuffle(arr)
    
    pl.append(arr[0])
    pl.append(arr[1])
    dl.append(arr[2])
    dl.append(arr[3])
    
    print(f'\nDealer draws {dl[0]} and [xxxxxx,xx]\n')
    s = 0
    for i in range(0,2):
        if arr[i][1] == 'J' or arr[i][1] == 'K' or arr[i][1] == 'Q':
            s += 10
        elif arr[i][1] == 'A':
            s += check_For_Ace(s)
        else:
            s += arr[i][1]
    return s

# player's chance__________________________________________
def playersTurn(s):
    print(""You are currently at "" + str(s))
    print(f'Current Hand: {pl}')

    s = check_sum(s)

    if (check_Twenty_One(s)):
        #Check Blackjack_______________________________________
        if len(pl) == 2:
            print(""Hurray......It's a BLACKJACK....You Won\n"")
        #Check if player made 21_______________________________
        else:
            print(""Awesome!!!......You made 21!....You Won\n"")
        return 2
    elif (Bust(s)):
        print(""You got Bust.....You Lost\n"")
        return 3

    while(1):
        i = int(input(""\nHit(Press 1) or Stay(Press 0): ""))
        if i==1 or i==0:
            return i
        else:
            print(""Enter a valid number....\n"")

if __name__ == '__main__':
    s = startGame()
    c = j = 0
    for i in range(4,len(arr)):
        
        j = playersTurn(s)
        if j == 2 or j == 3:
            j = i
            break
        elif j == 0:
            j = i
            c = 100
            break
        print(f'You draw {arr[i]}\n')

        if arr[i][1] == 'J' or arr[i][1] == 'K' or arr[i][1] == 'Q':
            c = 10
        elif arr[i][1] == 'A':
            c = check_For_Ace(s)
        else:
            c = arr[i][1]
        s += c
        pl.append(arr[i])

    if c == 100:
        sp = s
        s = 0
        for i in range(2,4):
            if arr[i][1] == 'J' or arr[i][1] == 'K' or arr[i][1] == 'Q':
                s += 10
            elif arr[i][1] == 'A':
                s += check_For_Ace(s)
            else:
                s += arr[i][1]
        print(f""\nDealer's second card was {dl[1]}"")

        for i in range(j,len(arr)):
            print(f""\nDealer is at {s}"")
            print(f""\nDealer's current hand: {dl}\n"")

            s = check_sum(s)
            if (check_Twenty_One(s)):
                if len(dl) == 2:
                    print(""Dealer got a BlackJack and won the Game\nYou Lost\n"")
                else:
                    print(""Dealer made 21 and won the Game\nBetter Luck Next Time!\n"")
                break
            elif (Bust(s)):
                print(""Dealer got Busted\nYou Won\n"")
                break
            elif (sp < s):
                print(""Dealer Won the Game\n"")
                break

            print(f""Dealer draws {arr[i]}"")
            dl.append(arr[i])
            if arr[i][1] == 'J' or arr[i][1] == 'K' or arr[i][1] == 'Q':
                s += 10
            elif arr[i][1] == 'A':
                s += check_For_Ace(s)
            else:
                s += arr[i][1]"
Games,Number Guessing Game,This project is a number guessing game where the user has seven attempts to guess a random number between 1 and 10. The game provides immediate feedback whether the guess was too high or too low.,"1. Game Introduction: Display rules and prompt for user input to start or exit the game.
2. User Response Handling: Handle user responses, allowing only valid commands.
3. Game Logic: Within a loop, prompt the user to guess a number, validate input, and compare the guess to a randomly generated number.
4. Feedback and Repeat: Provide feedback based on the guess and reduce the number of attempts left. If the number is guessed correctly or attempts run out, offer to restart the game or end.",4,"def game_introduction():
    print(""Welcome to the Number Guessing Game!"")
    print(""Rules: Guess a number between 1 and 100. You have 5 attempts."")
    response = input(""Type 'start' to play or 'exit' to quit: "").lower()
    return response

# Function call to start the game or exit
game_response = game_introduction()
print(""User chose to:"", game_response)","def game_introduction():
    # Display the game's introduction message and rules, then prompt for 'start' or 'exit'.
    pass

# Function call to start the game or exit
game_response = game_introduction()
print(""User chose to:"", game_response)
","def handle_user_response(response):
    if response == 'start':
        print(""Starting the game..."")
    elif response == 'exit':
        print(""Exiting the game..."")
    else:
        print(""Invalid response. Please type 'start' or 'exit'."")

# Sample dataset and function call
handle_user_response(game_response)","def handle_user_response(response):
    # Check if response is 'start' or 'exit' and print corresponding message; handle invalid responses.
    pass

# Sample dataset and function call
handle_user_response(game_response)
","import random

def game_logic():
    target_number = random.randint(1, 100)
    attempts_left = 5
    while attempts_left > 0:
        try:
            guess = int(input(""Guess a number between 1 and 100: ""))
            if guess < 1 or guess > 100:
                print(""Please guess a number within the valid range."")
            elif guess < target_number:
                print(""Too low!"")
                attempts_left -= 1
            elif guess > target_number:
                print(""Too high!"")
                attempts_left -= 1
            else:
                print(""Congratulations! You guessed correctly."")
                break
        except ValueError:
            print(""Invalid input. Please enter a number."")
        print(f""Attempts left: {attempts_left}"")
    return attempts_left, target_number

# Function call to run the game logic
attempts, secret_number = game_logic()
print(""Game over. The number was:"", secret_number)","import random

def game_logic():
    # Generate a target number, loop to get user guesses with validation, compare guess to target, and provide feedback.
    pass

# Function call to run the game logic
attempts, secret_number = game_logic()
print(""Game over. The number was:"", secret_number)
","def feedback_and_repeat(attempts):
    if attempts > 0:
        print(""You won! Would you like to play again?"")
    else:
        print(""You've run out of attempts! Would you like to play again?"")
    response = input(""Type 'yes' to restart or anything else to exit: "").lower()
    if response == 'yes':
        game_logic()
    else:
        print(""Thank you for playing!"")

# Function call to provide feedback and offer to restart or end the game
feedback_and_repeat(attempts)","def feedback_and_repeat(attempts):
    # Provide win or lose feedback based on remaining attempts, prompt to restart or exit the game.
    pass

# Function call to provide feedback and offer to restart or end the game
feedback_and_repeat(attempts)",,,,,"# coding=utf-8
import random
# random module is a built-in module to generate pseudo-random variables

def display_gameplay():
    """"""
    Displays the gameplay
    : return: None
    """"""
    print('\nWelcome to Number Guessing Game!')
    print('In this game you\'ve just 7 trials to guess a number between the range of 1-10')
    print('Note: enter \'exit\' to end game')

def startGame():
    """"""
    Gets user response to start or end the game
    : return: str
    """"""
    # call the function to display gameplay
    displayGameplay = display_gameplay()
    # make a list of the possible inputs
    # to start or end the game
    possible_responses = ['Y','YES','N','NO','EXIT']
    # get user's response
    user_response = input('\nStart game? (yes/no): ').strip().upper()
    while user_response not in possible_responses:
        print('\nInvalid Input!')
        user_response = input('\nStart game? (yes/no): ').strip().upper()
    else: return user_response

def game():
    """"""
    Controls the game
    : return: None
    """"""
    # call the function to get user's response
    play_game = startGame()
    # assign the number of trials the user has to a variable
    number_of_trials = 7
    # initialise new_game to true
    new_game = True
    while play_game == 'YES' or play_game == 'Y':
        # make a list that contains all the
        # numbers a user can guess
        accepted_number_picks = [str(i) for i in range(1,11)]
        # get user's number
        user_input = input('\nGuess a number between the range of 1-10: ').strip().upper()
        while user_input not in accepted_number_picks and user_input != 'EXIT' :
            print('Invalid Input!')
            user_input = input('\nGuess a valid number between the range of 1-10: ').strip().upper()
        if user_input == 'EXIT':
            print('Bye Player!')
            break
        else:
            # generate a random number in the range 1-10
            # and assign it to a variable
            # check if new_game, if true generate new computer_number else don't
            if new_game:
                computer_number = random.randint(1,10)
                new_game = False
            user_input = int(user_input)
            if user_input < computer_number:
                number_of_trials -= 1
                print(f'Oops, {user_input} is too low')
                if number_of_trials != 0:
                    print(f'You\'ve {number_of_trials} trial(s) left')
                    play_game = input('\nGuess again? (yes/no): ').strip().upper()
                else:
                    print('\nGame over!, you\'ve 0 trial left..try harder next time 😉')
                    break
            elif user_input > computer_number:
                number_of_trials -= 1
                print(f'Oops, {user_input} is too high')
                if number_of_trials != 0:
                    print(f'You\'ve {number_of_trials} trial(s) left')
                    play_game = input('\nGuess again? (yes/no): ').strip().upper()
                else:
                    print('\nGame over!, you\'ve 0 trial left..try harder next time 😉')
                    break
            elif user_input == computer_number:
                number_of_trials -= 1
                print(f'Congratulations!!..you guessed right, after {7 - number_of_trials} trial(s)')
                play_game = input('\nDo you wish to play again? (yes/no): ').strip().upper()
                # if the user wishes to play again, assign
                # the number of trials the user has to a variable
                number_of_trials = 7
                # start a new game
                new_game = True

game()"
Data Structure & Algo,Bubble Sort,"This project implements the Bubble Sort algorithm, a simple sorting technique used to sort elements in an array in ascending order. It also allows for modifications to sort in descending order.","1. Sorting Function: Implement the Bubble Sort algorithm with nested loops to repeatedly go through the array, comparing and swapping elements as needed.
2. Input Array: Define an array of integers to be sorted.
3. Sorting Execution: Call the sorting function on the array and print the array before and after sorting.",3,"def bubble_sort(arr):
    """"""
    Sort an array using the bubble sort algorithm.
    Repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.
    The pass through the list is repeated until the list is sorted.
    """"""
    n = len(arr)
    for i in range(n):
        # Track if a swap was made during this pass
        swapped = False
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]  # swap
                swapped = True
        # If no two elements were swapped by inner loop, then break
        if not swapped:
            break","def bubble_sort(arr):
    # Implement Bubble Sort: repeatedly pass through the array, compare adjacent items and swap if in wrong order.
    pass","# Define an array of integers
input_array = [64, 34, 25, 12, 22, 11, 90]
print(""Original array:"", input_array)","# Define an array of integers
input_array = [64, 34, 25, 12, 22, 11, 90]
print(""Original array:"", input_array)","# Display the array before sorting
print(""Array before sorting:"", input_array)

# Call the bubble_sort function to sort the array
bubble_sort(input_array)

# Display the array after sorting
print(""Array after sorting:"", input_array)","# Display the array before sorting
print(""Array before sorting:"", input_array)

# Call the bubble_sort function to sort the array
bubble_sort(input_array)

# Display the array after sorting
print(""Array after sorting:"", input_array)",,,,,,,"
def BubbleSort(array):

    # Loop to access each array element
    for i in range(len(array)):
        for j in range(0,len(array)-1-i):
            # Replace > with < for descending order
            if array[j] > array[j+1]:

                # Swapping elements if elements are not in the intended order
                temp = array[j] 
                array[j] = array[j+1]
                array[j+1] = temp
    return array


# Driver code
if __name__ == '__main__':
    Array = [-1,9,21,34,1,5,6,8,10,23,25,27,31]
    print(""Array before sorting: "", Array)
    print(""Array after sorting: "", BubbleSort(Array))"
Basics,DigitalClock,"This project is a Python application that creates a digital clock using the Tkinter GUI library. The clock displays the current time continuously updated every second. A unique feature of this digital clock is its colorful display, where the background color of the clock is randomly selected from a predefined list of colors.
","1. Import Libraries: The project starts by importing the necessary libraries including tkinter for the GUI, time for accessing current system time, and random for generating random colors.
2. Clock Class Definition:
Initialization (__init__): An instance of a Tkinter window (tk.Tk()) is created, and a random color is selected for the clock's background.
Settings (settings): Basic window settings are configured, such as setting the window title to ""My Clock"".
Widgets (widgets): This method sets up the GUI components:
Time Calculation: A nested function count_time calculates the current time and updates the clock label every 200 milliseconds (0.2 seconds) to ensure it remains accurate. This function uses recursion with the .after() method to continue updating the time.
Clock Label Creation: A label widget (tk.Label) is created to display the time. The font, background color, and text color are set. The clock is then packed to the center of the window.
Main Loop: The Tkinter main event loop is initiated to keep the application running and responsive.
3. Execution Block: An object of the Clock class is created and the settings and widgets methods are called to configure and display the clock.",3,"def import_libraries():
    # Imports tkinter, time, and random modules
    import tkinter as tk
    import time
    import random

# Function call to import libraries
import_libraries()","def import_libraries():
    # Import tkinter, time, and random libraries
    pass

# Function call to import libraries
import_libraries()","import tkinter as tk
import time
import random

class Clock:
    def __init__(self):
        # Initialize the Tkinter window and select a random background color for the clock
        self.master = tk.Tk()
        self.color = random.choice(['red', 'blue', 'green', 'black', 'orange', 'purple', 'brown', 'yellow', 'pink'])

    def settings(self):
        # Set the window title
        self.master.title(""My Clock"")

    def widgets(self):
        # Setup GUI components and time updating mechanism
        def count_time(time1=''):
            # Update the clock label every 200 milliseconds to show current time
            time2 = time.strftime('%H:%M:%S')
            if time2 != time1:
                time1 = time2
                clock.config(text=time2)
                clock.after(200, lambda: count_time(time1))
        # Create the clock label with specified font and colors
        clock = tk.Label(self.master, font=('Poppins', 50, 'bold'), background=self.color, foreground='white')
        clock.pack(anchor='center')
        # Start the time update loop
        count_time()
        # Run the main event loop of the Tkinter
        tk.mainloop()

# Sample code to define the Clock class with methods for initialization, settings, and widgets","import tkinter as tk
import time
import random

class Clock:
    def __init__(self):
        # Initialize a Tkinter window and select a random color from a predefined list for the background
        pass

    def settings(self):
        # Configure window settings like title
        pass

    def widgets(self):
        # Setup GUI components like the clock display, ensure it updates the time every 200 milliseconds
        pass

# Placeholder for class definition with methods for initialization, settings, and widget setup","def execute_clock():
    # Create a Clock instance and configure it using the defined methods
    my_clock = Clock()
    my_clock.settings()
    my_clock.widgets()

# Function call to execute the clock application
execute_clock()","def execute_clock():
    # Create an instance of Clock, call settings and widgets methods to configure and run the clock
    pass

# Function call to execute the clock application
execute_clock()",,,,,,,"# import GUI library - Tkinter
import tkinter as tk
import time
import random


class Clock:
    colors = ['red', 'blue', 'green', 'black', 'orange', 'purple', 'brown', 'yellow', 'pink']

    def __init__(self):
        # instance of Tkinter window
        self.master = tk.Tk()
        self.color = random.choice(Clock.colors)

    def settings(self):
        # Label the window to ""My Clock""
        self.master.title('My Clock')

    def widgets(self):
        # Time calculation
        def count_time(time1=''):
            time2 = time.strftime('%H:%M:%S')
            if time2 != time1:
                time1 = time2
                clock.config(text=time2)
                clock.after(200, count_time)
        # Create the clock text
        clock = tk.Label(self.master, font=('Poppins', 50, 'bold'), background=self.color, foreground='white')
        clock.pack(anchor='center')
        # Clock loop
        count_time()
        tk.mainloop()


if __name__ == '__main__':
    my_clock = Clock()
    my_clock.settings()
    my_clock.widgets()"
Social Media,InstaSpamBot,"This project automates the typing of text from a file into an active text input field, such as a messaging app or text editor, using the Python library PyAutoGUI. The program will read a specified text file, wait for a user-defined time to allow for focus adjustment on the correct input field, and then type each word from the file into the field, sending each word followed by pressing the 'enter' key. It simulates real-time typing with a pause between words to mimic human input speed.","1. Import Libraries:
Import pyautogui for controlling the keyboard and mouse.
Import time for adding delays in the script execution.
2. Load Text File:
Open and read a text file ('text') that contains the words or sentences to be typed out.
3. Initial Delay:
Add a 5-second sleep delay after opening the file. This delay allows the user to manually place the cursor in the desired text input field before the automated typing begins.
4. Automated Typing:
Iterate over each word in the text file.
Use pyautogui.typewrite to type each word into the active text input field.
Simulate pressing the 'enter' key after each word to submit it, using pyautogui.press('enter').
Include a 5-second pause between typing each word to ensure that the application receiving the text input can handle the input correctly and to make the typing appear more human-like.",4,"def import_libraries():
    # Import PyAutoGUI for keyboard and mouse control and time for delays.
    import pyautogui
    import time

# Function call to import libraries
import_libraries()","def import_libraries():
    # Import the pyautogui library for controlling the keyboard and mouse and the time library for handling delays.
    pass

# Function call to import libraries
import_libraries()","def load_text_file(filename):
    # Open and read a text file containing words or sentences.
    with open(filename, 'r') as file:
        content = file.read()
    return content

# Function call to load text file
text_content = load_text_file('text')
print(""Loaded text content:"", text_content)","def load_text_file(filename):
    # Open the specified text file in read mode and return its content.
    pass

# Function call to load text file
text_content = load_text_file('text')
print(""Loaded text content:"", text_content)","import time

def initial_delay(seconds):
    # Pause the script for a specified number of seconds.
    time.sleep(seconds)

# Function call to implement an initial 5-second delay
initial_delay(5)","import time

def initial_delay(seconds):
    # Implement a delay for the given number of seconds using the sleep function from the time library.
    pass

# Function call to implement an initial 5-second delay
initial_delay(5)
","import pyautogui
import time

def automated_typing(text):
    # Type each word from the text into an active text input field and press 'enter' after each word.
    words = text.split()  # This splits the text into words assuming spaces are separators
    for word in words:
        pyautogui.typewrite(word)
        pyautogui.press('enter')
        time.sleep(5)  # Pause between each word

# Function call to execute automated typing
automated_typing(text_content)","import pyautogui
import time

def automated_typing(text):
    # Split the text into words and type each word using pyautogui, then press 'enter'. Include a 5-second pause between words.
    pass

# Function call to execute automated typing
automated_typing(text_content)
",,,,,"import pyautogui
import time

text = open('text', 'r')
time.sleep(5)

for word in text:
    pyautogui.typewrite(word)
    pyautogui.press('enter')
    time.sleep(5)"
Social Media,WhatsApp Spambot,"This project involves creating a Python script that automatically sends a predefined message repeatedly using the PyAutoGUI library. The script is designed to run indefinitely, sending messages such as ""Hey you there"" at specified intervals. It utilizes the mouse and keyboard automation features of PyAutoGUI to interact with GUI elements like chat boxes, forums, or any text input area. This can be particularly useful for tasks like automated responses, testing chat functionalities in applications, or sending notifications in a loop.","1. Import Libraries:
The script starts by importing pyautogui for controlling keyboard and mouse automation and time for handling delays between sending messages.
2. Initial Click:
A mouse click is simulated at a specific screen position (coordinates 10, 5). This step is critical to ensure that the cursor is positioned in the correct text input field before the messages are sent.
3. Message Loop:
Set FAILSAFE to True for safety, which allows the automation to stop if the mouse is moved to a corner of the screen.
Enter an infinite loop where:
The message ""Hey you there"" is typed using pyautogui.write().
The message count is incremented.
The ENTER key is pressed to send the message using pyautogui.press().
The script pauses for 1 second using time.sleep(1) before repeating the process.
4. Safety and Control:
The FAILSAFE option ensures that the script can be stopped easily by manual intervention (moving the mouse to a screen corner), providing a built-in mechanism to prevent the script from running out of control.",4,"def import_libraries():
    # Import pyautogui for automation and time for delays.
    import pyautogui
    import time

# Function call to import necessary libraries
import_libraries()","def import_libraries():
    # Import pyautogui for automation and time for handling delays.
    pass

# Function call to import necessary libraries
import_libraries()","import pyautogui

def initial_click(x, y):
    # Simulate a mouse click at a specified screen position (x, y).
    pyautogui.click(x, y)

# Function call with coordinates for initial click
initial_click(10, 5)","import pyautogui

def initial_click(x, y):
    # Simulate a mouse click at the specified screen position using pyautogui.click.
    pass

# Function call with coordinates for initial click
initial_click(10, 5)","import pyautogui
import time

def message_loop():
    # Set FAILSAFE to True and enter an infinite loop to send messages.
    pyautogui.FAILSAFE = True
    count = 0
    while True:
        pyautogui.write(""Hey you there"")
        count += 1
        pyautogui.press(""enter"")
        time.sleep(1)
        print(f""Message count: {count}"")  # Optional: for monitoring the count

# Call to start the message sending loop
# Note: This will run indefinitely. Ensure you understand how to stop it (move the mouse to a screen corner).
# message_loop()  # Uncomment this line to execute, be cautious with infinite loops in practice.","import pyautogui
import time

def message_loop():
    # Enable FAILSAFE, start an infinite loop to type a message, press enter, and pause for 1 second.
    pass

# Call to start the message sending loop
# Note: This will run indefinitely. Ensure you understand how to stop it (move the mouse to a screen corner).
# message_loop()  # Uncomment this line to execute, be cautious with infinite loops in practice.","def setup_failsafe():
    # Enable PyAutoGUI failsafe feature to allow stopping the script by moving the mouse to a screen corner.
    import pyautogui
    pyautogui.FAILSAFE = True

# Function call to setup safety controls
setup_failsafe()","def setup_failsafe():
    # Configure pyautogui's FAILSAFE feature for safety during automation.
    pass

# Function call to setup safety controls
setup_failsafe()",,,,,"import pyautogui
import time

count = 0
pyautogui.click(10,5)
while True:
    pyautogui.FAILSAFE=True
    pyautogui.write(f""Hey you there"")
    count +=1
    pyautogui.press(""ENTER"")
    time.sleep(1)"
Social Media,Instagram Bot,"This project involves creating an automated Instagram bot using the InstaPy library, which is a tool designed for automating actions on Instagram via a web browser. The bot performs several actions such as following accounts, liking posts, and commenting based on specific criteria. It is set up to operate with constraints to behave more like a human user and less like a spam bot, including settings for the types of profiles it interacts with and the content it engages with.","1. Setup InstaPy:
Import the necessary InstaPy modules.
Initialize an InstaPy session with a specified username and password. The session runs using a specific browser executable path and is not headless, meaning the browser's graphical interface will be visible during the bot's operation.
2. Configure Session:
Inside a smart_run context (which ensures the bot handles login, setup, and cleanup automatically), configure various parameters:
Set Relationship Bounds: Define criteria for interacting with other profiles, such as limiting the activity to profiles with a certain number of followers and followings.
Set Language: Restrict interactions to profiles that post in English.
Follow Settings: Allow the bot to follow other accounts with specific parameters regarding how often to follow.
Like Settings: Enable liking posts based on specified tags and set the likelihood of liking these posts.
Comment Settings: Configure the bot to comment on posts and set limits on the number of comments to make per day.
Content Filtering: Define what content to avoid, such as posts containing specific words or tags.
3. Execution:
The bot carries out the specified actions—following, liking by tags, and commenting on posts. Each action is tailored by the previously set configurations to ensure the bot interacts in a targeted and respectful manner, adhering to the platform's guidelines and limits to avoid being flagged as spam.
4. Content Interaction:
Specific commands are executed to interact with content related to programming and technology (e.g., tags like 'coding', 'programming', etc.), and avoid content in categories like politics.",4,"def setup_instapy(username, password, executable_path):
    # Import InstaPy and initialize a session with visual browser interface.
    from instapy import InstaPy
    session = InstaPy(username=username, password=password, headless_browser=False, browser_executable_path=executable_path)
    return session

# Function call with example parameters
instapy_session = setup_instapy('your_username', 'your_password', r""C:\Program Files\Mozilla Firefox\firefox.exe"")","def setup_instapy(username, password, executable_path):
    # Import InstaPy and initialize an InstaPy session with specified credentials and browser settings.
    pass

# Function call with example parameters
instapy_session = setup_instapy('your_username', 'your_password', r""C:\Program Files\Mozilla Firefox\firefox.exe"")","from instapy import smart_run

def configure_session(session):
    # Configure various session parameters within a smart_run context.
    with smart_run(session):
        session.set_relationship_bounds(enabled=True, delimit_by_numbers=True, max_followers=1000, min_followers=70, min_following=50)
        session.set_mandatory_language(enabled=True, character_set=['ENGLISH'])
        session.set_do_follow(True, percentage=10, times=2)
        session.set_do_like(True, percentage=70)
        session.like_by_tags(['coding', 'programming'], media='Photo')
        session.set_do_comment(True, percentage=25)
        session.set_comments(['Awesome work!', 'Really cool!'])
        session.set_dont_like(['politics'])

# Function call to configure the session
configure_session(instapy_session)","from instapy import smart_run

def configure_session(session):
    # Use smart_run to manage the session automatically, set relationship bounds, language, following and liking behavior, and comment settings.
    pass

# Function call to configure the session
configure_session(instapy_session)","def execute_bot_actions(session):
    # Execute various actions such as follow, like, and comment within a smart_run context.
    with smart_run(session):
        session.like_by_tags(['webdevelopment', 'computerscience'], amount=5)
        session.follow_user_followers(['tech_accounts'], amount=10, randomize=False)
        session.set_comments(['Nice work! @{}'], media='Photo')
        session.comment_by_locations(['213385402'], amount=2)

# Function call to start execution of bot actions
execute_bot_actions(instapy_session)","def execute_bot_actions(session):
    # Execute actions such as liking by tags, following followers, and commenting on posts using configurations set in the smart_run context.
    pass

# Function call to start execution of bot actions
execute_bot_actions(instapy_session)","def interact_with_content(session):
    # Interact with specific content types by setting tags and avoiding others.
    with smart_run(session):
        session.set_do_like(True, percentage=50)
        session.like_by_tags(['coding', 'programming', 'computerscience', 'webdevelopment'], media='Photo')
        session.set_dont_like(['nsfw', 'politics'])

# Function call to interact with content
interact_with_content(instapy_session)","def interact_with_content(session):
    # Interact with specified content by liking posts tagged with specific keywords and avoiding certain tags, managed within a smart_run context.
    pass

# Function call to interact with content
interact_with_content(instapy_session)",,,,,"from instapy import InstaPy
from instapy import smart_run

username = '***************' #enter your username
password = '***************' #enter your password

profile = InstaPy(username= username,
                  password= password,
                  headless_browser= False,
                  browser_executable_path= r""C:\Program Files\Mozilla Firefox\firefox.exe"")

with smart_run(profile):
    profile.set_relationship_bounds(enabled=True,
                                    delimit_by_numbers=True,
                                    max_followers=1000,
                                    min_followers=70,
                                    min_following=50)
    
    #select desired language
    profile.set_mandatory_language(enabled=True, character_set=['ENGLISH'])
    
    #allow the bot to follow other accounts
    profile.set_do_follow(True, percentage=10, times=2)
    
    #allow the bot to like posts with specific tags in them
    profile.set_do_like(enabled=True, percentage=70)
    profile.like_by_tags(['coding', 'programming', 'computerscience', 'webdevelopment'], media='Photo')
    
    #allow bot to comment on posts
    profile.set_do_comment(enabled=True, percentage=25)
    profile.set_delimit_commenting(enabled=True, max_comments=32, min_comments=10)
    profile.set_comments(['Awesome', 'Really Cool', 'I like your stuff'])

    profile.set_comments(['Nice work!'], media='Photo')
    profile.set_comments(['Great work!'], media='Video')
    profile.set_comments(['Nice work! @{}'], media='Photo')

    profile.set_dont_like(['politics'])
"
Basics,Photo Editor App,"This project involves creating a simple Python script to overlay one image onto another using the Python Imaging Library (PIL), now known as Pillow. The script opens two images: a foreground image and a background image. It then pastes the foreground image onto the background at a specified position, effectively creating a composite image. The foreground image can have transparency, which allows for seamless integration onto the background image. This technique is commonly used in photo editing software to combine images or create new graphic designs.","1. Import Library:
Import the PIL module's Image class, which provides functions for opening, manipulating, and saving many different image file formats.
2. Open Images:
Load the foreground image ('lary.png') and the background image ('images.jpg') into memory. These images should be located in a directory accessible by the script, or their paths should be specified correctly.
3. Composite Images:
Use the paste() method from the PIL library to overlay the foreground image onto the background image. The paste() method requires specifying the position where the foreground image should be placed on the background. Optionally, if the foreground image includes an alpha channel (transparency), it will be used to blend the images seamlessly.
4. Display Result:
After compositing the images, use the show() method to display the resulting composite image. This is useful for quick verification and viewing but does not save the image to disk.",4,"def import_pil():
    # Import the Image class from PIL, which is necessary for image processing tasks.
    from PIL import Image

# Function call to import PIL
import_pil()","def import_pil():
    # Import the Image class from the PIL module to enable image processing capabilities.
    pass

# Function call to import PIL
import_pil()","from PIL import Image

def open_images(foreground_path, background_path):
    # Load the foreground and background images from the given paths.
    foreground = Image.open(foreground_path)
    background = Image.open(background_path)
    return foreground, background

# Function call to load images
foreground_image, background_image = open_images('lary.png', 'images.jpg')","from PIL import Image

def open_images(foreground_path, background_path):
    # Load and return the foreground and background images from the specified file paths.
    pass

# Function call to load images
foreground_image, background_image = open_images('lary.png', 'images.jpg')","def composite_images(background, foreground, position):
    # Paste the foreground image onto the background image at the specified position.
    # Position should be a tuple (x, y) indicating the top left corner where the foreground image should be placed.
    background.paste(foreground, position, foreground)

# Function call to composite images
composite_images(background_image, foreground_image, (0, 0))","def composite_images(background, foreground, position):
    # Overlay the foreground image onto the background image at the specified position, handling transparency if present.
    pass

# Function call to composite images
composite_images(background_image, foreground_image, (0, 0))","def display_result(image):
    # Display the image using the show() method, which opens the default image viewer.
    image.show()

# Function call to display the resulting composite image
display_result(background_image)","def display_result(image):
    # Use the show() method to display the image in the default viewer.
    pass

# Function call to display the resulting composite image
display_result(background_image)
",,,,,"from PIL import Image
me = Image.open('lary.png')
back = Image.open('images.jpg')
back.paste(me, (0,0), me)
back.show()















#me = Image.open('lary.png')
#bg = Image.open('images.jpg')
#bg.paste(me,(0,0),me)
#bg.show()"
Basics,Random Name Generator,"This project involves creating a Python script that fetches a list of names from an online source and randomly selects a name from the list. It uses the requests library to download the data from a given URL, which contains a plain text file of proper names. The random library is then used to select a name at random from this list. This could be particularly useful for applications such as generating random usernames, test data, or for any use case where random name selection is needed.","1. Import Libraries:
Import the requests module to handle HTTP requests.
Import the random module to enable random selection from the list.
2. Fetch Data:
Use the requests.get() method to download the content from a predefined URL that points to a plain text file containing proper names.
3. Data Processing:
Process the fetched data by splitting the text into individual names using the split() method. This step removes any empty spaces and organizes the data into an iterable list of names.
4. Random Name Selection:
Utilize the random.choice() method to select and print a random name from the list of names. This function is directly used on the list obtained from the splitting operation to pick a name at random.",4,"def import_libraries():
    # Import the required modules for HTTP requests and random operations.
    import requests
    import random

# Function call to import libraries
import_libraries()","def import_libraries():
    # Import the requests module for HTTP requests and the random module for random operations.
    pass

# Function call to import libraries
import_libraries()","import requests

def fetch_data(url):
    # Fetch content from the specified URL using the requests.get() method.
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        return ""Failed to retrieve data""

# Function call to fetch data
url = 'https://svnweb.freebsd.org/csrg/share/dict/propernames?revision=61766&view=co'
names = fetch_data(url)
print(names[:500])  # Print the first 500 characters of the fetched data for demonstration","import requests

def fetch_data(url):
    # Use requests.get() to download data from a URL and return the text content of the response.
    pass

# Function call to fetch data
url = 'https://svnweb.freebsd.org/csrg/share/dict/propernames?revision=61766&view=co'
names = fetch_data(url)
print(names[:500])  # Example of checking the first 500 characters of the data","def process_data(data):
    # Split the data into individual names using the split() method.
    return data.split()

# Function call to process data
individual_words = process_data(names)
print(individual_words[:10])  # Print the first 10 names to verify the split","def process_data(data):
    # Split the input data into a list of individual names using the split() method.
    pass

# Function call to process data
individual_words = process_data(names)
print(individual_words[:10])  # Example of checking the first 10 processed items","import random

def select_random_name(names_list):
    # Select and print a random name from the list using random.choice().
    return random.choice(names_list)

# Function call to select a random name
random_name = select_random_name(individual_words)
print(random_name)","import random

def select_random_name(names_list):
    # Use the random.choice() method to select a random name from the provided list.
    pass

# Function call to select a random name
random_name = select_random_name(individual_words)
print(random_name)
",,,,,"import requests
import random

url = 'https://svnweb.freebsd.org/csrg/share/dict/propernames?revision=61766&view=co'

names = requests.get(url).text

# We are splitting the words to clear out the empty spaces and create iterable
individual_words = names.split()

# to get random word
print(random.choice(individual_words))"
Internet Connection,WebScraping,"This project is designed to automate the process of scraping job listings for Python-related positions from a specific job portal, filtering out listings that require skills the user is not familiar with. The Python script utilizes the BeautifulSoup library for parsing HTML and the Requests library to handle HTTP requests. Users specify a skill they lack, and the script filters job listings to exclude any that mention this skill. The results are saved to individual text files for each job that meets the criteria.","1. Initial Setup:
Import necessary libraries: BeautifulSoup from bs4 for HTML parsing, requests for fetching web pages, and time for handling intervals between scrapes.
Prompt the user to enter a skill they are unfamiliar with, which will be used to filter job listings.
2. Define the Scraping Function:
Fetch the HTML text of the job listings page using requests.get().
Parse the HTML using BeautifulSoup to extract job details.
Iterate through each job listing found on the page and extract relevant information such as the company name, required skills, and a link to more details.
3. Filter and Save Job Listings:
For each job listing, check if the unfamiliar skill is mentioned in the required skills section.
If the skill is not mentioned, save the job details to a text file in a designated directory. Each job listing is saved in a separate file with a unique name based on its index.
Output a message to confirm the successful saving of the job data.
4. Automate Repetition:
Set the script to run the find_jobs function in an infinite loop, pausing for a specified interval (e.g., 10 minutes) between each execution to regularly check for new job postings.
5. Execution:
Ensure the script runs continuously, checking for new job postings at regular intervals, and only exits or stops based on user intervention or a defined condition.1. ",5,"from bs4 import BeautifulSoup
import requests
import time

def initial_setup():
    # Import libraries and prompt user for the skill they are not familiar with
    print('Please Enter Skills You are not familiar with')
    unfamiliar_skill = input(' > ')
    print(f'Filtering Out {unfamiliar_skill}')
    return unfamiliar_skill

# Function call to perform initial setup and capture unfamiliar skill
unfamiliar_skill = initial_setup()","from bs4 import BeautifulSoup
import requests
import time

def initial_setup():
    # Prompt the user to input a skill they are not familiar with and print a message that this skill will be filtered out.
    pass

# Function call to perform initial setup and capture unfamiliar skill
unfamiliar_skill = initial_setup()","def scrape_jobs(unfamiliar_skill):
    # Fetch and parse job listings, then extract relevant details
    url = 'https://www.myjobmag.co.ke/search/jobs?q=python'
    html_text = requests.get(url).text
    soup = BeautifulSoup(html_text, 'lxml')
    jobs = soup.find_all('li', class_='job-list-li')
    job_details = []
    for job in jobs:
        company_name = job.find('h2').text.strip()
        skills = job.find('li', class_='job-desc').text.strip()
        more_info = job.h2.a['href']
        job_details.append((company_name, skills, more_info))
    return job_details

# Function call to scrape jobs
jobs_data = scrape_jobs(unfamiliar_skill)
print(jobs_data[:3])  # Print the first three jobs for demonstration","def scrape_jobs(unfamiliar_skill):
    # Fetch job listings from a specific URL, parse the HTML to extract job details like company name, required skills, and additional info link.
    pass

# Function call to scrape jobs
jobs_data = scrape_jobs(unfamiliar_skill)
print(jobs_data[:3])  # Print the first three jobs for demonstration","import os

def save_jobs(jobs_data, unfamiliar_skill):
    # Filter out jobs requiring the unfamiliar skill and save to text files
    if not os.path.exists('posts'):
        os.makedirs('posts')
    for index, (company, skills, link) in enumerate(jobs_data):
        if unfamiliar_skill.lower() not in skills.lower():
            with open(f'posts/{index}.txt', 'w') as f:
                f.write(f""Company Name: {company}\nRequired Skills: {skills}\nMore Info: {link}\n"")
            print(f'File Saved Successfully: {index}')

# Function call to save job listings
save_jobs(jobs_data, unfamiliar_skill)
","import os

def save_jobs(jobs_data, unfamiliar_skill):
    # Check each job's required skills against the unfamiliar skill, save job details to a text file if the skill is not mentioned.
    pass

# Function call to save job listings
save_jobs(jobs_data, unfamiliar_skill)","def automate_scraping():
    # Run the scraping function in an infinite loop with intervals
    while True:
        jobs_data = scrape_jobs(unfamiliar_skill)
        save_jobs(jobs_data, unfamiliar_skill)
        time.sleep(600)  # Pause for 10 minutes between scrapes

# Uncomment the following line to start the automated scraping
# automate_scraping()","def automate_scraping():
    # Continuously execute the scraping and saving functions in a loop with a delay between each iteration.
    pass

# Uncomment the following line to start the automated scraping
# automate_scraping()","if __name__ == '__main__':
    # Ensure the script runs continuously and checks for new job postings regularly
    automate_scraping()","if __name__ == '__main__':
    # Run the scraping function in an infinite loop to continuously check for new job postings.
    automate_scraping()",,,"from bs4 import BeautifulSoup
import requests
import time

print('Please Enter Skills You are not familiar with')
unfamiliar_skill = input(' > ')
print(f'Filtering Out {unfamiliar_skill}')

def find_jobs():
     html_text = requests.get(' https://www.myjobmag.co.ke/search/jobs?q=python ').text
     soup = BeautifulSoup( html_text, 'lxml' )
     jobs = soup.find_all('li', class_ = 'job-list-li')
     for index, job in enumerate(jobs):
          published_date = job.find('li', class_ = 'job-item')
          company_name = job.find('h2').text.replace('  ', '  ')
          skills = job.find('li', class_ = 'job-desc').text.replace('  ', '  ')
          more_info = job.h2.a['href']
          if unfamiliar_skill not in skills:
               with open(f'posts/{index}.txt', 'w') as f:
                    f.write(f""Company Name: {company_name.strip()} \n"")
                    f.write(f""Required Skills: {skills.strip()} \n"")
                    f.write(f""More Info: {more_info} \n"")
               print('File Save Succesfully: {index}')

if __name__ == ""__main__"":
     while True:
          find_jobs()
          time.sleep(600)"
Audio,Text to Audio,"This project is a simple Python application that converts text into speech using the Google Text-to-Speech (gTTS) library. The script takes a predefined text string, converts it into an audio file using gTTS, and then plays the audio using the playsound library. It's an excellent example of how to implement text-to-speech functionality in Python applications, useful in scenarios like reading notifications aloud, aiding visually impaired users, or just adding audio feedback features to applications.","1. Import Libraries:
Import gTTS from the gtts module for converting text to speech.
Import playsound from the playsound module to play an audio file.
2. Setup Text and Language:
Define the text to be converted to speech and set the language code (e.g., 'en' for English).
3. Text-to-Speech Conversion:
Create a gTTS object with the specified text and language, and choose the speed of the speech (slow or normal).
Save the generated speech to an MP3 file using the .save() method.
4. Play the Audio File:
Use playsound to play the saved MP3 file, allowing the user to hear the text read aloud.
5. Execution:
The script runs linearly, performing the text-to-speech conversion before immediately playing back the audio file. It's designed to be executed with minimal setup, making it highly accessible for beginners or for integration into larger projects needing speech capabilities.",5,"def import_libraries():
    # Import the gTTS library for text to speech conversion and playsound for playing audio files.
    from gtts import gTTS
    from playsound import playsound

# Function call to import libraries
import_libraries()","def import_libraries():
    # Import the necessary libraries for text-to-speech conversion and playing audio files.
    pass

# Function call to import libraries
import_libraries()","def setup_text_and_language():
    # Define the text and the language for text-to-speech conversion.
    text = ""Hello, open source!""
    lang = 'en'
    return text, lang

# Function call to set up text and language
text, lang = setup_text_and_language()","def setup_text_and_language():
    # Define the text string to be converted to speech and specify the language code.
    pass

# Function call to set up text and language
text, lang = setup_text_and_language()","from gtts import gTTS

def text_to_speech_conversion(text, lang):
    # Create a gTTS object with the specified text and language, then save to an MP3 file.
    sp = gTTS(text=text, lang=lang, slow=False)
    audio = 'speech.mp3'
    sp.save(audio)
    return audio

# Function call to convert text to speech and save as an audio file
audio_file = text_to_speech_conversion(text, lang)","from gtts import gTTS

def text_to_speech_conversion(text, lang):
    # Convert the specified text to speech in the given language and save it as an MP3 file.
    pass

# Function call to convert text to speech and save as an audio file
audio_file = text_to_speech_conversion(text, lang)","from playsound import playsound

def play_audio(audio):
    # Play the specified MP3 audio file using playsound.
    playsound(audio)

# Function call to play the audio file
play_audio(audio_file)","from playsound import playsound

def play_audio(audio):
    # Play the specified audio file.
    pass

# Function call to play the audio file
play_audio(audio_file)","if __name__ == '__main__':
    # Import libraries
    import_libraries()
    
    # Setup text and language
    text, lang = setup_text_and_language()
    
    # Convert text to speech and save it
    audio_file = text_to_speech_conversion(text, lang)
    
    # Play the saved audio file
    play_audio(audio_file)","if __name__ == '__main__':
    # Sequence the script to import libraries, setup text, convert it to speech, and play the audio.
    import_libraries()
    text, lang = setup_text_and_language()
    audio_file = text_to_speech_conversion(text, lang)
    play_audio(audio_file)",,,"from gtts import gTTS
from playsound import playsound

audio='speech.mp3'
playsound(audio)
lang='en'
text=""hELLO, OPEN SOURCE!""
sp=gTTS(text=text,lang=lang,slow=False)
sp.save(audio)"
Internet Connection,Sending-Emails,"This project is a Python script designed to send emails with optional HTML content and file attachments. It utilizes the smtplib library to interact with an SMTP server and the email.message module to construct email messages. The script features robust logging for debugging and error handling, and it sources email credentials securely from environment variables. This script can be particularly useful for automated notifications, sending reports, or any application where emails are part of the workflow.","1. Import Necessary Libraries:
smtplib for sending emails using SMTP.
os to access environment variables storing sensitive information like email credentials.
EmailMessage from email.message for creating and managing email contents.
logging to handle logging of operations and errors.
2. Setup Logging:
Configure logging to track and report the status of email operations, successes, and failures.
3. Credential Management:
Use environment variables to securely store and retrieve the user's email address and password, which are necessary for logging into the SMTP server.
4. Email Composition and Sending Function:
Define a function send_email that constructs an email with the following features:
Basic Email Setup: Set the subject, sender, and recipient.
Text and HTML Content: Include plain text and optionally HTML content.
Attachments: Attach files if a path is provided, with error handling for missing files.
SMTP Interaction:
Connect securely to an SMTP server (e.g., Gmail's SMTP server).
Authenticate with user credentials.
Send the constructed email message.
Log the outcome of the send operation.
5. Error Handling:
Implement try-except blocks to manage exceptions during file operations and SMTP interactions, logging appropriate error messages for failures.
6. Execution:
Provide a usage example that demonstrates sending an email with text, HTML content, and an optional attachment.",6,"def import_libraries():
    # Import necessary libraries for email operations and logging.
    import smtplib
    import os
    from email.message import EmailMessage
    import logging

# Function call to import libraries
import_libraries()","def import_libraries():
    # Import the libraries necessary for SMTP email sending, handling environment variables, email content management, and logging.
    pass

# Function call to import libraries
import_libraries()","def setup_logging():
    # Configure basic logging to handle information and error reporting.
    import logging
    logging.basicConfig(level=logging.INFO)

# Function call to setup logging
setup_logging()","def setup_logging():
    # Configure the logging to handle and report various levels of information and errors during operations.
    pass

# Function call to setup logging
setup_logging()","def retrieve_credentials():
    # Retrieve email credentials securely from environment variables.
    import os
    email_address = os.getenv('EMAIL_ADDRESS')
    email_password = os.getenv('EMAIL_PASSWORD')
    return email_address, email_password

# Function call to retrieve credentials
email_address, email_password = retrieve_credentials()","def retrieve_credentials():
    # Fetch and return the user's email address and password stored as environment variables.
    pass

# Function call to retrieve credentials
email_address, email_password = retrieve_credentials()","from email.message import EmailMessage
import smtplib
import logging

def send_email(subject, recipient, body, html_content=None, attachment_path=None):
    # Compose and send an email with optional HTML content and attachment.
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = email_address
    msg['To'] = recipient
    msg.set_content(body)

    if html_content:
        msg.add_alternative(html_content, subtype='html')

    if attachment_path:
        try:
            with open(attachment_path, 'rb') as f:
                file_data = f.read()
                file_name = f.name
                msg.add_attachment(file_data, maintype='application', subtype='octet-stream', filename=file_name)
        except FileNotFoundError:
            logging.error(f""Attachment file {attachment_path} not found."")
            return False

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(email_address, email_password)
            smtp.send_message(msg)
            logging.info(""Email Sent Successfully"")
            return True
    except Exception as e:
        logging.error(f""An error occurred: {e}"")
        return False

# Usage example
send_email('Test Subject', 'recipient@example.com', 'This is the email body',
           '<html><body><h1>HTML Content</h1></body></html>', 'testing.txt')","from email.message import EmailMessage
import smtplib
import logging

def send_email(subject, recipient, body, html_content=None, attachment_path=None):
    # Create and configure an email message, log in to SMTP server, send the email, and handle exceptions.
    pass

# Usage example
send_email('Test Subject', 'recipient@example.com', 'This is the email body',
           '<html><body><h1>HTML Content</h1></body></html>', 'testing.txt')","def handle_errors():
    # Wrap potentially error-prone operations with try-except to manage exceptions and log errors.
    try:
        send_email('Subject Here', 'email@example.com', 'Hello world!')
    except Exception as e:
        import logging
        logging.error(f""Failed to send email: {e}"")

# Function call to handle errors during email sending
handle_errors()","def handle_errors():
    # Implement error handling for the email sending process, logging errors as they occur.
    pass

# Function call to handle errors during email sending
handle_errors()","if __name__ == '__main__':
    # Execute the complete email sending process with error handling.
    setup_logging()
    if send_email('Hello', 'recipient@example.com', 'This is a test email', None, None):
        print(""Email sent successfully."")
    else:
        print(""Email failed to send."")","if __name__ == '__main__':
    # Set up and run the email sending process, ensuring all components function as intended and handling any errors that occur.
    setup_logging()
    if send_email('Hello', 'recipient@example.com', 'This is a test email', None, None):
        print(""Email sent successfully."")
    else:
        print(""Email failed to send."")","import smtplib
import os
from email.message import EmailMessage
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)

# Use environment variables for credentials
EMAIL_ADDRESS = os.getenv('EMAIL_ADDRESS')  
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')  

def send_email(subject, recipient, body, html_content=None, attachment_path=None):
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = recipient

    msg.set_content(body)

    if html_content:
        msg.add_alternative(html_content, subtype='html')

    if attachment_path:
        try:
            with open(attachment_path, 'rb') as f:
                file_data = f.read()
                file_name = f.name
                msg.add_attachment(file_data, maintype='application', subtype='octet-stream', filename=file_name)
        except FileNotFoundError:
            logging.error(f""Attachment file {attachment_path} not found."")
            return

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            smtp.send_message(msg)
            logging.info(""Email Sent Successfully"")
    except Exception as e:
        logging.error(f""An error occurred: {e}"")

# Usage Example
send_email('Test Subject', 'recipient@example.com', 'This is the email body',
           '<html><body><h1>HTML Content</h1></body></html>', 'testing.txt')"
Basics,Shorten Links,"This project is a simple Python script that utilizes the pyshorteners library to shorten URLs. The script prompts the user to input a long URL and then uses the tinyurl service provided by pyshorteners to generate a shortened version of the URL. It's particularly useful for making lengthy URLs more manageable and easier to share, especially on platforms where character space is limited.","1. Import Library:
Import the pyshorteners module, which is used to interact with various URL shortening services.
2. Capture User Input:
Prompt the user to enter the URL they wish to shorten. This is done using the input() function to capture user input from the command line.
3. Shorten URL:
Initialize a Shortener object from the pyshorteners library.
Use the tinyurl service within pyshorteners to shorten the provided URL.
Store the shortened URL in a variable.
4. Display Result:
Print the shortened URL to the console, providing the user with the transformed link.
5. Execution:
The script is designed to run interactively: once started, it will prompt for input, process that input to shorten the URL, and then display the result—all in a straightforward, linear sequence.",5,"def import_library():
    # Import the pyshorteners module to access URL shortening services.
    import pyshorteners

# Function call to import library
import_library()","def import_library():
    # Import the pyshorteners library needed for URL shortening services.
    pass

# Function call to import library
import_library()","def capture_user_input():
    # Prompt the user to enter a URL to be shortened.
    link = input(""\nEnter your link: "")
    return link

# Function call to capture user input
user_link = capture_user_input()","def capture_user_input():
    # Prompt the user to enter a URL that they wish to shorten and return it.
    pass

# Function call to capture user input
user_link = capture_user_input()","import pyshorteners

def shorten_url(link):
    # Create a Shortener object and use it to shorten the provided URL using the tinyurl service.
    shortener = pyshorteners.Shortener()
    short_url = shortener.tinyurl.short(link)
    return short_url

# Function call to shorten the URL
shortened_url = shorten_url(user_link)","import pyshorteners

def shorten_url(link):
    # Use the pyshorteners library to create a shortener object and shorten the provided URL.
    pass

# Function call to shorten the URL
shortened_url = shorten_url(user_link)","def display_result(short_url):
    # Print the shortened URL to the console.
    print(""\nShortened link is: "" + short_url)

# Function call to display the shortened URL
display_result(shortened_url)","def display_result(short_url):
    # Output the shortened URL to the console.
    pass

# Function call to display the shortened URL
display_result(shortened_url)","if __name__ == '__main__':
    # Execute the URL shortening process interactively.
    import_library()
    user_link = capture_user_input()
    shortened_url = shorten_url(user_link)
    display_result(shortened_url)","if __name__ == '__main__':
    # Run the full process of importing the library, capturing user input, shortening the URL, and displaying the result.
    import_library()
    user_link = capture_user_input()
    shortened_url = shorten_url(user_link)
    display_result(shortened_url)",,,"""""""
Example input : https://github.com/Dhrumil-Zion/Python-project-Scripts
""""""

import pyshorteners

link = input(""\nEnter your link : "")

short = pyshorteners.Shortener()
x = short.tinyurl.short(link)

print(""\nShorted link is : ""+x)"
Data Structure & Algo,Python Dictionary,"The Interactive Dictionary is a Python-based application that provides definitions for words by looking them up in a JSON file containing a collection of words and their meanings. If an exact match isn't found, the application suggests the closest matches and prompts the user to confirm if the suggestion is correct. ","1. Import Libraries
2. Load JSON Data
3. Create the Translation Function
4. Handle User Input
5. Output the Definition
6. Run the Script",7,"import json
from difflib import SequenceMatcher
from difflib import get_close_matches","import json
from difflib import SequenceMatcher
from difflib import get_close_matches","data = json.load(open(""076 data.json""))","data = json.load(open(""076 data.json""))","def translate(w):
    if w in data:
        return data[w]
    elif w.title() in data:
        return data[w.title()]
    elif w.upper() in data: # in case user enters words like USA or NATO
        return data[w.upper()]    
    elif len(get_close_matches(w, data.keys())) > 0:
        answer = input(""Did you mean %s instead? Enter Y if yes or N if no: "" % get_close_matches(w, data.keys())[0])
        answer = answer.lower()
        if answer == ""y"" or answer == ""yes"":
            return data[get_close_matches(w, data.keys())[0]]
        elif answer == ""n"" or answer == ""no"":
            return ""TRY ANOTHER WORD:""
        else:
            return ""We didn't understand what you wanted. Type Y for yes and N for no.""
    else:
        return ""The word doesn't exist in the data.json database!""","def translate(w):
    """"""
    Function to translate a word to its definition.
    Checks for exact matches, title case, and uppercase.
    Suggests close matches if the word is not found.
    """"""
   pass","word = input(""Enter a word: "")  # Prompt the user to enter a word
word = word.lower()  # Convert the input to lowercase to ensure consistency","word = input(""Enter a word: "")  # Prompt the user to enter a word
word = word.lower()  # Convert the input to lowercase to ensure consistency","output = translate(word)  # Call the translate function with the user input
 
if type(output) == list:
    for item in output:  # Print each item if the output is a list
        print(item)
else:
    print(output)  # Print the output if it is not a list",#output the definition,"if __name__ == ""__main__"":
    main()  # Ensure the main function runs when the script is executed directly",,"import json
from difflib import SequenceMatcher
from difflib import get_close_matches

# accessing the data.json file
data = json.load(open(""076 data.json""))

# function to check if entered word is present in the 076_data.json file and print neccessary output
def translate(w):
    if w in data:
        return data[w]
    elif w.title() in data:
        return data[w.title()]
    elif w.upper() in data: #in case user enters words like USA or NATO
        return data[w.upper()]    
    elif len(get_close_matches(w,data.keys())) > 0:
        answer = input(""Did you mean %s instead? enter Y if yes or N if no:""%get_close_matches(w,data.keys())[0])
        answer = answer.lower()
        if answer == ""y"" or answer == ""yes"":
            return data[get_close_matches(w,data.keys())[0]]
        elif answer == ""n"" or answer == ""no"":
            return ""TRY ANOTHER WORD:""
        else:
            return ""We didn't Understand what you wanted Type y for yes and n for no: ""
    else:
        print (""THE WORD DOESNT EXIST in the data.json database!!!!! "")

word = input(""Enter a word:"")

word = word.lower()

print(translate(word))
output = translate(word)
#can comment this below not so neccessary.....
if type(output) == list:

    for item in output:
        print(item)
else:
    print (output)"
Image,Image Captcha Generator,Generate Captcha Images with a random numeric value,"1. Generate a Random Number with N Digits
2. Create a CAPTCHA Image from the Random Number
3. Save the CAPTCHA Image to a File
4. Display Confirmation of the Generated Image",4,"from random import randint

def random_with_N_digits(n):
    """"""
    Generate a random number with n digits.
    """"""
    range_start = 10 ** (n - 1)
    range_end = (10 ** n) - 1
    return randint(range_start, range_end)

# Sample usage
n = 5  # number of digits
random_number = random_with_N_digits(n)
print(f""Generated random number with {n} digits: {random_number}"")","
def random_with_N_digits(n):
    """"""
    Generate a random number with n digits.
    """"""",,"from captcha.image import ImageCaptcha

def create_captcha_image(number):
    """"""
    Create a CAPTCHA image from the given number.
    """"""
    image = ImageCaptcha()
    captcha_image = image.generate(str(number))
    return captcha_image

# Sample usage
number = 12345
captcha_image = create_captcha_image(number)","from captcha.image import ImageCaptcha

def create_captcha_image(number):
    """"""
    Create a CAPTCHA image from the given number.
    """"""
pass",,"from captcha.image import ImageCaptcha

def save_captcha_image(number, file_name):
    """"""
    Save the CAPTCHA image of the given number to a file.
    """"""
    image = ImageCaptcha()
    image.write(str(number), file_name)

# Sample usage
number = 12345
file_name = f""{number}.png""
save_captcha_image(number, file_name)
print(f""Captcha image saved as {file_name}"")","from captcha.image import ImageCaptcha

def save_captcha_image(number, file_name):
    """"""
    Save the CAPTCHA image of the given number to a file.
    """"""
pass","from captcha.image import ImageCaptcha
from random import randint

def random_with_N_digits(n):
    """"""
    Generate a random number with n digits.
    """"""
    range_start = 10 ** (n - 1)
    range_end = (10 ** n) - 1
    return randint(range_start, range_end)

def create_and_save_captcha(n):
    """"""
    Generate a random number with n digits, create a CAPTCHA image,
    save it to a file, and print a confirmation message.
    """"""
    number = random_with_N_digits(n)
    file_name = f""{number}.png""
    image = ImageCaptcha()
    image.write(str(number), file_name)
    print(f""A {file_name} is generated with the number {number}"")

# Sample usage
n = int(input(""Enter number of digits: ""))
create_and_save_captcha(n)","from captcha.image import ImageCaptcha
from random import randint

def random_with_N_digits(n):
    """"""
    Generate a random number with n digits.
    """"""",,,"from captcha.image import ImageCaptcha
from random import randint

def random_with_N_digits(n):
    range_start = 10 ** (n - 1)
    range_end = (10 ** n) - 1
    return randint(range_start, range_end)

num = random_with_N_digits(int(input(""Enter number of digits:"")))
name = (""%d.png"" % num)
image = ImageCaptcha()
data = image.generate(""'%d'"" % num)
image.write(""'%d'"" % num, name)
print(""A {}.png is generated"".format(num))"
Audio,Audio Captcha Generator,Generate Captcha audio with a random numeric value,"Steps to Implement the Project

    1. Generate a Random Number within a Specified Range
    2. Create an Audio CAPTCHA from the Random Number
    3. Save the CAPTCHA Audio to a File
   4. Display Confirmation of the Generated Audio",4,"from random import randint

def generate_random_number(start, end):
    """"""
    Generate a random number within a specified range.
    """"""
    return randint(start, end)

# Sample usage
start = 100000
end = 999999
random_number = generate_random_number(start, end)
print(f""Generated random number: {random_number}"")","from random import randint

def generate_random_number(start, end):
    """"""
    Generate a random number within a specified range.
    """"""
pass",,"from captcha.audio import AudioCaptcha

def create_audio_captcha(number):
    """"""
    Create an audio CAPTCHA from the given number.
    """"""
    audio = AudioCaptcha()
    captcha_audio = audio.generate(str(number))
    return captcha_audio

# Sample usage
number = 123456
audio_data = create_audio_captcha(number)",,"from captcha.audio import AudioCaptcha

def create_audio_captcha(number):
    """"""
    Create an audio CAPTCHA from the given number.
    """"""
pass","from captcha.audio import AudioCaptcha

def save_audio_captcha(number, file_name):
    """"""
    Save the CAPTCHA audio of the given number to a file.
    """"""
    audio = AudioCaptcha()
    audio.write(str(number), file_name)

# Sample usage
number = 123456
file_name = f""{number}.mp3""
save_audio_captcha(number, file_name)
print(f""Captcha audio saved as {file_name}"")","from captcha.audio import AudioCaptcha

def save_audio_captcha(number, file_name):
    """"""
    Save the CAPTCHA audio of the given number to a file.
    """"""","from captcha.audio import AudioCaptcha
from random import randint

def generate_random_number(start, end):
    """"""
    Generate a random number within a specified range.
    """"""
    return randint(start, end)

def create_and_save_audio_captcha(start, end):
    """"""
    Generate a random number within a specified range, create an audio CAPTCHA,
    save it to a file, and print a confirmation message.
    """"""
    number = generate_random_number(start, end)
    file_name = f""{number}.mp3""
    audio = AudioCaptcha()
    audio.write(str(number), file_name)
    print(f""A {file_name} is generated with the number {number}"")

# Sample usage
start = 100000
end = 999999
create_and_save_audio_captcha(start, end)","from captcha.audio import AudioCaptcha
from random import randint

def generate_random_number(start, end):
    """"""
    Generate a random number within a specified range.
    """"""
    return randint(start, end)

def create_and_save_audio_captcha(start, end):
    """"""
    Generate a random number within a specified range, create an audio CAPTCHA,
    save it to a file, and print a confirmation message.
    """"""
pass",,,"from captcha.audio import AudioCaptcha
from random import randint
audio = AudioCaptcha()
num = randint(100000,999999)
data = audio.generate(str(num))
audio.write(str(num), str(num)+'.mp3')
print(num)"
Image,Compress Image,"This project focuses on compressing images without losing their quality.
 The program takes an image file, compresses it, and saves the 
compressed version. If no image file is specified, a default image is 
compressed.",4,"Steps to Implement the Project
1. Input Image Filename or Use Default 2.Open the Image File 3. Compress the Image 4. Save the Compressed Image","def get_image_filename():
    """"""
    Get the image filename from user input or use a default filename.
    """"""
    image_name = input(""Enter the name of the image you want to compress: "")
    if not image_name:
        image_name = 'original_image.jpg'
    return image_name

# Sample usage
filename = get_image_filename()
print(f""Image filename to compress: {filename}"")","def get_image_filename():
    """"""
    Get the image filename from user input or use a default filename.
    """"""
pass","from PIL import Image

def open_image(filename):
    """"""
    Open an image file and return the image object.
    """"""
    try:
        image = Image.open(filename)
        return image
    except FileNotFoundError:
        print(f""File {filename} not found."")
        return None

# Sample usage
filename = 'example.jpg'
image = open_image(filename)
if image:
    image.show()  # This will open the image in the default image viewer","from PIL import Image

def open_image(filename):
    """"""
    Open an image file and return the image object.
    """"""
pass","from PIL import Image

def compress_image(image):
    """"""
    Compress an image without losing quality and return the compressed image object.
    """"""
    w, h = image.size
    compressed_image = image.resize((w, h), Image.ANTIALIAS)
    return compressed_image

# Sample usage
filename = 'example.jpg'
image = open_image(filename)
if image:
    compressed_image = compress_image(image)
    compressed_image.show()  # This will open the compressed image in the default image viewer","from PIL import Image

def compress_image(image):
    """"""
    Compress an image without losing quality and return the compressed image object.
    """"""
pass","from PIL import Image
import os

def save_compressed_image(image, original_filename):
    """"""
    Save the compressed image with a modified filename.
    """"""
    base_name, ext = os.path.splitext(os.path.basename(original_filename))
    compressed_filename = f""{base_name}_compressed{ext}""
    image.save(compressed_filename)
    print(f""Compressed image saved as {compressed_filename}"")

# Sample usage
filename = 'example.jpg'
image = open_image(filename)
if image:
    compressed_image = compress_image(image)
    save_compressed_image(compressed_image, filename)","from PIL import Image
import os

def save_compressed_image(image, original_filename):
    """"""
    Save the compressed image with a modified filename.
    """"""
pass",,,,,"from PIL import Image
import os

def compress_image():
    ''' Takes an image file and compress it without losing image quality. '''

    ''' If no image file is provided, the default image will be compressed '''
    try:
        image_name = str(input(""Enter the name of the image you want to compress: ""))
        default_image=Image.open(f'{image_name}')
    except FileNotFoundError:
        default_image=Image.open('original_image.jpg')
            
    # Get image 'width' and 'height'
    w, h =  default_image.size
    # Separate the file name from the extension
    default_image_name = os.path.splitext(os.path.basename(default_image.filename))
    # compress image
    default_image = default_image.resize((w, h), Image.ANTIALIAS)
    # return compressed image
    return default_image.save('{}_compressed{}'.format(default_image_name[0], default_image_name[1]))

# Run
compress_image()"
Image,Image GrayScalling,"This project aims to convert color images to grayscale. Grayscale images
 are often used in various applications, such as image processing and 
computer vision, as they contain only shades of gray, simplifying the 
image data. The program takes an image file, converts it to grayscale, 
and saves the grayscale version.",4,1. List All Files in the Current Directory 2. Open the Specified Image File 3. Convert the Image to Grayscale 4. Save the Grayscale Image,"from os import listdir, getcwd
from os.path import isfile, join

def list_files_in_directory(directory):
    """"""
    List all files in the specified directory.
    """"""
    files = [f for f in listdir(directory) if isfile(join(directory, f))]
    return files

# Sample usage
current_directory_files = list_files_in_directory(getcwd())
print(""All files in current directory:"", current_directory_files)","from os import listdir, getcwd
from os.path import isfile, join

def list_files_in_directory(directory):
    """"""
    List all files in the specified directory.
    """"""
pass","from PIL import Image

def open_image(filename):
    """"""
    Open the specified image file.
    """"""
    try:
        img = Image.open(filename)
        return img
    except FileNotFoundError:
        print(""File not found."")

# Sample usage
filename = 'example.jpg'  # Replace with the name of the image file
image = open_image(filename)","from PIL import Image

def open_image(filename):
    """"""
    Open the specified image file.
    """"""
    pass","from PIL import Image

def convert_to_grayscale(image):
    """"""
    Convert the given image to grayscale.
    """"""
    grayscale = image.convert('L')
    return grayscale

# Sample usage
grayscale_image = convert_to_grayscale(image)","from PIL import Image

def convert_to_grayscale(image):
    """"""
    Convert the given image to grayscale.
    """"""
pass","from PIL import Image

def save_grayscale_image(image, filename):
    """"""
    Save the grayscale image.
    """"""
    grayscale_image_filename = f""GrayScaled_{filename}""
    image.save(grayscale_image_filename)
    print(f""Grayscale image saved as {grayscale_image_filename}"")

# Sample usage
save_grayscale_image(grayscale_image, filename)","from PIL import Image

def save_grayscale_image(image, filename):
    """"""
    Save the grayscale image.
    """"""
pass",,,,,"from PIL import Image
from os import listdir,getcwd
from os.path import isfile, join

onlyfiles = [f for f in listdir(getcwd()) if isfile(join(getcwd(), f))]
print(""All files in current dir :"",onlyfiles)

img = Image.open(input(""Enter image filename : ""))  # image name with relative path
grayscale = img.convert('L')
grayscale.save('GrayScaled_{}'.format(img.filename))"
Everyday life,Weather Forecasting,"This project focuses on retrieving and displaying the current weather 
information for a specified city using an online weather service. The 
program takes the name of a city, fetches the weather data from the 
wttr.in website, and displays it to the user.",4,1. Input City Name 2. Construct the Weather Query URL 3. Fetch Weather Data 4. Display Weather Information,"def get_city_name():
    """"""
    Get the name of the city from user input.
    """"""
    city = input(""Enter the city name: "")
    return city

# Sample usage
city_name = get_city_name()
print(f""City name entered: {city_name}"")","def get_city_name():
    """"""
    Get the name of the city from user input.
    """"""
pass","def construct_url(city):
    """"""
    Construct the URL for querying the weather of the specified city.
    """"""
    url = f""https://wttr.in/{city}""
    return url

# Sample usage
city_name = ""New York""
weather_url = construct_url(city_name)
print(f""Weather query URL: {weather_url}"")","def construct_url(city):
    """"""
    Construct the URL for querying the weather of the specified city.
    """"""
pass","import requests

def fetch_weather_data(url):
    """"""
    Fetch the weather data from the given URL.
    """"""
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text
        else:
            return ""Error: Unable to fetch weather data.""
    except requests.RequestException:
        return ""Error: Network issue or invalid URL.""

# Sample usage
weather_url = ""https://wttr.in/New York""
weather_data = fetch_weather_data(weather_url)
print(f""Weather data:\n{weather_data}"")","import requests

def fetch_weather_data(url):
    """"""
    Fetch the weather data from the given URL.
    """"""
pass",,"import requests

def get_city_name():
    """"""
    Get the name of the city from user input.
    """"""

def construct_url(city):
    """"""
    Construct the URL for querying the weather of the specified city.
    """"""

def fetch_weather_data(url):
    """"""
    Fetch the weather data from the given URL.
    """"""

def display_weather():
    """"""
    Get the city name, construct the weather query URL, fetch the weather data,
    and display the weather information.
    """"""
pass",,,,,"import requests

city = input(""\nEnter the city name : "")
url = ""https://wttr.in/{}"".format(city)
try:
    res = requests.get(url)
    print(res.text)
except:
    print(""Error occure Please try again later..."")"
Data Structure & Algo,Auto Move Files,"This Python project creates a real-time monitoring system for a specific directory on a computer, automatically moving any files that are added or modified to a designated destination directory. This is especially useful for organizing files or handling incoming files that need to be processed or relocated without manual intervention.","1. Define a file system event handler
2. Initialize and configure the observer
3. Start the observer
4. Handle interruptions and stop the observer
",4,"import os
from watchdog.events import FileSystemEventHandler

class Handler(FileSystemEventHandler):
    def __init__(self, destination_folder):
        self.destination_folder = destination_folder

    def on_modified(self, event):
        """"""Move modified files to a new directory.""""""
        for filename in os.listdir(event.src_path):
            src = f""{event.src_path}/{filename}""
            dst = f""{self.destination_folder}/{filename}""
            os.rename(src, dst)
","import os
from watchdog.events import FileSystemEventHandler

class Handler(FileSystemEventHandler):
    pass
","from watchdog.observers import Observer

def setup_observer(watched_folder, handler):
    """"""Create and configure a directory observer.""""""
    observer = Observer()
    observer.schedule(handler, path=watched_folder, recursive=True)
    return observer
","from watchdog.observers import Observer

def setup_observer(watched_folder, handler):
    pass
","def start_observer(observer):
    """"""Start the observer to monitor changes.""""""
    observer.start()
    return observer
","def start_observer(observer):
    """"""Start the observer to monitor changes.""""""
    pass
","def monitor_folder(observer):
    """"""Monitor the folder and handle the stop request gracefully.""""""
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        print(""Stopping observer..."")
        observer.stop()
        observer.join()
","def monitor_folder(observer):
    """"""Monitor the folder and handle the stop request gracefully.""""""
    pass
",,,,,"from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# pip install watchdog /or/ poetry add watchdog    (required)

import time
import os
import json

class Handler(FileSystemEventHandler):
    def on_modified(self, event):
        for file in os.listdir(watched_folder):
            src = f""{watched_folder}/{file}""
            dst = f""{destination_folder}/{file}""
            os.rename(src=src, dst=dst)

if __name__==""__main__"":
    watched_folder = input(""Paste the path to the folder to be tracked: "")
    destination_folder = input(""Paste the path to the destination folder: "")
    handler = Handler()
    observer = Observer()
    observer.schedule(event_handler=handler, path=watched_folder, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
"
Data Structure & Algo,Getting files and folders sizes,"The project is a utility to calculate file and directory sizes in KB using various command-line arguments. Users can specify whether they want to look at individual files or directories, and whether to filter files by a prefix.","1. Define a file system event handler
2. Initialize and configure the observer
3. Start the observer
4. Handle interruptions and stop the observer
5. Complete usage",5,"import argparse

def parse_arguments():
    # Parses command-line arguments and returns them
    parser = argparse.ArgumentParser(description=""Calculate file and directory sizes in KB"")
    parser.add_argument(""-F"", help=""File prefix for recursive search"")
    parser.add_argument(""path"", help=""File or directory path"")
    parser.add_argument(""-d"", action=""store_true"", help=""Calculate size for directories"")
    parser.add_argument(""-f"", action=""store_true"", help=""Calculate size for files"")
    return parser.parse_args()

args = parse_arguments()
","import argparse

def parse_arguments():
    # Parses command-line arguments and returns them
    pass

args = parse_arguments()
","import os

def validate_args(args):
    # Determines the mode of operation based on arguments
    is_dir = os.path.isdir(args.path)
    if args.F and not args.d and not args.f:
        print('[-F] option cannot be used alone')
    elif args.d and is_dir:
        return ""directory""
    elif args.f and not is_dir:
        return ""file""
    elif args.f and args.F:
        print('Cannot use [-F] and [-f] together')
    else:
        print('Invalid argument combination or path error')
    return None

mode = validate_args(args)
","import os

def validate_args(args):
    # Determines the mode of operation based on arguments
    pass

mode = validate_args(args)
","def calculate_directory_size(directory_path):
    # Calculates the total size of files in the directory in KB
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(directory_path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            if not os.path.islink(fp):
                total_size += os.path.getsize(fp) / 1024
    return total_size

if mode == ""directory"":
    print(f""Size of files in directory: {calculate_directory_size(args.path):.3f} KB"")
","def calculate_directory_size(directory_path):
    # Calculates the total size of files in the directory in KB
    pass

if mode == ""directory"":
    print(f""Size of files in directory: {calculate_directory_size(args.path):.3f} KB"")
","def calculate_file_size(file_path):
    # Calculates the size of a single file in KB
    if not os.path.islink(file_path):
        return os.path.getsize(file_path) / 1024
    return 0

if mode == ""file"":
    print(f""Size of file {args.path} is: {calculate_file_size(args.path):.3f} KB"")
","def calculate_file_size(file_path):
    # Calculates the size of a single file in KB
    pass
if mode == ""file"":
    print(f""Size of file {args.path} is: {calculate_file_size(args.path):.3f} KB"")
","def calculate_prefixed_file_size(directory_path, prefix):
    # Calculates the total size of files that match the prefix in KB
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(directory_path):
        for f in filenames:
            if f.startswith(prefix):
                fp = os.path.join(dirpath, f)
                if not os.path.islink(fp):
                    total_size += os.path.getsize(fp) / 1024
    return total_size

if args.F and mode == ""directory"":
    print(f""Size of {args.F} files in directory: {calculate_prefixed_file_size(args.path, args.F):.3f} KB"")
","def calculate_prefixed_file_size(directory_path, prefix):
    # Calculates the total size of files that match the prefix in KB
    pass
","def main():
    watched_folder = input(""Paste the path to the folder to be tracked: "")
    destination_folder = input(""Paste the path to the destination folder: "")

    handler = Handler(destination_folder=destination_folder)
    observer = setup_observer(watched_folder=watched_folder, handler=handler)
    start_observer(observer)
    monitor_folder(observer)

if __name__ == ""__main__"":
    main()
","def main():
    pass","#!/usr/bin/python3

import argparse
import os

parser = argparse.ArgumentParser(description=""Take a directory path or a filename and calculate those sizes in KB"")
# Creating an ArgumentParser object

parser.add_argument(""-F"", help=""Choose file prefix for recursive search in directory"")
parser.add_argument(""path"", help=""File or directory path for calculating size"")
# Adding arguments

group = parser.add_mutually_exclusive_group()
# Creating MutuallyExclusiveGroup object

group.add_argument(""-d"", action=""store_true"", help=""Directory name for calculate size in KB"")
group.add_argument(""-f"", action=""store_true"", help=""File name for calculate file size in KB"")
# Adding mutually exclusive arguments [-d | -f]

args = parser.parse_args()
# Taking arguments from command line

F_argument = args.F
d_argument = args.d
f_argument = args.f
path = args.path
# Unpacking arguments to variables

is_dir = os.path.isdir(path)
# Check if path is a directory not a file

if F_argument and not d_argument and not f_argument:
    # If user uses [-F] option lonely
    print('[-F] option cannot be used alone')

elif d_argument and is_dir and not f_argument and not F_argument:
    # If [-d] used and path is a directory

    def get_size(start_path):
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(start_path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                # skip if it is symbolic link
                if not os.path.islink(fp):
                    total_size += os.path.getsize(fp) / 1024
                    # Calculate files sizes and convert to kb

        return total_size


    print(f""Size of files in directory: {get_size(path):.3f} KB"")

elif d_argument and not is_dir and not f_argument and not F_argument:
    # If user uses -d option with a file path not a directory
    print('Must use a directory path with [ -d ].')

elif f_argument and not is_dir and not d_argument and not F_argument:
    # Id [-f] option used and a file name was entered
    file_size = os.path.getsize(path) / 1024
    # Calculate file size and convert to kb
    print(f""Size of file {path} is: {file_size:.3f} KB"")

elif f_argument and is_dir and not d_argument and not F_argument:
    # If user uses [-f] option with a directory path not a file path
    print('Must use [ -f ] with a file name not a directory path')

elif f_argument and F_argument:
    # If user uses [-F] option with [-F] option
    print('You can not use [-F] option with [-f] option')

elif F_argument and d_argument and is_dir and not f_argument:
    # If [-F] for search files with their prefixes in a [-d] directory
    def get_size(start_path):
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(start_path):
            for f in filenames:
                if f.endswith(F_argument):
                    fp = os.path.join(dirpath, f)
                    # skip if it is symbolic link
                    if not os.path.islink(fp):
                        total_size += os.path.getsize(fp) / 1024
                        # Calculate files sizes and convert to kb

        return total_size


    print(f""Size of {F_argument} files in directory: {get_size(path):.3f} KB"")

elif F_argument and d_argument and not is_dir and not f_argument:
    # If user uses [-F] option and [-d] option and a file path except directory path
    print('Must use [ -d ] option with a directory path')"
Basics,Simple Flask Calculator,"This Python coding project is about creating a simple web calculator using Flask. The web application allows users to input two operands and an operator, then calculates and displays the result. The project involves the following primary functionalities:

Displaying a form for user input.
Processing user inputs and calculating results based on the selected operation.
Displaying the calculation results back to the user.","1: Create and display a form for user input
2: Handle user input and perform calculation
3: Display the calculation results
",3,"from flask import Flask, render_template

app = Flask(__name__)

# Function to render the input form
@app.route(""/"")
def display_form():
    # Renders a form where users can input two numbers and an operator
    return render_template('form.html')

# Run the function to display the form
display_form()
","from flask import Flask, render_template

app = Flask(__name__)

# Function to render the input form
@app.route(""/"")
def display_form():
    # Renders a form where users can input two numbers and an operator
    pass

# Run the function to display the form
display_form()
","from flask import request, jsonify

# Function to handle input and calculate result
@app.route(""/results"", methods=['POST'])
def calculate_results():
    # Extracts operands and operator from form and calculates result
    operand_1 = float(request.form.get('operand_1'))
    operand_2 = float(request.form.get('operand_2'))
    operator = request.form.get('operator')
    if operator == 'Addition':
        result = operand_1 + operand_2
    elif operator == 'Subtraction':
        result = operand_1 - operand_2
    elif operator == 'Multiplication':
        result = operand_1 * operand_2
    elif operator == 'Division':
        if operand_2 != 0:
            result = operand_1 / operand_2
        else:
            result = ""Cannot divide by zero""
    else:
        result = ""Invalid operation""
    return jsonify(result=result)

# Sample function call (assuming form data)
calculate_results()
","from flask import request, jsonify

# Function to handle input and calculate result
@app.route(""/results"", methods=['POST'])
def calculate_results():
    # Extracts operands and operator from form and calculates result
    pass

# Sample function call (assuming form data)
calculate_results()
","# Function to render the results on the form
@app.route(""/display"", methods=['GET'])
def display_result():
    # This function would typically retrieve result from a previous calculation and display it
    result = ""Sample result here""  # Placeholder for actual result
    return render_template('form.html', prediction_text=str(result))

# Call the function to display results
display_result()
","# Function to render the results on the form
@app.route(""/display"", methods=['GET'])
def display_result():
    pass
# Call the function to display results
display_result()
",,,,,,,"from flask import Flask, render_template, request, jsonify
# from handle_calculation import calculate

app = Flask(__name__)


@app.route(""/"")
def home():
    return render_template('form.html')

@app.route(""/results"", methods=['POST','GET'])
def predict():
    if request.method == 'POST' and 'operand_1' in request.form and 'operand_2' in request.form and 'operator' in request.form:
        operand_1 = float(request.form.get('operand_1'))
        operand_2 = float(request.form.get('operand_2'))
        operator = request.form.get('operator')
        if(operand_2 == 0 and operator=='Division'):
            result='Invalid_operation'
        elif(operator == 'Addition'):
            result = operand_1 + operand_2
        elif(operator == 'Subtraction'):
            result = operand_1 - operand_2
        elif(operator == 'Multiplication'):
            result = operand_1 * operand_2
        elif(operator == 'Division'):
            result = operand_1 / operand_2
        else:
            result = 'Invalid_Choice'
    # result = calculate(operand_1, operand_2, operator)
    return render_template(""form.html"",prediction_text=str(result))

if __name__ == '__main__':
    app.run(debug=True)"
Everyday life,Notifications Alert,"This Python project involves creating a desktop notification system using the win10toast library. The system displays notifications to the user on a Windows 10 machine. The notifications can be used for reminders, alerts, or to convey information without disrupting the user's workflow.","1.Import Necessary Libraries
2.Create a Notification Function
3.Display the Notification
4.Check Notification Status",4,"# This function imports necessary libraries needed for the notification system
def import_libraries():
    from win10toast import ToastNotifier

# Call the function to import libraries
import_libraries()
","# This function imports necessary libraries needed for the notification system
def import_libraries():
    pass
# Call the function to import libraries
import_libraries()
","# This function sets up the toaster notification object
def setup_toaster():
    from win10toast import ToastNotifier
    toaster = ToastNotifier()
    return toaster

# Call the function to create the toaster object
toaster = setup_toaster()
","# This function sets up the toaster notification object
def setup_toaster():
    pass

# Call the function to create the toaster object
toaster = setup_toaster()
","# This function displays a notification with a specified title and message
def display_notification(toaster, title, message, duration=3, icon_path=None):
    toaster.show_toast(title, message, icon_path=icon_path, duration=duration, threaded=True)

# Sample data for the notification
title = ""Notification!""
message = ""Alert! Yes""

# Call the function to display the notification
display_notification(toaster, title, message)
","# This function displays a notification with a specified title and message
def display_notification(toaster, title, message, duration=3, icon_path=None):
    pass

# Sample data for the notification
title = ""Notification!""
message = ""Alert! Yes""

# Call the function to display the notification
display_notification(toaster, title, message)
","import time

# This function checks if any notification is currently active and waits until it is no longer active
def check_notification(toaster):
    while toaster.notification_active():
        time.sleep(0.1)

# Call the function to check the notification status
check_notification(toaster)
","import time

# This function checks if any notification is currently active and waits until it is no longer active
def check_notification(toaster):
    pass

# Call the function to check the notification status
check_notification(toaster)
",,,,,"from win10toast import ToastNotifier
import time

toaster = ToastNotifier()

# Show notification when needed
toaster.show_toast(""Notification!"", ""Alert! Yes"", threaded=True,
                   icon_path=None, duration=3) # duration is in seconds

# To check if we have any active notification
# we will use 'toaster.notification_active()'
while toaster.notification_active():
    time.sleep(0.1)"
Everyday life,Qr Code Generator,"This Python project involves creating a simple QR code generator that allows users to input a message, which is then converted into a QR code. The QR code is saved as an image file. The general structure of the project includes handling user input, generating the QR code, and saving it as an image.","
1. Collect User Input
2. Generate QR Code
3. Save QR Code as an Image
",3,"def collect_user_input():
    # This function collects user input to be encoded in a QR code
    user_input = input(""Write Your message: "")
    return user_input

# Function call to execute the step
message = collect_user_input()
","def collect_user_input():
    # This function collects user input to be encoded in a QR code
    pass
# Function call to execute the step
message = collect_user_input()
","import qrcode

def generate_qr_code(message):
    # This function generates a QR code from the provided message
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(message)
    qr.make(fit=True)
    img = qr.make_image(fill='black', back_color='white')
    return img

# Sample data to use in function call
sample_message = ""Hello, QR Code!""

# Function call to execute the step
qr_image = generate_qr_code(sample_message)
","import qrcode

def generate_qr_code(message):
    # This function generates a QR code from the provided message
    pass

# Sample data to use in function call
sample_message = ""Hello, QR Code!""

# Function call to execute the step
qr_image = generate_qr_code(sample_message)
","def save_qr_image(qr_image, file_name):
    # This function saves the QR code image to a file
    qr_image.save(file_name)

# Sample filename to use in function call
sample_filename = ""generated_qr_code.jpg""

# Function call to execute the step
save_qr_image(qr_image, sample_filename)
","def save_qr_image(qr_image, file_name):
    # This function saves the QR code image to a file
    pass

# Sample filename to use in function call
sample_filename = ""generated_qr_code.jpg""

# Function call to execute the step
save_qr_image(qr_image, sample_filename)
",,,,,,,"import qrcode

image = qrcode.make(input(""Write Your message: ""))
image.save(""subscribe.jpg"")"
Social Media,User Hash Generator,This Python project involves creating a simple hash generator that produces a pseudo-random hash string whenever the user presses the Enter key. The generator uses a combination of system time and random numbers to ensure each hash is unique. The project can be useful for generating unique identifiers in applications where simple security measures are adequate.,"
1. Define the Hash Generator
2. Main Execution Logic
",2,"from time import time
from random import randint

def user_hash_generator():
    # This function generates a pseudo-random hash string based on the timestamp and random factors.
    n = 1
    while True:
        timestamp = int(time() * 1000)
        hash_string = hex(hash((timestamp / (randint(1, 250) + n))
                          * (randint(1, 10) * 5 * n)))[2:14]
        n += 1
        yield hash_string

# Function call to execute the step
hash_gen = user_hash_generator()  # Creates an instance of the generator
print(next(hash_gen))  # Outputs the first generated hash
","from time import time
from random import randint

def user_hash_generator():
    # This function generates a pseudo-random hash string based on the timestamp and random factors.
    pass

# Function call to execute the step
hash_gen = user_hash_generator()  # Creates an instance of the generator
print(next(hash_gen))  # Outputs the first generated hash
","def run_hash_generator():
    # This function manages user input to control the hash generator: generate on Enter, exit otherwise.
    hasher = user_hash_generator()
    print('Generator will create a random hash when you press only Enter.\
        \nTo exit, press any other button then Enter.')
    while True:
        ch = input()
        if ch == '':
            print(next(hasher))
        else:
            print('Terminated')
            break

# Function call to execute the step
run_hash_generator()
","def run_hash_generator():
    # This function manages user input to control the hash generator: generate on Enter, exit otherwise.
    pass

# Function call to execute the step
run_hash_generator()
",,,,,,,,,"from time import time
from random import randint

def user_hash_generator():
    n = 1
    while True:
        timestamp = int(time()*1000)
        hash_string = hex(hash((timestamp/(randint(1, 250)+n))
                          * (randint(1, 10)*5*n)))[2:14]
        n += 1
        yield hash_string

if __name__ == '__main__':
    print('Generator will create a random hash when you press only Enter.\
        \nTo exit, press any other button then Enter.')
    
    hasher = user_hash_generator()
    while True:
        ch = input()
        if ch == '':
            print(next(hasher))
        else:
            print('Terminated')
            break"
Everyday life,Weather Updates,"The Weather Notification System is a Python-based project that fetches current weather data from a website and displays notifications on the user's desktop. This project is structured to collect data from ""weather.com"", parse the required weather details such as temperature and conditions, and then provide a notification to the user with these details for their city.","1: Fetch Weather Data from URL
2: Parse the HTML for Weather Details
3: Extract Weather Information
4: Display Notification
",4,"import requests

def fetch_data(url):
    # Fetches raw data from a specified URL
    response = requests.get(url)
    return response

# Example function call
url = 'https://weather.com/en-IN/weather/today/l/e1bbaf5ba44a74170e3bb9f892416301c36b3b17f37e1a666c6e1213de0f5668'
raw_data = fetch_data(url)
","import requests

def fetch_data(url):
    # Fetches raw data from a specified URL
    pass

# Example function call
url = 'https://weather.com/en-IN/weather/today/l/e1bbaf5ba44a74170e3bb9f892416301c36b3b17f37e1a666c6e1213de0f5668'
raw_data = fetch_data(url)
","from bs4 import BeautifulSoup

def parse_html(data):
    # Parses HTML to a BeautifulSoup object
    soup = BeautifulSoup(data.text, 'html.parser')
    return soup

# Example function call using the raw_data from Step 1
soup = parse_html(raw_data)
","from bs4 import BeautifulSoup

def parse_html(data):
    # Parses HTML to a BeautifulSoup object
    pass

# Example function call using the raw_data from Step 1
soup = parse_html(raw_data)
","def extract_weather_details(soup):
    # Extracts weather details from BeautifulSoup object
    temperature = soup.find(""span"", class_=""CurrentConditions--tempValue--1RYJJ"").text
    conditions = soup.find(""div"", class_=""CurrentConditions--phraseValue--17s79"").text
    city_name = soup.find(""h1"", class_=""CurrentConditions--location--2_osB"").text
    return temperature, conditions, city_name

# Example function call using the soup from Step 2
temperature, conditions, city_name = extract_weather_details(soup)
","def extract_weather_details(soup):
    # Extracts weather details from BeautifulSoup object
    pass

# Example function call using the soup from Step 2
temperature, conditions, city_name = extract_weather_details(soup)
","from plyer import notification

def show_notification(city, temperature, conditions):
    # Displays a notification with weather details
    weather_update = f""Current temperature is: {temperature}\nCurrent conditions: {conditions}""
    notification.notify(
        title=f""{city} Weather Update"",
        message=weather_update,
        timeout=5
    )

# Example function call using the extracted information from Step 3
show_notification(city_name, temperature, conditions)
","from plyer import notification

def show_notification(city, temperature, conditions):
    # Displays a notification with weather details
    pass

# Example function call using the extracted information from Step 3
show_notification(city_name, temperature, conditions)
",,,,,"import requests
from bs4 import BeautifulSoup
from plyer import notification
def get_data(url):
    data = requests.get(url)
    return data
raw_data = get_data('https://weather.com/en-IN/weather/today/l/e1bbaf5ba44a74170e3bb9f892416301c36b3b17f37e1a666c6e1213de0f5668')
bs = BeautifulSoup(raw_data.text, 'html.parser')
temperature = bs.find_all(""span"",  class_ = ""CurrentConditions--tempValue--1RYJJ"")
conditions = bs.find_all(""div"", class_ = ""CurrentConditions--phraseValue--17s79"")
city_name = bs.find_all(""h1"", class_ = ""CurrentConditions--location--2_osB"")
for i,j,k in zip(temperature,conditions,city_name):
    temp = str(i.text)
    condi = str(j.text)
    city = str(k.text)
weather_update = ""Current temperature is: "" + temp + ""\nCurrent conditions: "" + condi
city.replace(' ',',')
city = city.split(',')
notification.notify(
        title = city[0] + "" weather update"",
        message = weather_update,
        timeout = 5,
        app_icon = None
    )"
Basics,Custom Clock,This project involves creating a Python script that allows users to enter a time zone and then displays the current date and time for that time zone. It handles cases where the user might enter an invalid time zone by using exception handling.,"1: Import required libraries
2: Get user input for time zone
3: Define function to retrieve current time
4: Handle exceptions for unknown time zones
",4,"# This step imports necessary libraries for handling time zones and datetime operations.

import pytz
from datetime import datetime
","# This step imports necessary libraries for handling time zones and datetime operations.

","# This function prompts the user to enter a time zone and returns it.

def get_user_time_zone():
    # Prompt user to input a time zone
    return input('Enter your time zone: ')

# Example of calling the function
user_time_zone = get_user_time_zone()
","# This function prompts the user to enter a time zone and returns it.

def get_user_time_zone():
    # Prompt user to input a time zone
    pass

# Example of calling the function
user_time_zone = get_user_time_zone()
","# This function takes a time zone name and prints the current time in that time zone.

def get_current_time(time_zone_name):
    """"""
    Fetches and prints the current time in the specified time zone.
    """"""
    # Convert string to time zone object
    time_zone = pytz.timezone(time_zone_name)
    
    # Get current time in the specified time zone
    current_time = datetime.now(time_zone)
    
    # Print the current time in a formatted string
    print(f""Current time in {time_zone_name}: {current_time.strftime('%Y:%m:%d %H:%M:%S %Z')}"")

# Sample dataset: a valid time zone string
sample_time_zone = 'Asia/Kolkata'

# Function call with sample data
get_current_time(sample_time_zone)
","# This function takes a time zone name and prints the current time in that time zone.

def get_current_time(time_zone_name):
    """"""
    Fetches and prints the current time in the specified time zone.
    """"""
    pass

# Sample dataset: a valid time zone string
sample_time_zone = 'Asia/Kolkata'

# Function call with sample data
get_current_time(sample_time_zone)
","# This function attempts to get current time and handles the case where the time zone is unknown.

def safe_get_current_time(time_zone_name):
    """"""
    Tries to fetch current time for a given time zone, handles UnknownTimeZoneError.
    """"""
    try:
        # Attempt to get current time for the specified time zone
        get_current_time(time_zone_name)
    except pytz.UnknownTimeZoneError:
        # Handle case where time zone is unknown
        print('Unknown time zone error. Please try again with a correct time zone.')

# Sample dataset: an invalid time zone string
invalid_time_zone = 'Mars/Phobos'

# Function call with sample data
safe_get_current_time(invalid_time_zone)
","# This function attempts to get current time and handles the case where the time zone is unknown.

def safe_get_current_time(time_zone_name):
    """"""
    Tries to fetch current time for a given time zone, handles UnknownTimeZoneError.
    """"""
    pass
# Sample dataset: an invalid time zone string
invalid_time_zone = 'Mars/Phobos'

# Function call with sample data
safe_get_current_time(invalid_time_zone)
",,,,,"from datetime import datetime
import pytz
from pytz import UnknownTimeZoneError

# Get time zone name from user
user_entered_time_zone = input('Enter your time zone: ')


def get_current_time(time_zone_name):
    # It will get the time zone of the user location
    time_zone_name = pytz.timezone(time_zone_name)

    # Print the date and time in specified format
    current_time = datetime.now(time_zone_name)
    print(f""Current time in this timezone: {current_time.strftime('%Y:%m:%d %H:%M:%S %Z')}"")


try:
    get_current_time(user_entered_time_zone)
except UnknownTimeZoneError:
    print('UnknownTimeZoneError... \nPlease try again with correct time zone.')"
Image,Image to ASCII,This Python project involves converting an image into ASCII art using the pywhatkit library. ASCII art is a graphic design technique that creates pictures on a computer screen and paper by arranging characters from the ASCII standard. This project will take an image file as input and output a text file where the image is represented by ASCII characters.,1. Load the Image 2. Convert Image to ASCII 3.Save ASCII Art to File,3,"from PIL import Image

def load_image(image_path):
    """"""Load an image from the specified file path.""""""
    return Image.open(image_path)

# Function call to load the image
image = load_image('path_to_your_image.jpg')
","from PIL import Image

def load_image(image_path):
    """"""Load an image from the specified file path.""""""
    pass

# Function call to load the image
image = load_image('path_to_your_image.jpg')
","import pywhatkit as pwt

def convert_image_to_ascii(image, output_file):
    """"""Convert the given image to ASCII art and save it to a text file.""""""
    pwt.image_to_ascii_art(image, output_file)

# Function call to convert the image to ASCII and save it
convert_image_to_ascii('path_to_your_image.jpg', 'output_ascii_art.txt')
","import pywhatkit as pwt

def convert_image_to_ascii(image, output_file):
    """"""Convert the given image to ASCII art and save it to a text file.""""""
    pass
# Function call to convert the image to ASCII and save it
convert_image_to_ascii('path_to_your_image.jpg', 'output_ascii_art.txt')
","def save_ascii_to_file(ascii_content, file_path):
    """"""Save ASCII art content to a file.""""""
    with open(file_path, 'w') as file:
        file.write(ascii_content)

# Sample ASCII art content (usually you would get this from the conversion function)
ascii_art = ""Example ASCII Art Content""

# Function call to save the ASCII art to a file
save_ascii_to_file(ascii_art, 'your_output_file.txt')
","def save_ascii_to_file(ascii_content, file_path):
    """"""Save ASCII art content to a file.""""""
    pass

# Sample ASCII art content (usually you would get this from the conversion function)
ascii_art = ""Example ASCII Art Content""

# Function call to save the ASCII art to a file
save_ascii_to_file(ascii_art, 'your_output_file.txt')
",,,,,,,"import pywhatkit
pywhatkit.image_to_ascii_art(
    'flo.jpg', 'flo.text')"
Advanced topic ,Password Validator,This Python coding project is about creating a password validator. The purpose of the password validator is to ensure that any password input by a user adheres to specific security criteria. This helps in enhancing security by preventing the use of weak passwords.,"1: Define the password validation rules
2: Get the password input from the user
3: Validate the password against the rules
4: Return the validation result
",4,"def display_password_rules():
    # Display the rules for a valid password
    print('\nYour password should: ')
    print('\t- Have a minimum length of 6;')
    print('\t- Have a maximum length of 12;')
    print('\t- Contain at least an uppercase letter or a lowercase letter')
    print('\t- Contain at least a number;')
    print('\t- Contain at least a special character (such as @,+,£,$,%,*^,etc);')
    print('\t- Not contain space(s).')

# Call the function to display the rules
display_password_rules()
","def display_password_rules():
    # Display the rules for a valid password
    pass

# Call the function to display the rules
display_password_rules()
","def get_user_password():
    # Prompt the user to enter a password and strip any leading/trailing spaces
    return input('\nEnter a valid password: ').strip()

# Call the function and store the password
user_password = get_user_password()
","def get_user_password():
    # Prompt the user to enter a password and strip any leading/trailing spaces
    pass

# Call the function and store the password
user_password = get_user_password()
","import string

def validate_password(password):
    # Validate the password against specified rules
    if not (6 <= len(password) <= 12):
        return 'Invalid Password: Ensure length is between 6 and 12 characters.'
    if ' ' in password:
        return 'Invalid Password: Should not contain spaces.'
    if not any(char in string.ascii_letters for char in password):
        return 'Invalid Password: Must contain at least one letter.'
    if not any(char in string.digits for char in password):
        return 'Invalid Password: Must contain at least one digit.'
    if not any(char in string.punctuation for char in password):
        return 'Invalid Password: Must contain at least one special character.'
    return 'Valid Password!'

# Call the function with the sample password
validation_result = validate_password(user_password)
print(validation_result)
","import string

def validate_password(password):
    # Validate the password against specified rules
    pass

# Call the function with the sample password
validation_result = validate_password(user_password)
print(validation_result)
","def print_validation_result(result):
    # Print the result of the password validation
    print(result)

# Assuming the result is obtained from the validate_password function
# Call the function to print the result
print_validation_result(validation_result)
","def print_validation_result(result):
    # Print the result of the password    
    pass# Assuming the result is obtained from the validate_password function
# Call the function to print the result
print_validation_result(validation_result)
",,,,,"import string

def passwordValidator():
    """"""
    Validates passwords to match specific rules
    : return: str
    """"""
    # display rules that a password must conform to
    print('\nYour password should: ')
    print('\t- Have a minimum length of 6;')
    print('\t- Have a maximum length of 12;')
    print('\t- Contain at least an uppercase letter or a lowercase letter')
    print('\t- Contain at least a number;')
    print('\t- Contain at least a special character (such as @,+,£,$,%,*^,etc);')
    print('\t- Not contain space(s).')
   # get user's password
    userPassword = input('\nEnter a valid password: ').strip()
   # check if user's password conforms 
   # to the rules above
    if not(6 <= len(userPassword) <= 12):
        message = 'Invalid Password..your password should have a minimum '
        message += 'length of 6 and a maximum length of 12'
        return message
    if ' ' in userPassword:
       message = 'Invalid Password..your password shouldn\'t contain space(s)'
       return message
    if not any(i in string.ascii_letters for i in userPassword):
       message = 'Invalid Password..your password should contain at least '
       message += 'an uppercase letter and a lowercase letter'
       return message
    if not any(i in string.digits for i in userPassword):
        message = 'Invalid Password..your password should contain at least a number'
        return message
    if not any(i in string.punctuation for i in userPassword): 
       message = 'Invalid Password..your password should contain at least a special character'
       return message
    else:
       return 'Valid Password!'

my_password = passwordValidator()
print(my_password)"
Basics,Number Guessing Game,"This project is a simple Python program where the user tries to guess a random number generated by the computer within a specified range. The program will prompt the user to input a lower and an upper limit for the number range. It will then generate a random number within this range and prompt the user to guess the number, providing hints to ""go higher"" or ""go lower"" based on the user's input until the correct number is guessed.","1: Generate a random number within a user-defined range.
2: Implement the game loop where the user makes guesses.
3: Provide feedback to the user based on the guess.
4: End the game when the user guesses correctly.
",4,"import random

def generate_random_number(lb, ub):
    # This function generates a random number between lb and ub.
    return random.randint(lb, ub)

# Example function call
lb = 1  # lower bound
ub = 100  # upper bound
random_number = generate_random_number(lb, ub)
print(""Random number generated:"", random_number)
","import random

def generate_random_number(lb, ub):
    # This function generates a random number between lb and ub.
    pass

# Example function call
lb = 1  # lower bound
ub = 100  # upper bound
random_number = generate_random_number(lb, ub)
print(""Random number generated:"", random_number)
","def start_game_loop(random_number):
    # This function continues to ask the user for guesses until the correct number is guessed.
    while True:
        guess = int(input(""Enter your guess>>""))
        if guess != random_number:
            continue
        break
    print(""You guessed the number!"")

# Sample random number for demonstration
random_number = 42
# Uncomment the line below to run the function in an actual game scenario.
# start_game_loop(random_number)
","def start_game_loop(random_number):
    # This function continues to ask the user for guesses until the correct number is guessed.
    pass
# Sample random number for demonstration
random_number = 42
# Uncomment the line below to run the function in an actual game scenario.
# start_game_loop(random_number)
","def provide_feedback(guess, random_number):
    # This function provides feedback to guide the user's next guess.
    if guess < random_number:
        return ""go higher""
    elif guess > random_number:
        return ""go lower""
    else:
        return ""Congrats! You guessed the number.""

# Sample dataset
guess = 50
random_number = 42
feedback = provide_feedback(guess, random_number)
print(feedback)
","def provide_feedback(guess, random_number):
    # This function provides feedback to guide the user's next guess.
    pass
# Sample dataset
guess = 50
random_number = 42
feedback = provide_feedback(guess, random_number)
print(feedback)
","def end_game(guess, random_number):
    # This function checks if the user's guess is correct and ends the game.
    if guess == random_number:
        print(""Congrats! You guessed the number."")
        return True
    return False

# Sample dataset
guess = 42
random_number = 42
game_over = end_game(guess, random_number)
print(""Game Over:"", game_over)
","def end_game(guess, random_number):
    # This function checks if the user's guess is correct and ends the game.
    pass

# Sample dataset
guess = 42
random_number = 42
game_over = end_game(guess, random_number)
print(""Game Over:"", game_over)
",,,,,"import random

try:
    lb = int(input(""Enter the lower limit>>""))
    ub = int(input(""Enter the upper limit>>""))
    number = random.randint(lb, ub+1)
    while True:
        guess = int(input(""Enter your guess>>""))
        if guess<number:
            print(""go higher"")
        elif guess>number:
            print(""go lower"")
        elif guess==number:
            break

    print(""Congrats! You guessed the number."")
except:
    pass"
Internet Connection,Web Dev with python Flask,"This Python project is about developing a simple web application using Flask that serves static HTML pages and collects form data submitted by users. The collected data is then stored in a CSV file, providing a basic implementation of data persistence.","1: Set up the Flask application
2: Serve HTML pages
3: Collect form data
4: Save data to CSV
",4,"from flask import Flask

def setup_app():
    # This function initializes and configures the Flask app
    app = Flask(__name__)
    return app

app = setup_app()
","from flask import Flask

def setup_app():
    # This function initializes and configures the Flask app
    pass
app = setup_app()
","@app.route('/')
def hello_world():
    # This function returns the main page of the web app
    return render_template('index.html')

@app.route('/<string:page_name>')
def html_page(page_name):
    # This function serves HTML pages based on the page name provided
    return render_template(page_name)
","@app.route('/')
def hello_world():
    # This function returns the main page of the web app
    pass

@app.route('/<string:page_name>')
def html_page(page_name):
    # This function serves HTML pages based on the page name provided
    pass
","from flask import request

@app.route('/submit_form', methods=['POST', 'GET'])
def submit_form():
    # This function collects data submitted through form and redirects or handles errors
    if request.method == 'POST':
        data = request.form.to_dict()
        return data
    else:
        return 'Something went wrong'
","from flask import request

@app.route('/submit_form', methods=['POST', 'GET'])
def submit_form():
    # This function collects data submitted through form and redirects or handles     pass
","import csv

def write_to_csv(data):
    # This function writes form data to a CSV file
    with open('./Portfo/database.csv', mode='a', newline='') as database2:
        csv_writer = csv.writer(database2, delimiter=',', quotechar='""', quoting=csv.QUOTE_MINIMAL)
        csv_writer.writerow([data[""name""], data[""email""], data[""message""]])

# Example data for demonstration
sample_data = {""name"": ""Alice"", ""email"": ""alice@example.com"", ""message"": ""Hello World""}
write_to_csv(sample_data)
","import csv

def write_to_csv(data):
    # This function writes form data to a CSV file
    pass
# Example data for demonstration
sample_data = {""name"": ""Alice"", ""email"": ""alice@example.com"", ""message"": ""Hello World""}
write_to_csv(sample_data)
",,,,,"# @author deepak sai pendyala
import csv
from flask import Flask,render_template,url_for,redirect,request
app = Flask(__name__)

@app.route('/')
def hello_world():
    return render_template('index.html')

@app.route('/<string:page_name>')
def html_page(page_name):
    return render_template(page_name)

def write_to_database(data):
    with open('./Portfo/database.txt',mode='a')as database:
        name=data[""name""]
        email=data[""email""]
        message=data['message']
        file=database.write(f'\n {name},{email},{message}')

def write_to_csv(data):
    with open('./Portfo/database.csv',mode='a',newline='')as database2:
        name=data[""name""]
        email=data[""email""]
        message=data['message']
        csv_witer=csv.writer(database2,delimiter=',',quotechar='""',quoting=csv.QUOTE_MINIMAL)
        csv_witer.writerow([name,email,message])


@app.route('/submit_form',methods=['POST','GET'])
def Sumbit_form():
    if request.method=='POST':
        try:
            data=request.form.to_dict()
            write_to_csv(data)
            return redirect('/thankyou.html')
        except:
            return 'didnt save to database'
    else:
        return 'woops,Something went wrong'


# set FLASK_APP=server.py
# $env:FLASK_APP = ""server.py""
#python -m flask run 

#$env:FLASK_ENV = ""development""
#python -m flask run "
Advanced topic ,password breach checker,"This Python project is a security tool that checks if a password has been compromised by comparing it against a database of known breached passwords using the ""Have I Been Pwned"" API. The tool hashes passwords locally and then queries the API with the hash prefix to safely check the password without revealing it. ","1. Hash the password
2. Send API request
3. Parse API response
4. Display results
",4,"import hashlib

def hash_password(password):
    # This function hashes the password using SHA-1 and returns the first 5 and the rest of the hash
    sha1password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    return sha1password[:5], sha1password[5:]

# Example usage
f5char, l5char = hash_password('examplepassword123')
print(f'First 5 chars: {f5char}, Rest of hash: {l5char}')
","import hashlib

def hash_password(password):
    # This function hashes the password using SHA-1 and returns the first 5 and the rest of the hash
    pass
# Example usage
f5char, l5char = hash_password('examplepassword123')
print(f'First 5 chars: {f5char}, Rest of hash: {l5char}')
","import requests

def request_api_data(qchar):
    # This function sends a request to the API with the first 5 characters of the hash
    url = 'https://api.pwnedpasswords.com/range/' + qchar
    res = requests.get(url)
    if res.status_code != 200:
        raise RuntimeError(f'Error fetching: {res.status_code}, check the API and try again')
    return res.text

# Example usage
api_response = request_api_data(f5char)
print(api_response[:50])  # Print the first 50 characters of the response for brevity
","import requests

def request_api_data(qchar):
    # This function sends a request to the API with the first 5 characters of the hash
    pass

# Example usage
api_response = request_api_data(f5char)
print(api_response[:50])  # Print the first 50 characters of the response for brevity
","def get_password_leaks_count(hashes, h_to_check):
    # This function parses the API response and checks if the rest of our hash is in the response
    hashes = (line.split(':') for line in hashes.splitlines())
    for h, count in hashes:
        if h == h_to_check:
            return count
    return 0

# Example usage
leak_count = get_password_leaks_count(api_response, l5char)
print(f'Leak count: {leak_count}')
","def get_password_leaks_count(hashes, h_to_check):
    # This function parses the API response and checks if the rest of our hash is in the response
    pass

# Example usage
leak_count = get_password_leaks_count(api_response, l5char)
print(f'Leak count: {leak_count}')
","def display_results(password, count):
    # This function displays the results of the leak check
    if count:
        print(f'{password} was found {count} times... it is high time to change your password!')
    else:
        print(f'{password} was NOT found. It seems Good to Go!')

# Example usage
display_results('examplepassword123', leak_count)
","def display_results(password, count):
    # This function displays the results of the leak check
    pass
# Example usage
display_results('examplepassword123', leak_count)
",,,,,"import requests
import hashlib
import sys

def request_api_data(qchar):
  url = 'https://api.pwnedpasswords.com/range/' + qchar
  res = requests.get(url)
  if res.status_code != 200:
    raise RuntimeError(f' Error fetching : {res.status_code},check the api and try again')
  return res

def get_password_leaks_count(hashes,h_to_check):
  hashes= (line.split(':')for line in hashes.text.splitlines())
  for h,count in hashes:
    if h == h_to_check:
      return count
  return 0

def hashing(password):
  sha1password = hashlib.sha1(password.encode('utf=8')).hexdigest().upper()
  f5char,l5char = sha1password[:5], sha1password[5:]
  response= request_api_data(f5char)
  return get_password_leaks_count(response,l5char)

def main(args):
  for password in args:
    count=hashing(password)
    if count:
      print(f'{password} was found {count} times... its high on time to change the password {password} to better secured !')
    else:
       print(f'{password} was NOT found. It seems Good to Go!')
  return 'done!'

if __name__=='__main__':
    sys.exit(main(sys.argv[1:]))

"
Audio,Audio Book,"This Python project is designed to create a text-to-speech application for PDF files. It utilizes PyPDF2 to read and extract text from PDF documents, and pyttsx3, a text-to-speech conversion library in Python, to audibly read the text. The application also integrates a simple GUI interface using Tkinter for file selection. This tool can be particularly useful for those needing auditory learning methods or for accessibility purposes. The general structure of the project involves these steps:","1. Open PDF file
2. Extract text from PDF
3. Convert text to speech
",3,"from tkinter.filedialog import askopenfilename

def open_pdf_file():
    # This function opens a file dialog to select a PDF file and returns the file path
    return askopenfilename(filetypes=[(""PDF files"", ""*.pdf"")])

# Example usage
pdf_file_path = open_pdf_file()
print(f'Selected file: {pdf_file_path}')
","from tkinter.filedialog import askopenfilename

def open_pdf_file():
    # This function opens a file dialog to select a PDF file and returns the file path
    pass
# Example usage
pdf_file_path = open_pdf_file()
print(f'Selected file: {pdf_file_path}')
","import PyPDF2

def extract_text_from_pdf(file_path):
    # This function reads a PDF file and extracts all text from each page
    pdfReader = PyPDF2.PdfFileReader(file_path)
    all_text = """"
    for page_num in range(pdfReader.numPages):
        page = pdfReader.getPage(page_num)
        all_text += page.extractText()
    return all_text

# Example usage, using the file path from Step 1
pdf_text = extract_text_from_pdf(pdf_file_path)
print(pdf_text[:500])  # Print first 500 characters of the text for brevity
","import PyPDF2

def extract_text_from_pdf(file_path):
    # This function reads a PDF file and extracts all text from each page
    pass

# Example usage, using the file path from Step 1
pdf_text = extract_text_from_pdf(pdf_file_path)
print(pdf_text[:500])  # Print first 500 characters of the text for brevity
","import pyttsx3

def convert_text_to_speech(text):
    # This function uses pyttsx3 to convert text to speech
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

# Example usage, using the extracted text from Step 2
convert_text_to_speech(pdf_text[:500])  # Convert only the first 500 characters to speech for the demo
","import pyttsx3

def convert_text_to_speech(text):
    # This function uses pyttsx3 to convert text to speech
    pass

# Example usage, using the extracted text from Step 2
convert_text_to_speech(pdf_text[:500])  # Convert only the first 500 characters to speech for the demo
",,,,,,,"import PyPDF2
import pyttsx3
from tkinter.filedialog import *

book = askopenfilename()
pdfReader = PyPDF2.PdfFileReader(book)

pages = pdfReader.numPages

for num in range(0, pages):
    page = pdfReader.getPage(num)
    text = page.extractText()
    speak = pyttsx3.init()
    speak.say(text)
    speak.runAndWait()"
Basics,Geocoding Google API,"This Python project is a geocoding utility that converts addresses into geographic coordinates using the Google Maps Geocoding API. The utility reads addresses from an Excel file, sends requests to the Google Maps API, and writes the returned latitude and longitude back into a new Excel file. This tool is useful for applications needing to process physical addresses for mapping or spatial analysis. ","1. Load addresses from Excel
2. Format addresses
3. Retrieve coordinates
4. Write results to Excel
",4,"import pandas as pd
import openpyxl

def load_addresses(workbook_name, sheet_name, column_name):
    # This function loads addresses from a specified Excel sheet and column
    wb = openpyxl.load_workbook(workbook_name)
    ws = wb[sheet_name]
    excel_data_df = pd.read_excel(workbook_name, sheet_name=sheet_name)
    return excel_data_df[column_name].tolist()

# Example usage
addresses = load_addresses('YOURWORKBOOKNAMEHERE.xlsx', 'YOURSHEETNAMEHERE', 'address')
print(addresses[:5])  # Print first 5 addresses for brevity
","import pandas as pd
import openpyxl

def load_addresses(workbook_name, sheet_name, column_name):
    # This function loads addresses from a specified Excel sheet and column
    pass

# Example usage
addresses = load_addresses('YOURWORKBOOKNAMEHERE.xlsx', 'YOURSHEETNAMEHERE', 'address')
print(addresses[:5])  # Print first 5 addresses for brevity
","def format_addresses(address_list):
    # This function formats addresses to be URL-friendly
    return [address.replace("" "", ""+"") for address in address_list]

# Example usage
formatted_addresses = format_addresses(addresses)
print(formatted_addresses[:5])  # Print first 5 formatted addresses for brevity
","def format_addresses(address_list):
    # This function formats addresses to be URL-friendly
    pass
# Example usage
formatted_addresses = format_addresses(addresses)
print(formatted_addresses[:5])  # Print first 5 formatted addresses for brevity
","import requests

def get_lat_and_long(address, maps_url, api_key):
    # This function retrieves latitude and longitude from the Google Maps API for a given address
    url = f""{maps_url}{address}&key={api_key}""
    response = requests.get(url)
    data = response.json()['results'][0]['geometry']['location']
    return data['lat'], data['lng']

# Example usage, assuming first address is correctly formatted
latitude, longitude = get_lat_and_long(formatted_addresses[0], 'https://maps.googleapis.com/maps/api/geocode/json?address=', 'YOURAPI_KEYHERE')
print(f'Latitude: {latitude}, Longitude: {longitude}')
","import requests

def get_lat_and_long(address, maps_url, api_key):
    # This function retrieves latitude and longitude from the Google Maps API for a given address
    pass

# Example usage, assuming first address is correctly formatted
latitude, longitude = get_lat_and_long(formatted_addresses[0], 'https://maps.googleapis.com/maps/api/geocode/json?address=', 'YOURAPI_KEYHERE')
print(f'Latitude: {latitude}, Longitude: {longitude}')
","import xlsxwriter

def write_results_to_excel(data, output_filename):
    # This function writes latitude and longitude data to a new Excel file
    workbook = xlsxwriter.Workbook(output_filename)
    worksheet = workbook.add_worksheet()
    row_num = 1
    for lat, lng in data:
        worksheet.write(row_num, 10, lat)  # Assuming 10 is the column index for latitude
        worksheet.write(row_num, 11, lng)  # Assuming 11 is the column index for longitude
        row_num += 1
    workbook.close()

# Example usage, assuming we have some coordinates data
coordinates_data = [(latitude, longitude)]
write_results_to_excel(coordinates_data, 'output.xlsx')
","import xlsxwriter

def write_results_to_excel(data, output_filename):
    # This function writes latitude and longitude data to a new Excel file
    pass

# Example usage, assuming we have some coordinates data
coordinates_data = [(latitude, longitude)]
write_results_to_excel(coordinates_data, 'output.xlsx')
",,,,,"import pandas as pd
import requests
import openpyxl
from requests.models import HTTPError
import xlsxwriter
'''
HOW TO USE:
1. Simply just grab an api key from the google maps api/geocode.
2. Create an excel workbook with a name of your choosing.
3. Create a sheet name in this excel workbook with a name of your choosing.
4a. Create a column labeled address where your addresses will be listed
4b. If you want to label your column something else, you can do so, but make sure to change it in the geo.py file
5. The program will then grab each address and convert it to fit the url format and then fetch the corresponding latitude 
& longitutde to be returned
6. It will be then outputed to a new excel file called output and saved.

'''
'''
if there is an error in retrieving the lat or long, the program
will instead put a 0,0. this is because the program doesn't account for errors on the request 
of which it responds with a 200 success, but results in an index out of bounds error 
because the return specifies the api key is wrong yet it is right.
for the few entries this problem occurs it can be done manually or programmed further to account for


'''
my_new_data = []

workbook = xlsxwriter.Workbook('output.xlsx')
worksheet = workbook.add_worksheet()

# editable
COLUMN_IDX_START = 10  # -> corresponds to the latitude column
COLUMN_IDX_START_2 = 11  # -> corresponds to the longitude column
WORKBOOK_NAME = 'YOURWORKBOOKNAMEHERE.xlsx'
SHEET_NAME = 'YOURSHEETNAMEHERE'
COLUMN_NAME = 'address'
MAPS_URL = 'https://maps.googleapis.com/maps/api/geocode/json?address='
GOOGLE_API_KEY = 'YOURAPI_KEY HERE'
API_KEY = '&key=' + GOOGLE_API_KEY


def getGeoCodeFromAddress():
    wb = openpyxl.load_workbook(WORKBOOK_NAME)
    ws = wb[SHEET_NAME]
    excel_data_df = pd.read_excel(WORKBOOK_NAME, sheet_name=SHEET_NAME)
    list_data = excel_data_df[COLUMN_NAME].tolist()
    for address in list_data:
        sanitized_add = address.replace("" "", ""+"")
        my_new_data.append(sanitized_add)
    for row_num, data in enumerate(my_new_data, start=1):
        try:
            lat, long = getLatAndLong(data)
        except:
            lat, long = 0, 0
        worksheet.write(row_num, COLUMN_IDX_START, lat)
        worksheet.write(row_num, COLUMN_IDX_START_2, long)
    workbook.close()


def getLatAndLong(url):
    url = MAPS_URL + url + API_KEY
    try:
        response = requests.get(url)
    except HTTPError as http_err:
        print(f'HTTP error occurred: {http_err}')  # Python 3.6
    except Exception as err:
        print(f'Other error occurred: {err}')  # Python 3.6
    else:
        print('Success!')

    json_response = response.json()
    data = json_response['results'][0]['geometry']['location']
    latitude = data['lat']
    longitutde = data['lng']
    # print(str(latitude) + 'lat')
    # print(str(longitutde) + 'long')
    return latitude, longitutde


getGeoCodeFromAddress()"
Basics,Extracting and parsing newspaper articles,,"This Python project utilizes the Newspaper3k library to automate the extraction and analysis of news articles. It's particularly useful for gathering data from various news sources for natural language processing tasks. The utility fetches articles from specified URLs, downloads their content, parses them for textual data, and then applies NLP to extract summaries and keywords. This can help in content analysis, media monitoring, or sentiment analysis projects.","1. Initialize article instance
2. Download and parse article
3. Apply NLP
4. Display extracted information
",4,4,"from newspaper import Article

def initialize_article(url, language='en'):
    # This function initializes an Article object from a URL with the specified language
    return Article(url, language=language)

# Example usage
article = initialize_article(""http://timesofindia.indiatimes.com/world/china/chinese-expert-warns-of-troops-entering-kashmir/articleshow/59516912.cms"")
","from newspaper import Article

def initialize_article(url, language='en'):
    # This function initializes an Article object from a URL with the specified language
    pass
# Example usage
article = initialize_article(""http://timesofindia.indiatimes.com/world/china/chinese-expert-warns-of-troops-entering-kashmir/articleshow/59516912.cms"")
","def download_and_parse_article(article):
    # This function downloads and parses the article content
    article.download()
    article.parse()

# Example usage
download_and_parse_article(article)
","def download_and_parse_article(article):
    # This function downloads and parses the article content
    pass

# Example usage
download_and_parse_article(article)
","def apply_nlp_to_article(article):
    # This function applies NLP to extract features from the article
    article.nlp()

# Example usage
apply_nlp_to_article(article)
","def apply_nlp_to_article(article):
    # This function applies NLP to extract features from the article
    pass
# Example usage
apply_nlp_to_article(article)
","def display_article_info(article):
    # This function prints the article's title, text, summary, and keywords
    print(""Article's Title:"")
    print(article.title)
    print(""\nArticle's Text:"")
    print(article.text)
    print(""\nArticle's Summary:"")
    print(article.summary)
    print(""\nArticle's Keywords:"")
    print(article.keywords)

# Example usage
display_article_info(article)
","def display_article_info(article):
    # This function prints the article's title, text, summary, and keywords
    pass

# Example usage
display_article_info(article)
",,,"###############################################################################
""""""
@Newspaper3k usage
@Usage of functions in newspaper:
@Some Useful functions
================================
To create an instance of article 

article_name = Article(url, language=""language code according to newspaper"")

To download an article 
article_name.download()
To parse an article 

article_name.parse()
To apply nlp(natural language procesing) on article 

article_name.nlp()
To extract article’s text 

article_name.text
To extract article’s title 

article_name.title
To extract article’s summary 

article_name.summary
To extract article’s keywords 

article_name.keywords
""""""
####################################################################################

#Sample Usage Program
from newspaper import Article
 
#A new article from TOI
url = ""http:// timesofindia.indiatimes.com/world/china/chinese-expert-warns-of-troops-entering-kashmir/articleshow/59516912.cms""
 
#For different language newspaper refer above table
toi_article = Article(url, language=""en"") # en for English
 
#To download the article
toi_article.download()
 
#To parse the article
toi_article.parse()
 
#To perform natural language processing ie..nlp
toi_article.nlp()
 
#To extract title
print(""Article's Title:"")
print(toi_article.title)
print(""n"")
 
#To extract text
print(""Article's Text:"")
print(toi_article.text)
print(""n"")
 
#To extract summary
print(""Article's Summary:"")
print(toi_article.summary)
print(""n"")
 
#To extract keywords
print(""Article's Keywords:"")
print(toi_article.keywords)


#####################################################################################################################################################################################
""""""
Output:
=======
Article's Title:
India China News: Chinese expert warns of troops entering Kashmir


Article's Text:
BEIJING: A Chinese expert has argued that his country's troops would be entitled to enter the Indian side of Kashmir by extending the logic that has permitted Indian troops to enter an area which is disputed by China and Bhutan This is one of the several arguments made by the scholar in an attempt to blame India for. India has responded to efforts by China to build a road in the Doklam area, which falls next to the trijunction connecting Sikkim with Tibet and Bhutan and""Even if India were requested to defend Bhutan's territory, this could only be limited to its established territory, not the disputed area, "" Long Xingchun, director of the Center for Indian Studies at China West Normal University said in an article. ""Otherwise, under India's logic, if the Pakistani government requests, a third country's army can enter the area disputed by India and Pakistan, including India-controlled Kashmir"".China is not just interfering, it is building roads and other infrastructure projects right inside Pakistan-Occupied Kashmir (PoK), which is claimed by both India and Pakistan. This is one of the facts that the article did not mention.The scholar, through his article in the Beijing-based Global Times, suggested that Beijing can internationalize the Doklam controversy without worrying about western countries supporting India because the West has a lot of business to do with China.""China can show the region and the international community or even the UN Security Council its evidence to illustrate China's position, "" Long said. At the same time, he complained that ""Western governments and media kept silent, ignoring India's hegemony over the small countries of South Asia"" when India imposed a blockade on the flow of goods to Nepal in 2015.Recent actions by US president Donald Trump, which include selling arms to Taiwan and pressuring China on the North Korean issue, shows that the West is not necessarily cowered down by China's business capabilities.He reiterated the government's stated line that Doklam belongs to China, and that Indian troops had entered the area under the guise of helping Bhutan protect its territory.""For a long time, India has been talking about international equality and non-interference in the internal affairs of others, but it has pursued hegemonic diplomacy in South Asia, seriously violating the UN Charter and undermining the basic norms of international relations, "" he said.Interestingly, Chinese scholars are worrying about India interfering in Bhutan's ""sovereignty and national interests"" even though it is Chinese troops who have entered the Doklam area claimed by it.""Indians have migrated in large numbers to Nepal and Bhutan, interfering with Nepal's internal affairs. The first challenge for Nepal and Bhutan is to avoid becoming a state of India, like Sikkim, "" he said.


Article's Summary:
sending its troops to the disputed Doklam area +puts Indian territory at risk +BEIJING: A Chinese expert has argued that his country's troops would be entitled to enter the Indian side of Kashmir by extending the logic that has permitted Indian troops to enter an area which is disputed by China and Bhutan This is one of the several arguments made by the scholar in an attempt to blame India for.
""Otherwise, under India's logic, if the Pakistani government requests, a third country's army can enter the area disputed by India and Pakistan, including India-controlled Kashmir"".China is not just interfering, it is building roads and other infrastructure projects right inside Pakistan-Occupied Kashmir (PoK), which is claimed by both India and Pakistan.
""China can show the region and the international community or even the UN Security Council its evidence to illustrate China's position, "" Long said.
""Indians have migrated in large numbers to Nepal and Bhutan, interfering with Nepal's internal affairs.
The first challenge for Nepal and Bhutan is to avoid becoming a state of India, like Sikkim, "" he said.
""""""
####################################################################################################################################################################################"
Basics,Remove Duplicates in Folder,,"This Python project is designed to help manage file redundancy within a specified directory by identifying and deleting duplicate files based on their MD5 hash values. It utilizes the tkinter library for a graphical interface to select a directory, and the hashlib library to compute hash values for file content comparison. This can be particularly useful for cleaning up large directories, maintaining backups, or organizing collections of files like photos or documents. ","1. Initialize GUI and select directory
2. List files in directory
3. Compute file hashes and detect duplicates
4. Delete duplicates and log actions
",4,4,"from tkinter import Tk
from tkinter.filedialog import askdirectory

def select_directory():
    # This function initializes a GUI window and prompts the user to select a directory
    Tk().withdraw()  # to hide the small tk window
    path = askdirectory(title='Select Folder')  # shows dialog box and return the path
    return path

# Example usage
selected_path = select_directory()
print(f""Selected directory: {selected_path}"")
","from tkinter import Tk
from tkinter.filedialog import askdirectory

def select_directory():
    # This function initializes a GUI window and prompts the user to select a directory
    pass

# Example usage
selected_path = select_directory()
print(f""Selected directory: {selected_path}"")
","import os

def list_files_in_directory(path):
    # This function lists all files in the given directory
    return os.listdir(path)

# Example usage
files_list = list_files_in_directory(selected_path)
print(f""Files in directory: {files_list[:5]}"")  # Print first 5 files for brevity
","import os

def list_files_in_directory(path):
    # This function lists all files in the given directory
    pass
# Example usage
files_list = list_files_in_directory(selected_path)
print(f""Files in directory: {files_list[:5]}"")  # Print first 5 files for brevity
","import hashlib
from pathlib import Path

def detect_duplicates(files, directory):
    # This function computes MD5 hashes for files and identifies duplicates
    unique_hashes = {}
    duplicates = []
    for file in files:
        file_path = Path(os.path.join(directory, file))
        if file_path.is_file():
            file_hash = hashlib.md5(open(file_path, 'rb').read()).hexdigest()
            if file_hash in unique_hashes:
                duplicates.append(file_path)
            else:
                unique_hashes[file_hash] = file_path
    return unique_hashes, duplicates

# Example usage
unique_files, duplicate_files = detect_duplicates(files_list, selected_path)
print(f""Duplicate files: {duplicate_files}"")
","import hashlib
from pathlib import Path

def detect_duplicates(files, directory):
    # This function computes MD5 hashes for files and identifies duplicates
    pass

# Example usage
unique_files, duplicate_files = detect_duplicates(files_list, selected_path)
print(f""Duplicate files: {duplicate_files}"")
","def delete_duplicates(duplicate_files):
    # This function deletes files from the list of duplicates
    for file_path in duplicate_files:
        print(f""Deleting file: {file_path}"")
        os.remove(file_path)

# Example usage
delete_duplicates(duplicate_files)
","def delete_duplicates(duplicate_files):
    # This function deletes files from the list of duplicates
    pass
# Example usage
delete_duplicates(duplicate_files)
",,,"from tkinter import Tk
from tkinter.filedialog import askdirectory
import os, hashlib
from pathlib import Path


Tk().withdraw()  # to hide the small tk window
path = askdirectory(title='Select Folder')  # shows dialog box and return the path

files_list = os.listdir(path)  # take all the filename as a list

unique = dict()  # making a dictionary named unique

for file in os.listdir(path):   # looping over the file list

    file_name = Path(os.path.join(path, file))  # make a absolute file name using os.path.join function
    if file_name.is_file():  # checking the the the item is file or not

        fileHash = hashlib.md5(open(file_name, 'rb').read()).hexdigest()
        if fileHash not in unique:
            unique[fileHash] = file_name

        else:
             print(file_name)
             os.remove(file_name)
        print(f"" File will be deleted {file_name}"")
    else:
        print(""Path not exits"")"
Basics,Divide Image Into Equal Halves,,"This Python project leverages the OpenCV library to manipulate images, specifically by splitting an image into its left and right halves and then displaying and saving these halves as separate files. This application can be useful for tasks that require image preprocessing or segmentation, such as in computer vision projects or for creating datasets for machine learning.","1. Load image
2. Split image into halves
3. Display images
4. Save images
5. Wait for user input
",5,5,"import cv2

def load_image(image_path):
    # This function loads an image from a specified path
    image = cv2.imread(image_path)
    if image is not None:
        return image
    else:
        raise FileNotFoundError(f""No image found at {image_path}"")

# Example usage
img = load_image('imaag.jpg')
","import cv2

def load_image(image_path):
    # This function loads an image from a specified path
    pass
# Example usage
img = load_image('imaag.jpg')
","def split_image(image):
    # This function splits the image into left and right halves
    height, width, channels = image.shape
    left_half = image[:, :width//2]
    right_half = image[:, width//2:]
    return left_half, right_half

# Example usage
left, right = split_image(img)
","def split_image(image):
    # This function splits the image into left and right halves
    pass

# Example usage
left, right = split_image(img)
","def display_images(original, left, right):
    # This function displays the original, left half, and right half images in separate windows
    cv2.imshow('Original', original)
    cv2.imshow('Left Half', left)
    cv2.imshow('Right Half', right)

# Example usage
display_images(img, left, right)
","def display_images(original, left, right):
    # This function displays the original, left half, and right half images in separate windows
    pass
# Example usage
display_images(img, left, right)
","def save_images(left, right, left_path, right_path):
    # This function saves the left and right halves of the image to specified paths
    cv2.imwrite(left_path, left)
    cv2.imwrite(right_path, right)

# Example usage
save_images(left, right, 'Left.jpg', 'Right.jpg')
","def save_images(left, right, left_path, right_path):
    # This function saves the left and right halves of the image to specified paths
    pass

# Example usage
save_images(left, right, 'Left.jpg', 'Right.jpg')
","def wait_for_exit():
    # This function waits for a key press and then exits all windows
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Example usage
wait_for_exit()
","def wait_for_exit():
    # This function waits for a key press and then exits all windows
    pass

# Example usage
wait_for_exit()
","import cv2

img = cv2.imread('imaag.jpg')
height,width,channels= img.shape

left = img[:,:width//2]
right = img[:,width//2:]

cv2.imshow('original', img)
cv2.imshow('Left Half', left)
cv2.imshow('Right half', right)

cv2.imwrite('Left.jpg', left)
cv2.imwrite('Right.jpg', right)
cv2.waitKey(0)"
Advanced topic ,Watermarking images,"This Python project creates a tool to apply custom text watermarks to images, with the ability to handle both individual images and batches of images in a directory. It uses the OpenCV library for image processing and integrates command-line arguments to specify the image file or directory, watermark text, and the position of the watermark. This is particularly useful for photographers, content creators, and digital marketers who need to protect their visual content or brand it consistently. ","1. Parse command line arguments
2. Define watermark settings
3. Process image(s) with watermark
4. Save watermarked image(s)
",4,"import argparse

def parse_arguments():
    # This function sets up and parses the command line arguments
    parser = argparse.ArgumentParser(description=""Apply a watermark to an image or all images in a directory."")
    parser.add_argument('-f', '--file', required=False, help='Path to target file')
    parser.add_argument('-w', '--watermark', required=True, help='Text for the watermark')
    parser.add_argument('-d', '--directory', required=False, help='Process every image in the specified directory')
    parser.add_argument('-p', '--position', required=True, choices=['ul', 'ur', 'll', 'lr'], help='Watermark position: upper left, upper right, lower left, lower right')
    return parser.parse_args()

# Example usage
args = parse_arguments()
print(args)
","import argparse

def parse_arguments():
    # This function sets up and parses the command line arguments
    parser = argparse.ArgumentParser(description=""Apply a watermark to an image or all images in a directory."")
    pass

# Example usage
args = parse_arguments()
print(args)
","import cv2

def get_watermark_properties(image_shape, watermark_text):
    # This function determines the size and position of the watermark based on the image size
    height, width, _ = image_shape
    scale = 6 if height >= 4000 else 3
    avg_char_width = 120 if height >= 4000 else 80
    text_width = len(watermark_text) * avg_char_width
    positions = {
        'ul': (0, 150 if height >= 4000 else 100),
        'ur': (width - text_width, 150 if height >= 4000 else 100),
        'll': (0, height - 50),
        'lr': (width - text_width, height - 50)
    }
    return scale, positions

# No example usage here since it's directly related to image processing
","import cv2

def get_watermark_properties(image_shape, watermark_text):
    # This function determines the size and position of the watermark based on the image size
    pass

# No example usage here since it's directly related to image processing
","def process_image(image_path, watermark_text, position):
    # This function applies a watermark to an image
    image = cv2.imread(image_path)
    font_scale, positions = get_watermark_properties(image.shape, watermark_text)
    position_coords = positions[position]
    watermarked_image = cv2.putText(image, watermark_text, position_coords, font, font_scale, color, thickness, cv2.LINE_AA)
    return watermarked_image

# Example usage would require an actual image file path and the 'args' from step 1
","def process_image(image_path, watermark_text, position):
    # This function applies a watermark to an image
    pass

# Example usage would require an actual image file path and the 'args' from step 1
","import os

def save_image(image, save_path):
    # This function saves the watermarked image to the specified path
    cv2.imwrite(save_path, image)

def ensure_directory_exists(directory):
    # This function ensures the target directory exists, creating it if necessary
    if not os.path.exists(directory):
        os.makedirs(directory)

# Example usage involves both saving an image and ensuring the directory exists
","import os

def save_image(image, save_path):
    # This function saves the watermarked image to the specified path
    pass
",,,,,"import argparse
import cv2
import os

# Watermark Configuration
font = cv2.FONT_HERSHEY_COMPLEX
color = (255, 255, 255)
thickness = 4

# Setting up the argument parser for CMD Line interface
ap = argparse.ArgumentParser()
ap.add_argument('-f', '--file', required=False,
                help='Path to target file')
ap.add_argument('-w', '--watermark', required=True,
                help='Text you would like to watermark image with | (Enclose in quotes if there are spaces)')
ap.add_argument('-d', '--directory', required=False,
                help='Processes every image in the CWD')
ap.add_argument('-p', '--position', required=True,
                help='Options are ""ul""(upper left) ""ur""(upper right) ""ll""(lower left) ""lr""(lower right)')
args = ap.parse_args()
print(args)

def process_image(filename, watermark, pos):
    """"""
    :param filename: str
        the path of the photo, built from cwd
    :param watermark: str
        the text you want watermarked on the image
    :param pos: str
        the position of the watermark  ex. ""ll"" (lower left) | ""ur"" (upper right)
    :return: None
        a new folder name ""Watermarked"" will be made in CWD with finished images
    """"""

    working_image = cv2.imread(filename)
    text_length = len(watermark)
    if working_image.shape[0] >= 4000:
        avg_char = 120
        text_width = text_length * avg_char
        fontScale = 6
        image_ul = (0, 150)
        image_ur = (working_image.shape[1] - text_width, 150)
        image_ll = (0, working_image.shape[0] - 50)
        image_lr = (working_image.shape[1] - text_width, working_image.shape[0] - 50)
    else:
        avg_char = 80
        text_width = text_length * avg_char
        fontScale = 3
        image_ul = (0, 100)
        image_ur = (working_image.shape[1] - text_width, 100)
        image_ll = (0, working_image.shape[0] - 50)
        image_lr = (working_image.shape[1] - text_width, working_image.shape[0] - 50)

    if pos == 'ul':
        new_image = cv2.putText(working_image, args.watermark, image_ul, font, fontScale, color, thickness, cv2.LINE_AA)

    if pos == 'ur':
        new_image = cv2.putText(working_image, args.watermark, image_ur, font, fontScale, color, thickness, cv2.LINE_AA)

    if pos == 'll':
        new_image = cv2.putText(working_image, args.watermark, image_ll, font, fontScale, color, thickness, cv2.LINE_AA)

    if pos == 'lr':
        new_image = cv2.putText(working_image, args.watermark, image_lr, font, fontScale, color, thickness, cv2.LINE_AA)

    if not os.path.exists(os.getcwd() + '\\Watermarked'):
        os.mkdir(os.getcwd() + '\\Watermarked')

    path = os.getcwd() + '\\' + 'Watermarked' + '\\' + file
    cv2.imwrite(path, new_image)


# Call function on all files in CWD ending with .png or .jpg
for file in os.listdir(os.getcwd()):
    if file.endswith('.jpg') or file.endswith('.png'):
        process_image(os.getcwd() + '\\' + file, args.watermark, args.position)"
Advanced topic ,Creating a pomodoro app,"This Python project implements a simple Pomodoro timer application using the Tkinter library for GUI creation. The Pomodoro Technique is a time management method where work is divided into intervals, traditionally 25 minutes in length, separated by short breaks. This application allows users to start a Pomodoro timer, take regular breaks, and reset the timer as needed. It visually displays time countdowns and marks completion of each work session with a checkmark.","1. Initialize GUI and set up constants
2. Define timer functions
3. Set up UI layout
4. Run main application loop
",4,"from tkinter import *
import math

def setup_gui():
    # Sets up initial configuration and constants for the GUI
    window = Tk()
    window.title(""Pomodoro"")
    window.config(padx=100, pady=50, bg=""#f7f5dd"")
    return window

# Example usage
app_window = setup_gui()
","from tkinter import *
import math

def setup_gui():
    # Sets up initial configuration and constants for the GUI
    pass

# Example usage
app_window = setup_gui()
","def on_start():
    # Starts the Pomodoro timer sequence
    global reps
    reps += 1
    work_sec = WORK_MIN * 60
    short_break_sec = SHORT_BREAK_MIN * 60
    long_break_sec = LONG_BREAK_MIN * 60
    
    if reps % 8 == 0:
        countdown(long_break_sec)
    elif reps % 2 == 0:
        countdown(short_break_sec)
    else:
        countdown(work_sec)

def countdown(count):
    # Countdown mechanism to display the time left on the timer
    min = math.floor(count / 60)
    sec = count % 60
    if sec < 10:
        sec = f""0{sec}""
    # Update the countdown display
    canvas.itemconfig(countdown_text, text=f""{min}:{sec}"")
    if count > 0:
        global timer
        timer = app_window.after(1000, countdown, count - 1)
    else:
        on_start()

def on_reset():
    # Resets the timer to initial settings
    global reps, check, timer
    reps = 0
    check = """"
    app_window.after_cancel(timer)
    label.config(text=""TIMER"", fg=""#e7305b"")
    canvas.itemconfig(countdown_text, text=""00:00"")
    check_mark.config(text=check)
","def on_start():
    # Starts the Pomodoro timer sequence
    global reps
    pass

def countdown(count):
    # Countdown mechanism to display the time left on the timer
    pass

def on_reset():
    # Resets the timer to initial settings
    pass","def setup_ui(window):
    # Sets up UI elements like labels, buttons, and canvas
    label = Label(window, text=""Timer"", font=(""Courier"", 30, ""bold""), fg=""#9bdeac"", bg=""#f7f5dd"")
    label.grid(row=0, column=1)

    canvas = Canvas(window, width=200, height=224, bg=""#f7f5dd"", highlightthickness=0)
    tomato_img = PhotoImage(file=""tomato.png"")
    canvas.create_image(100, 112, image=tomato_img)
    countdown_text = canvas.create_text(100, 130, text=""00:00"", fill=""black"", font=(""Courier"", 22, ""bold""))
    canvas.grid(row=1, column=1)

    start_button = Button(window, text=""Start"", command=on_start)
    start_button.grid(row=2, column=0)

    reset_button = Button(window, text=""Reset"", command=on_reset)
    reset_button.grid(row=2, column=2)

    check_mark = Label(window, text="""", font=(""Courier"", 15, ""bold""), fg=""#9bdeac"", bg=""#f7f5dd"")
    check_mark.grid(row=2, column=1)
    return label, canvas, countdown_text, check_mark

# Example usage
label, canvas, countdown_text, check_mark = setup_ui(app_window)
","def setup_ui(window):
    # Sets up UI elements like labels, buttons, and canvas
    pass

# Example usage
label, canvas, countdown_text, check_mark = setup_ui(app_window)
","def run_app(window):
    # Runs the main loop of the application
    window.mainloop()

# Example usage
run_app(app_window)
","def run_app(window):
    # Runs the main loop of the application
    pass
# Example usage
run_app(app_window)
",,,,,"from tkinter import *
import math

# ---------------------------- CONSTANTS ------------------------------- #
PINK = ""#e2979c""
RED = ""#e7305b""
GREEN = ""#9bdeac""
YELLOW = ""#f7f5dd""
FONT_NAME = ""Courier""

# set work time in min
WORK_MIN = 25

# set break time in min
SHORT_BREAK_MIN = 10

# set long break time in min
LONG_BREAK_MIN = 20
reps = 0
check = """"
timer = None
# ---------------------------- TIMER RESET ------------------------------- # 

def on_reset(count=""00:00""):
    global reps, check
    reps = 0
    check = """"

    window.after_cancel(timer)
    label.config(text=""TIMER"",fg=RED)
    canvas.itemconfig(countdown_text, text=""00:00"")
    check_mark.config(text=check)
    

# ---------------------------- TIMER MECHANISM ------------------------------- # 

def on_start():
    global reps

    reps += 1

    work_min = WORK_MIN * 60
    short_break_min = SHORT_BREAK_MIN * 60
    long_break_min = LONG_BREAK_MIN * 60

    if reps == 9:
       label.config(text=""WELL DONE"",fg=RED)
    elif reps % 8 == 0:  
        label.config(text=""BREAK"", fg=RED)
        countdown(long_break_min)
    elif reps % 2 == 0:   
        label.config(text=""BREAK"", fg=PINK)
        countdown(short_break_min)
    else:
      
        label.config(text=""WORK"", fg=GREEN)
        countdown(work_min)
           

# ---------------------------- COUNTDOWN MECHANISM ------------------------------- # 

def countdown(count):
    global check, timer
    min = math.floor(count / 60)
    sec = count % 60
    if sec == 0:
        sec = ""00""
    if int(sec) < 10 and int(sec) > 0:
        sec = f""0{sec}""

    canvas.itemconfig(countdown_text, text=f""{min}:{sec}"")
    if count > 0:
        timer = window.after(1000, countdown, count-1)
    else:
        if reps % 2 != 0:
            check += ""✔""
            check_mark.config(text=check)
        on_start()

# ---------------------------- UI SETUP ------------------------------- #
window = Tk()
window.title(""Pomodoro"")
window.config(padx=100, pady=50, bg=YELLOW)

label = Label(text=""Timer"", font=(FONT_NAME, 30, ""bold""), fg=GREEN, bg=YELLOW)
label.config(pady=20)
label.grid(row=0, column=1)

canvas = Canvas(width=200, height=224, bg=YELLOW, highlightthickness=0)
tomato_img = PhotoImage(file=""tomato.png"")
canvas.create_image(100, 112, image=tomato_img)
countdown_text = canvas.create_text(100, 130, text=""00:00"", fill=""black"", font=(FONT_NAME, 22, ""bold""))
canvas.grid(row=1, column=1)

start_button = Button(text=""Start"", command=on_start, width=10)
start_button.grid(row=2, column=0)

check_mark = Label(text=check, font=(FONT_NAME, 15, ""bold""), fg=GREEN, bg=YELLOW)
check_mark.grid(row=2, column=1)

reset_button = Button(text=""Reset"", command=on_reset, width=10)
reset_button.grid(row=2, column=2)

window.mainloop()"
Games,Creating a Game BullsAndCows,"This Python project is a game application that implements a number-guessing game similar to ""Bulls and Cows"" using advanced strategies like tree-based decision-making. Players, which can be either humans or AIs (implemented through different strategies), try to guess a sequence of digits within the minimum number of attempts. The application leverages object-oriented programming to handle different player strategies and uses the Python fire library to provide a command-line interface for running and configuring the game.","1. Define player interfaces
2. Implement player strategies
3. Define game logic
4. Configure command-line interface
",4,"import abc

class IPlayer(abc.ABC):
    def __init__(self, name):
        self.name = name

    @abc.abstractmethod
    def guess(self):
        pass

    def refresh(self):
        pass

    def notify(self, guess, judge_rs):
        pass

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name
","import abc

class IPlayer(abc.ABC):
    def __init__(self, name):
    pass

    @abc.abstractmethod
    def guess(self):
        pass

    def refresh(self):
        pass

    def notify(self, guess, judge_rs):
        pass

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name
","import random

class RandomPlayer(IPlayer):
    def guess(self):
        return random.sample(ALL_NUMBER, NUMBER_COUNT)

class Human(IPlayer):
    def guess(self):
        input_str = input(""Input your guess: "")
        return list(map(int, input_str))

class TreePlayer(IPlayer):
    def __init__(self, name, wait=0):
        super().__init__(name)
        self.wait = wait
        self.refresh()

    def refresh(self):
        # Initialize or reset the game tree
        pass

    def guess(self):
        # Use a decision tree to make a guess
        pass

    def notify(self, guess, judge_rs):
        # Adjust the tree based on feedback
        pass
","import random

class RandomPlayer(IPlayer):
    def guess(self):
    pass

class Human(IPlayer):
    def guess(self):
    pass

class TreePlayer(IPlayer):
    def __init__(self, name, wait=0):
    pass

    def refresh(self):
        # Initialize or reset the game tree
        pass

    def guess(self):
        # Use a decision tree to make a guess
        pass

    def notify(self, guess, judge_rs):
        # Adjust the tree based on feedback
        pass
","def judge(answer, guess):
    bulls = sum(1 for x, y in zip(answer, guess) if x == y)
    cows = len(set(answer) & set(guess)) - bulls
    return {'a': bulls, 'b': cows}

def run_game(player, rnd=10, answer=None):
    answer = answer or random.sample(ALL_NUMBER, NUMBER_COUNT)
    player.refresh()
    for round_number in range(rnd):
        guess = player.guess()
        result = judge(answer, guess)
        if guess == answer:
            return round_number
        player.notify(guess, result)
    return None
","def judge(answer, guess):
    pass}

def run_game(player, rnd=10, answer=None):
    pass
","import fire

def compete_with_ai(game_num=3):
    human = Human(""Human"")
    ai = TreePlayer(""AI"", wait=2)
    compete([human, ai], game_num)

if __name__ == '__main__':
    fire.Fire({
        'compete_with_ai': compete_with_ai
    })
","import fire

def compete_with_ai(game_num=3):
    pass
",,,,,"#! /usr/bin/env python3
# -*- coding utf-8 -*-
""""""
-------------------------------------------------
   File Name：     game.py
   Author :       chenhao
   time：          2021/11/4 20:22
   Description :
-------------------------------------------------
""""""
import collections
import logging
import abc
import math
import random
import time
import fire
from itertools import permutations
from typing import List

logging.basicConfig(level=logging.INFO, format=""%(asctime)s [%(levelname)s][%(filename)s:%(lineno)d]:%(message)s"",
                    datefmt='%Y-%m-%d %H:%M:%S')

logger = logging.getLogger(__name__)

NUMBER_COUNT = 4
ALL_NUMBER = list(range(10))


class IPlayer:
    def __init__(self, name):
        self.name = name

    @abc.abstractmethod
    def guess(self) -> List[int]:
        pass

    def refresh(self):
        pass

    def notify(self, guess: List[int], judge_rs: dict):
        pass

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name


class RandomPlayer(IPlayer):

    def guess(self) -> List[int]:
        return random.sample(ALL_NUMBER, NUMBER_COUNT)


class Human(IPlayer):
    def guess(self) -> List[int]:
        while True:
            try:
                logger.info(""input your guess"")
                guess = input()
                guess = [int(e) for e in guess]
                if len(guess) != NUMBER_COUNT:
                    raise Exception()
                return guess
            except Exception as e:
                logger.error(f""invalid input:{guess}, please input again!"")
        return guess


class Node:
    def __init__(self, d):
        self.n = 0
        self.v = 0
        self.d = d
        if d < NUMBER_COUNT:
            self.children: List[Node] = [Node(d + 1) for _ in range(10)]
        else:
            self.children = None

    def get_val(self, p, c=1.0):
        v = self.n / p
        d = math.log(1 / (self.v + 1))
        return v + c * d

    def get_next(self, his):
        cands = [(idx, e, e.get_val(self.n)) for idx, e in enumerate(self.children) if e.n and idx not in his]
        # logger.info(cands)
        item = max(cands, key=lambda x: x[2])
        return item

    def clear(self):
        self.n = 0
        if self.children:
            for c in self.children:
                c.clear()

    def __repr__(self):
        return f""Node(n={self.n},v={self.v},d={self.d})""

    def __str__(self):
        return self.__repr__()


def update_tree(root, cand: List[int]):
    n = root
    for idx in cand:
        n.n += 1
        n = n.children[idx]
    n.n += 1


class TreePlayer(IPlayer):

    def __init__(self, name, wait=0):
        super().__init__(name=name)
        self.root = Node(d=0)
        self.cands = list(permutations(ALL_NUMBER, NUMBER_COUNT))
        self.wait = wait
        for cand in self.cands:
            update_tree(self.root, cand)

    def refresh(self):
        self.root = Node(d=0)
        self.cands = list(permutations(ALL_NUMBER, NUMBER_COUNT))
        for cand in self.cands:
            update_tree(self.root, cand)

    def guess(self) -> List[int]:
        n = self.root
        rs = []
        for _ in range(NUMBER_COUNT):
            idx, n, v = n.get_next(his=rs)
            n.v += 1
            rs.append(idx)
        time.sleep(self.wait)
        return rs

    def notify(self, guess: List[int], judge_rs: dict):
        tmp = len(self.cands)
        self.cands = [e for e in self.cands if judge_rs2str(judge_rs) == judge_rs2str(judge(e, guess))]
        logger.info(f""cut cands from {tmp} to {len(self.cands)} after cuts"")
        self.root.clear()
        for cand in self.cands:
            update_tree(self.root, cand)


def judge(ans: List[int], gs: List[int]) -> dict:
    assert len(ans) == len(gs) == NUMBER_COUNT
    a_list = [e for e in zip(ans, gs) if e[0] == e[1]]
    a = len(a_list)
    b = len(set(ans) & set(gs))
    b -= a
    return dict(a=a, b=b)


def judge_rs2str(j_rs):
    a = j_rs[""a""]
    b = j_rs[""b""]
    return f""{a}A{b}B""


def run_game(player, rnd=10, answer=None):
    if not answer:
        answer = random.sample(ALL_NUMBER, NUMBER_COUNT)
    player.refresh()
    for idx in range(rnd):
        logger.info(f""round:{idx + 1}"")
        guess = player.guess()
        judge_rs = judge(answer, guess)
        logger.info(f""{player} guess:{guess}, judge result:{judge_rs2str(judge_rs)}"")
        if guess == answer:
            break
        player.notify(guess, judge_rs)
    logger.info(f""answer is :{answer}"")
    if guess == answer:
        logger.info(f""{player} win in {idx + 1} rounds!"")
        return idx
    else:
        logger.info(f""{player} failed!"")
        return None


def compete(players, game_num, rnd=10, base_score=10):
    answers = [random.sample(ALL_NUMBER, NUMBER_COUNT) for _ in range(game_num)]
    score_board = collections.defaultdict(int)
    for g in range(game_num):
        logger.info(f""game:{g + 1}"")
        for p in players:
            logger.info(f""player {p} try"")
            s = run_game(player=p, rnd=rnd, answer=answers[g])
            s = base_score - s if s is not None else 0
            score_board[p] += s
            logger.info(""press any key to select next player"")
            _ = input()
        logger.info(f""current score board:{dict(score_board)}"")
        logger.info(""press any key to next game"")
        _ = input()

    return score_board


def compete_with_ai(game_num=3):
    human = Human(""Human"")
    ai = TreePlayer(""AI"", wait=2)
    players = [human, ai]
    logger.info(f""Human Vs AI with {game_num} games"")
    score_board = compete(players=players, game_num=game_num)
    logger.info(""final score board:{}"")
    logger.info(score_board)


def test_avg_step(test_num=100):
    ai = TreePlayer(""AI"", wait=0)
    steps = []
    for _ in range(test_num):
        steps.append(run_game(ai, rnd=10))
    avg = sum(steps) / len(steps)
    logger.info(f""{ai} avg cost{avg:.3f} steps with {test_num} tests"")


if __name__ == '__main__':
    fire.Fire(compete_with_ai)"
Advanced topic ,Creating AI to solve minesweeper,"This Python project is a sophisticated simulation of a minesweeper game that incorporates different AI strategies to solve the game. It uses the turtle module for a graphical representation of the game board and employs various algorithms to navigate and uncover safe cells while avoiding mines. The application can operate in several modes, ranging from basic random guesses to more complex decision-making based on a knowledge base and probability calculations.","1. Define GUI and cell classes
2. Implement AI strategies
3. Initialize and set up the game board
4. Run simulations and visualize outcomes
",4,"import turtle

# GUI elements
class CellPen(turtle.Turtle):
    def __init__(self, color):
        super().__init__(shape=""square"")
        self.color(color)
        self.penup()
        self.speed(20)

# Cell properties
class Cell:
    def __init__(self, position):
        self.position = position
        self.is_mine = False
        self.neighbor_mines = 0

    def set_mine(self):
        self.is_mine = True

    def calculate_neighbor_mines(self, board):
        # Implementation to count adjacent mines
        pass
","import turtle

# GUI elements
class CellPen(turtle.Turtle):
    def __init__(self, color):
    pass

# Cell properties
class Cell:
    def __init__(self, position):
        pass

    def set_mine(self):
        pass

    def calculate_neighbor_mines(self, board):
        # Implementation to count adjacent mines
        pass
","class AIPlayer:
    def __init__(self, knowledge_base):
        self.knowledge_base = knowledge_base

    def make_move(self, board):
        # Implement logic to make a move based on the current knowledge base
        pass

    def update_knowledge_base(self, move_result):
        # Logic to update the knowledge base based on the result of the last move
        pass
","class AIPlayer:
    def __init__(self, knowledge_base):
        pass

    def make_move(self, board):
        # Implement logic to make a move based on the current knowledge base
        pass

    def update_knowledge_base(self, move_result):
        # Logic to update the knowledge base based on the result of the last move
        pass
","def setup_board(size):
    board = [[Cell((i, j)) for j in range(size)] for i in range(size)]
    # Additional setup like placing mines randomly
    return board

def draw_board(board, pens):
    # Use turtle graphics to draw the board
    for row in board:
        for cell in row:
            cell.draw(pens[cell.type])
","def setup_board(size):
    pass

def draw_board(board, pens):
    # Use turtle graphics to draw the board
    pass
","def run_simulation(board, player):
    while not game_over(board):
        move = player.make_move(board)
        result = apply_move(board, move)
        player.update_knowledge_base(result)
        if move leads to a mine:
            print(""Game Over"")
            break

def visualize_results(results):
    # Use matplotlib to visualize the results of multiple simulations
    import matplotlib.pyplot as plt
    plt.plot(results)
    plt.show()
","def run_simulation(board, player):
    pass

def visualize_results(results):
    # Use matplotlib to visualize the results of multiple simulations
    pass
",,,,,"import random
import copy
import turtle
from time import sleep
import matplotlib.pyplot as plt
dirr = [[0, 1], [1, 0], [-1, 0], [0, -1], [-1, -1], [1, 1], [-1, 1], [1, -1]]

# Author: Nisarg Patel

## GUI classes
class wPen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape(""square"")
        self.color(""white"")
        self.penup()
        self.speed(20)


class bPen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape(""square"")
        self.color(""blue"")
        self.penup()
        self.speed(20)


class lbPen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape(""square"")
        self.color(""navy"")
        self.penup()
        self.speed(20)


class oePen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape(""square"")
        self.color(""orange"")
        self.penup()
        self.speed(20)


class pPen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape(""square"")
        self.color(""red"")
        self.penup()
        self.speed(20)


class fPen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape(""square"")
        self.color(""yellow"")
        self.penup()
        self.speed(20)


## EOF Gui classes

class cell:
    def __init__(self, position, current_state=""C"", surrounding_mines=-1, identified_safe=-1, identified_mines=-1,
                 hidden_squares=-1):
        self.current_state = current_state
        self.position = position
        self.surrounding_mines = surrounding_mines
        self.identified_safe = identified_safe
        self.identified_mines = identified_mines
        self.hidden_squares = hidden_squares

    def __str__(self):
        return str(self.current_state)

    def mark_safe(self, game_gui):
        # print(""Check: {}"".format(self.position))
        self.current_state = ""S""
        if game_gui:
            write_game(self.position[0], self.position[1], wpen)
        # self.hidden_squares = find_in_neighbours(agent_board, self.position, ""C"")
        # self.identified_safe = find_in_neighbours(agent_board, self.position, ""S"")
        # self.identified_mines = find_in_neighbours(agent_board, self.position, ""M"")

    def mark_mine(self, game_gui):
        self.current_state = ""M""
        if game_gui:
            write_game(self.position[0], self.position[1], oepen)


class Knowledge:
    def __init__(self, cells, count):
        self.cells = set(cells)
        self.count = count

    def __eq__(self, other):
        if self.cells == other.cells and self.count == other.count:
            return True
        return False

    def mark_safe(self, cell, game_gui):
        if game_gui:
            write_game(cell[0], cell[1], wpen)
        if cell not in self.cells:
            return
        new_cells = set()
        for item in self.cells:
            if item != cell:
                new_cells.add(item)
        self.cells = new_cells

    def mark_mine(self, cell, game_gui):
        if game_gui:
            write_game(cell[0], cell[1], oepen)
        if cell not in self.cells:
            return
        new_cells = set()

        for item in self.cells:
            if item == cell:
                self.count -= 1
                continue
            else:
                new_cells.add(item)
        self.cells = new_cells


class Knowledge_Base:
    def __init__(self):
        self.knowledge_bank = []
        self.mines = set()
        self.safes = set()
        self.moves = set()
        self.visited = set()

    def set_safe(self, cell, game_gui):
        self.safes.add(cell)
        if game_gui:
            write_game(cell[0], cell[1], wpen)
        for info in self.knowledge_bank:
            info.mark_safe(cell, game_gui)

    def set_mins(self, cell, game_gui):
        self.mines.add(cell)
        if game_gui:
            write_game(cell[0], cell[1], oepen)
        for info in self.knowledge_bank:
            info.mark_mine(cell, game_gui)

    def add_knowledge(self, cell, clue, new_knowledge, agent_board):
        self.moves.add(cell)
        self.safes.add(cell)
        self.knowledge_bank.append(new_knowledge)

        # adding to safe and mine
        for knowledge in self.knowledge_bank:
            if len(knowledge.cells) == knowledge.count:
                for k_cell in knowledge.cells:
                    self.mines.add(k_cell)
                self.knowledge_bank.remove(knowledge)
            elif knowledge.count == 0:
                for k_cell in knowledge.cells:
                    self.safes.add(k_cell)
                self.knowledge_bank.remove(knowledge)

        for knowledge in self.knowledge_bank:
            for k_cell in knowledge.cells.copy():
                if k_cell in self.safes or k_cell in self.mines:
                    knowledge.cells.remove(k_cell)
                    if k_cell in self.mines:
                        knowledge.count -= 1

        knowledge_to_add = []
        for knowledge1 in self.knowledge_bank.copy():
            for knowledge2 in self.knowledge_bank.copy():
                if knowledge1 == knowledge2:
                    continue
                if knowledge1.cells.issubset(knowledge2.cells):
                    new_cells = knowledge2.cells - knowledge1.cells
                    new_count = knowledge2.count - knowledge1.count  # new count is 0 then set all cells to safe.
                    new_sentence = Knowledge(new_cells, new_count)
                    knowledge_to_add.append(new_sentence)
                    self.knowledge_bank.remove(knowledge2)
        for k in knowledge_to_add:
            if k not in self.knowledge_bank:
                self.knowledge_bank.append(k)

    def get_safe_move(self):
        for k_cell in self.safes:
            if k_cell not in self.moves:  # self.visited
                return k_cell
        return None

    def get_random_move(self, dim):
        choice = random.Random()
        while len(self.safes) + len(self.mines) < dim * dim:
            i = choice.randint(0, dim - 1)
            j = choice.randint(0, dim - 1)
            if (i, j) in self.moves:
                continue
            if (i, j) in self.mines:
                continue
            return [i, j]
        return None


def give_prob_based_on_position(position, agent_board, AI_knowledge_base):
    global dirr
    mine_count = 1
    neighbour_count = 1
    for direction in dirr:
        x = position[0] + direction[0]
        y = position[1] + direction[1]
        if 0 <= x < board_size and 0 <= y < board_size:
            neighbour_count += 1
            if agent_board[x][y].current_state == ""M"" or position in AI_knowledge_base.mines:
                mine_count += 1
    return mine_count / neighbour_count


def insert_into_temp_prob(current_prob, location, temp_prob):
    if len(temp_prob) == 0:
        temp_prob.append((current_prob, location))
    elif temp_prob[0][0] == current_prob:
        temp_prob.append((current_prob, location))
    elif current_prob < temp_prob[0][0]:
        temp_prob = []
        temp_prob.append((current_prob, location))
    return temp_prob


def get_best_random_move_based_on_prob(board_size, AI_knowledge_base, number_of_mines):
    temp_prob = []
    number_of_explored_cells = len(AI_knowledge_base.visited)
    number_of_unexplored_cells = board_size * board_size - number_of_explored_cells
    number_of_mines_remaining = number_of_mines - len(AI_knowledge_base.mines)

    for i in range(board_size):
        for j in range(board_size):
            item = (i, j)
            in_bank = False
            if item in AI_knowledge_base.mines:
                continue
            if item in AI_knowledge_base.moves:
                continue
            for knowledge in AI_knowledge_base.knowledge_bank:
                if item in knowledge.cells:
                    current_prob = knowledge.count / len(knowledge.cells)
                    temp_prob = insert_into_temp_prob(current_prob, item, temp_prob)
                    in_bank = True
            if not in_bank:
                current_prob = number_of_mines_remaining / number_of_unexplored_cells
                temp_prob = insert_into_temp_prob(current_prob, item, temp_prob)

    if len(temp_prob) == 0:
        return None
    index = random.randrange(len(temp_prob))
    return temp_prob[index][1]


def check_remaining_mines(current_cell):
    explored_mines = current_cell.identified_mines
    clue = current_cell.surrounding_mines
    if clue - explored_mines == current_cell.hidden_squares:
        return True
    return False


def check_remaining_safes(board_size, position, current_cell):
    total_neighbours = valid_neighbours(position[0], position[1], board_size)
    safe_neighbour = current_cell.identified_safe
    clue = current_cell.surrounding_mines
    if (total_neighbours - clue) - safe_neighbour == current_cell.hidden_squares:
        return True
    return False


def get_random_cell(board_size, agent_board, unexplored_squares):
    pos_index = random.randrange(len(unexplored_squares))
    position = unexplored_squares[pos_index]
    return position


def find_in_neighbours(agent_board, position, to_find):
    global dirr
    counter = 0
    for direction in dirr:
        x = position[0] + direction[0]
        y = position[1] + direction[1]
        if 0 <= x < board_size and 0 <= y < board_size and agent_board[x][y].current_state == to_find:
            counter += 1
    return counter


def set_hidden_neighbours(agent_board, position, to_set, list, unexplored_squares, draw_gui):
    global dirr
    for direction in dirr:
        x = position[0] + direction[0]
        y = position[1] + direction[1]
        if 0 <= x < board_size and 0 <= y < board_size and agent_board[x][y].current_state == ""C"":
            agent_board[x][y].current_state = to_set
            if to_set == ""M"" and draw_gui:
                write_game(x,y,oepen)
            if to_set == ""S"" and draw_gui:
                write_game(x, y, wpen)
            list.append([x, y])
            unexplored_squares.remove([x, y])


def fill_unexplored_squares(board_size):
    unexplored_squares = []
    for i in range(board_size):
        for j in range(board_size):
            unexplored_squares.append([i, j])
    return unexplored_squares


def get_hidden_neighbour_positions(current_cell, agent_board):
    pos = []
    global dirr
    [row, col] = current_cell
    for direction in dirr:
        x = row + direction[0]
        y = col + direction[1]
        if 0 <= x < board_size and 0 <= y < board_size:  # and agent_board[x][y].current_state == ""C"":
            pos.append((x, y))
    return pos


def ai_agent(board_size, solution_board, agent_board, make_smarter, game_gui):
    AI_knowledge_base = Knowledge_Base()
    boom_count = 0
    while len(AI_knowledge_base.visited) != board_size * board_size:
        # print(AI_knowledge_base.mines)
        # sleep(0.5)
        valid_move = AI_knowledge_base.get_safe_move()
        if valid_move is not None:
            # there are safe cells that we can explore
            current_cell = valid_move
            AI_knowledge_base.visited.add(current_cell)
            agent_board[current_cell[0]][current_cell[1]].mark_safe(game_gui)
            neighbours = get_hidden_neighbour_positions(current_cell, agent_board)
            clue = get_surrounding_mines(solution_board, current_cell[0], current_cell[1], board_size)
            curr_knowledge = Knowledge(neighbours, clue)
            AI_knowledge_base.add_knowledge(current_cell, clue, curr_knowledge, agent_board)
            # add_knowledge(knowledge_base, current_cell, explored_mines, agent_board, safe_cells, solution_board,
            # unexplored_squares)
        else:
            # make random move
            valid_move = AI_knowledge_base.get_random_move(board_size)
            # smart AI based on prob
            if make_smarter:
                valid_move = get_best_random_move_based_on_prob(board_size, AI_knowledge_base, number_of_mines)
            if valid_move is None:
                break
            [row, col] = valid_move
            current_cell = agent_board[row][col].position
            AI_knowledge_base.visited.add(current_cell)

            if solution_board[row][col] == 0:
                # valid random-move, then update the knowledge base
                agent_board[row][col].mark_safe(game_gui)
                neighbours = get_hidden_neighbour_positions(current_cell, agent_board)
                clue = get_surrounding_mines(solution_board, current_cell[0], current_cell[1], board_size)
                curr_knowledge = Knowledge(neighbours, clue)
                AI_knowledge_base.add_knowledge(current_cell, clue, curr_knowledge, agent_board)
                # add_knowledge(knowledge_base, current_cell, explored_mines, agent_board, safe_cells, solution_board,
                # unexplored_squares)
            else:
                # random-move detected a mine
                (row, col) = valid_move
                AI_knowledge_base.set_mins((row, col),game_gui)
                agent_board[row][col].mark_mine(game_gui)
                # print(""BOOM"")
                boom_count += 1
    return boom_count


def ai_agent_knowing_mines(board_size, solution_board, agent_board, number_of_mines,  make_smarter, game_gui):
    AI_knowledge_base = Knowledge_Base()
    boom_count = 0
    while len(AI_knowledge_base.mines) != number_of_mines:
        # print(AI_knowledge_base.mines)
        # sleep(0.5)
        valid_move = AI_knowledge_base.get_safe_move()
        if valid_move is not None:
            # there are safe cells that we can explore
            current_cell = valid_move
            AI_knowledge_base.visited.add(current_cell)
            agent_board[current_cell[0]][current_cell[1]].mark_safe(game_gui)
            neighbours = get_hidden_neighbour_positions(current_cell, agent_board)
            clue = get_surrounding_mines(solution_board, current_cell[0], current_cell[1], board_size)
            curr_knowledge = Knowledge(neighbours, clue)
            AI_knowledge_base.add_knowledge(current_cell, clue, curr_knowledge, agent_board)
            # add_knowledge(knowledge_base, current_cell, explored_mines, agent_board, safe_cells, solution_board,
            # unexplored_squares)
        else:
            # make random move
            valid_move = AI_knowledge_base.get_random_move(board_size)
            # smart AI based on prob
            if make_smarter:
                valid_move = get_best_random_move_based_on_prob(board_size, AI_knowledge_base, number_of_mines)
            if valid_move is None:
                break
            [row, col] = valid_move
            current_cell = agent_board[row][col].position
            AI_knowledge_base.visited.add(current_cell)

            if solution_board[row][col] == 0:
                # valid random-move, then update the knowledge base
                agent_board[row][col].mark_safe(game_gui)
                neighbours = get_hidden_neighbour_positions(current_cell, agent_board)
                clue = get_surrounding_mines(solution_board, current_cell[0], current_cell[1], board_size)
                curr_knowledge = Knowledge(neighbours, clue)
                AI_knowledge_base.add_knowledge(current_cell, clue, curr_knowledge, agent_board)
                # add_knowledge(knowledge_base, current_cell, explored_mines, agent_board, safe_cells, solution_board,
                # unexplored_squares)
            else:
                # random-move detected a mine
                (row, col) = valid_move
                AI_knowledge_base.set_mins((row, col),game_gui)
                agent_board[row][col].mark_mine(game_gui)
                # print(""BOOM"")
                boom_count += 1
    return boom_count



def basic_agent(board_size, solution_board, agent_board, draw_gui, oepen, wpen):
    explored_mines = []
    explored_safe = []
    boom_count = 0
    unexplored_squares = fill_unexplored_squares(board_size)
    while len(explored_safe) + len(explored_mines) != board_size ** 2:
        #sleep(0.5)
        [row, col] = get_random_cell(board_size, agent_board, unexplored_squares)
        unexplored_squares.remove([row, col])
        if solution_board[row][col] == 0:
            explored_safe.append([row, col])
            clue = get_surrounding_mines(solution_board, row, col, board_size)
            agent_board[row][col].surrounding_mines = clue
            agent_board[row][col].current_state = ""S""
            if draw_gui:
                write_game(row, col, wpen)
            agent_board[row][col].hidden_squares = find_in_neighbours(agent_board, [row, col], ""C"")
            agent_board[row][col].identified_safe = find_in_neighbours(agent_board, [row, col], ""S"")
            agent_board[row][col].identified_mines = find_in_neighbours(agent_board, [row, col], ""M"")
            if check_remaining_mines(agent_board[row][col]):
                set_hidden_neighbours(agent_board, [row, col], ""M"", explored_mines, unexplored_squares, draw_gui)
            if check_remaining_safes(board_size, [row, col], agent_board[row][col]):
                set_hidden_neighbours(agent_board, [row, col], ""S"", explored_safe, unexplored_squares, draw_gui)
        else:
            #print(""BOOM"")
            explored_mines.append([row, col])
            agent_board[row][col].current_state = ""M""
            if draw_gui:
                write_game(row, col, oepen)
            boom_count += 1
    return boom_count


def create_board(board_size):
    board = []
    for i in range(board_size):
        col = []
        for j in range(board_size):
            col.append(cell((i, j)))
        board.append(col)
    return board


def create_game(board_size):
    board = []
    for i in range(board_size):
        col = []
        for j in range(board_size):
            col.append(0)
        board.append(col)
    return board


def add_mines(board, board_size, number_of_mines):
    temp = number_of_mines
    while temp != 0:
        a = random.randrange(board_size)
        b = random.randrange(board_size)
        if board[a][b] == 1:
            continue
        board[a][b] = 1
        temp -= 1
    return board


def valid_neighbours(row, col, board_size):
    global dirr
    node_count = 0
    for direction in dirr:
        x = row + direction[0]
        y = col + direction[1]
        if 0 <= x < board_size and 0 <= y < board_size:
            node_count += 1
    return node_count


def get_surrounding_mines(board, row, col, board_size):
    global dirr
    mine_count = 0
    for direction in dirr:
        x = row + direction[0]
        y = col + direction[1]
        if 0 <= x < board_size and 0 <= y < board_size and board[x][y] == 1:
            mine_count += 1
    return mine_count


def printLine(printG):
    for i in range(len(printG)):
        for j in printG[i]:
            print(j, end="" "")
        print()


def write_game(x, y, pen):
    screen_x = -288 + (y * 24)
    screen_y = 288 - (x * 24)
    pen.goto(screen_x, screen_y)
    pen.stamp()


def setup_game(dim, bpen):
    for i in range(dim):
        for j in range(dim):
            write_game(i, j, bpen)


if __name__ == '__main__':

    # Input variables
    board_size = 20
    number_of_mines = 25


    boom_count_basic = 0
    boom_count_normal = 0
    boom_count_smartai = 0

    ## Activating GUI
    wn = turtle.Screen()
    wn.bgcolor(""black"")
    wn.title(""Maze game"")
    wn.setup(600, 600)
    wpen = wPen()
    oepen = oePen()
    bpen = bPen()
    setup_game(board_size, bpen)

    
    # single minecraft game with GUI
    game_board = create_game(board_size)
    game_board = add_mines(game_board, board_size, number_of_mines)

    # AI agent
    agent_board = create_board(board_size)
    boom_count_basic += basic_agent(board_size, game_board, agent_board,True,oepen,wpen)
    agent_board = create_board(board_size)
    setup_game(board_size, bpen)

    boom_count_normal += ai_agent(board_size, game_board, agent_board,False,True)
    agent_board = create_board(board_size)

    # AI agent with Knowledge base
    setup_game(board_size, bpen)
    boom_count_smartai += ai_agent(board_size, game_board, agent_board,True, True)
    print(boom_count_basic, boom_count_normal, boom_count_smartai)
    wn.exitonclick()
    exit(0)

    # This is for accuracy purpose to get the success rate
    mines = []
    basic_agent_success = []
    ai_agent_success = []
    smart_ai_success = []

    number_of_mines = 1
    while number_of_mines != 100:
        print(number_of_mines)
        boom_count_basic = 0
        boom_count_normal = 0
        boom_count_smartai = 0
        for i in range(100):
            # print(i)
            game_board = create_game(board_size)
            game_board = add_mines(game_board, board_size, number_of_mines)

            agent_board = create_board(board_size)
            # game_board_copy = copy.deepcopy(agent_board)
            boom_count_basic += basic_agent(board_size, game_board, agent_board,False, None, None)
            agent_board = create_board(board_size)

            boom_count_normal += ai_agent(board_size, game_board, agent_board, False, False)
            agent_board = create_board(board_size)
            boom_count_smartai += ai_agent(board_size, game_board, agent_board, True, False)
        mines.append(number_of_mines)
        basic_agent_success.append(100*(100*number_of_mines - boom_count_basic)/(100*number_of_mines))
        ai_agent_success.append(100*(100*number_of_mines - boom_count_normal)/(100*number_of_mines))

        smart_ai_success.append(100*(100*number_of_mines - boom_count_smartai)/(100*number_of_mines))
        number_of_mines += 1
        print(boom_count_basic, boom_count_normal, boom_count_smartai)

    plt.plot(mines, basic_agent_success, label=""Basic agent"")
    plt.plot(mines, ai_agent_success, label=""AI agent"")
    plt.plot(mines, smart_ai_success, label=""Smart AI agent (decision based on probability)"")
    plt.ylabel(""Success Rate"")
    plt.xlabel(""Number of mines"")
    plt.legend()
    plt.show()
"
Basics,PDF Downloader,"This Python project automates the process of downloading all PDF files from a specified webpage. It uses the requests library to make HTTP requests and BeautifulSoup from bs4 for parsing HTML content to extract links. The script is designed to identify and download files directly linked on the page that end with the .pdf extension, saving them to a specified directory. This can be especially useful for users who need to download multiple PDF documents from academic or research websites, streamlining the task into a simple execution.","1. Set up URL and folder location
2. Fetch webpage content
3. Extract PDF links
4. Download and save PDFs
",4,"import os

def setup_environment(url, folder_path):
    # Ensure the folder exists and set the base URL for the downloads
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    return url, folder_path

# Example usage
url = ""http://example.com""
folder_location = r'./NewFolder'
setup_environment(url, folder_location)
","import os

def setup_environment(url, folder_path):
    # Ensure the folder exists and set the base URL for the downloads
    pass

# Example usage
url = ""http://example.com""
folder_location = r'./NewFolder'
setup_environment(url, folder_location)
","import requests
from bs4 import BeautifulSoup

def fetch_webpage(url):
    # This function fetches the webpage content and returns a BeautifulSoup object for parsing
    response = requests.get(url)
    return BeautifulSoup(response.text, 'html.parser')

# Example usage
soup = fetch_webpage(url)
","import requests
from bs4 import BeautifulSoup

def fetch_webpage(url):
    # This function fetches the webpage content and returns a BeautifulSoup object for parsing
    pass

# Example usage
soup = fetch_webpage(url)
","def extract_pdf_links(soup, base_url):
    # This function extracts all PDF links from the BeautifulSoup object
    pdf_links = []
    for link in soup.select(""a[href$='.pdf']""):
        full_link = urljoin(base_url, link['href'])
        pdf_links.append(full_link)
    return pdf_links

# Example usage
pdf_links = extract_pdf_links(soup, url)
","def extract_pdf_links(soup, base_url):
    # This function extracts all PDF links from the BeautifulSoup object
    pass

# Example usage
pdf_links = extract_pdf_links(soup, url)
","def download_and_save_pdfs(links, folder_location):
    # This function downloads PDFs from a list of links and saves them in a specified folder
    for link in links:
        filename = os.path.join(folder_location, link.split('/')[-1])
        with open(filename, 'wb') as f:
            f.write(requests.get(link).content)

# Example usage
download_and_save_pdfs(pdf_links, folder_location)
","def download_and_save_pdfs(links, folder_location):
    # This function downloads PDFs from a list of links and saves         
    pass
# Example usage
download_and_save_pdfs(pdf_links, folder_location)
",,,,,"import os
import requests
from urllib.parse import urljoin
from bs4 import BeautifulSoup

#Put the link from which you need to download all the pdf
url = """" 

#If there is no such folder, the script will create one automatically
folder_location = r'./NewFolder'
if not os.path.exists(folder_location):os.mkdir(folder_location)

response = requests.get(url)
soup= BeautifulSoup(response.text, ""html.parser"")     
for link in soup.select(""a[href$='.pdf']""):
    #Name the pdf files using the last portion of each link which are unique in this case
    filename = os.path.join(folder_location,link['href'].split('/')[-1])
    with open(filename, 'wb') as f:
        f.write(requests.get(urljoin(url,link['href'])).content)"
Games,Creating game (minesweeper),"This Python project implements a Minesweeper game using a console-based interface. It simulates the classic game where players dig cells in a minefield, trying to avoid mines. Each non-mine cell displays the count of mines in the adjacent cells. Players can also mark suspected mine locations. The game ends when a mine is dug or all non-mine cells are uncovered.","1. Initialize the minefield
2. Plant bombs and assign numbers
3. Handle player moves
4. Clear areas with no adjacent mines
5. Display the current state of the minefield
6. Play the game loop
",6,"class MineField:
    def __init__(self, size, n_bombs):
        self.size = size
        self.n_bombs = n_bombs
        self.grid = [[0 for _ in range(size)] for _ in range(size)]
        self.grid_mask = [['·' for _ in range(size)] for _ in range(size)]
        self.plant_bombs()
        self.first_dig()

def create_minefield(size, n_bombs):
    return MineField(size, n_bombs)

# Example usage
field = create_minefield(10, 10)
","class MineField:
    def __init__(self, size, n_bombs):
    pass

def create_minefield(size, n_bombs):
    return MineField(size, n_bombs)

# Example usage
field = create_minefield(10, 10)
","from watchdog.observers import Observer

def setup_observer(watched_folder, handler):
    """"""Create and configure a directory observer.""""""
    observer = Observer()
    observer.schedule(handler, path=watched_folder, recursive=True)
    return observer
","from watchdog.observers import Observer

def setup_observer(watched_folder, handler):
    """"""Create and configure a directory observer.""""""
    pass
","def start_observer(observer):
    """"""Start the observer to monitor changes.""""""
    observer.start()
    return observer
","def start_observer(observer):
    """"""Start the observer to monitor changes.""""""
    observer.start()
    pass
","def monitor_folder(observer):
    """"""Monitor the folder and handle the stop request gracefully.""""""
    pass
","def monitor_folder(observer):
    """"""Monitor the folder and handle the stop request gracefully.""""""
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        print(""Stopping observer..."")
        observer.stop()
        observer.join()
","def monitor_folder(observer):
    """"""Monitor the folder and handle the stop request gracefully.""""""
    pass
",,,,"from random import randint, choice
import os
import re


class MineField:
    def __init__(self, size, n_bombs):
        self.size = size
        self.digged = 0
        self.n_bombs = n_bombs
        self.grid = [[0 for j in range(size)] for i in range(size)]
        self.grid_mask = [['·' for j in range(size)] for i in range(size)]
        self.plant_bombs()
        # self.assign_numbers()
        self.first_dig()
        
    def __str__(self):
            
        _str = '    ';
        
        for i in range(1, self.size+1):
            _str += str(i) + ' '
            if i < 10:
                _str += ' '
        _str += '\n'
        
        _str += ' ' + '―' * (self.size * 3 + 3) + '\n'
        
        for i, row in enumerate(self.grid_mask, 1):
            if i < 10:
                _str += ' '
            _str += str(i) + '| '
            for char in row:
                _str += str(char) + '  '
            _str += '\n'
        return _str
        
    def plant_bombs(self):
        bombs_planted = 0
        while bombs_planted < self.n_bombs:
            row = randint(0, self.size - 1)
            column = randint(0, self.size - 1)
            
            if self.grid[row][column] == '*':
                continue
            
            self.grid[row][column] = '*'
            
            self.fill_neighbors(row, column)
                        
            bombs_planted += 1
            
    def fill_neighbors(self, row, column):
            if row != 0:
                if column != 0:
                    if self.grid[row-1][column-1] != '*':
                        self.grid[row-1][column-1] += 1
                        
                if self.grid[row-1][column] != '*':
                    self.grid[row-1][column] += 1
                    
                if column != self.size-1:
                    if self.grid[row-1][column+1] != '*':
                        self.grid[row-1][column+1] += 1
                        
            if column != 0:
                if self.grid[row][column-1] != '*':
                    self.grid[row][column-1] += 1
                    
            if column != self.size-1:
                if self.grid[row][column+1] != '*':
                    self.grid[row][column+1] += 1
                    
            if row != self.size-1:
                if column != 0:
                    if self.grid[row+1][column-1] != '*':
                        self.grid[row+1][column-1] += 1
                        
                if self.grid[row+1][column] != '*':
                    self.grid[row+1][column] += 1
                    
                if column != self.size-1:
                    if self.grid[row+1][column+1] != '*':
                        self.grid[row+1][column+1] += 1
                
    def first_dig(self):
        zeros = []
        for row in range(self.size):
            for column in range(self.size):
                if self.grid[row][column] == 0:
                    zeros.append((row, column))
                    
        spot_to_dig = choice(zeros)
        self.dig(spot_to_dig[0], spot_to_dig[1])
        
    def dig(self, row, col):
        spot = self.grid[row][col]
        if spot == '*':
            return False
        elif spot != self.grid_mask[row][col]:
            self.grid_mask[row][col] = spot
            self.digged += 1
            if (spot == 0):
                self.clear_zeros(row, col)
            return True
            
    def clear_zeros(self, row, col):
        if row != 0:
            if col != 0:
                self.dig(row-1, col-1)
                    
            self.dig(row-1, col)
                
            if col != self.size-1:
                self.dig(row-1, col+1)
                    
        if col != 0:
            self.dig(row, col-1)
            
        if col != self.size-1:
            self.dig(row, col+1)
                
        if row != self.size-1:
            if col != 0:
                self.dig(row+1, col-1)
                    
            self.dig(row+1, col)
                
            if col != self.size-1:
                self.dig(row+1, col+1)
                    
    def mark_spot(self, row, col):
        spot_mask = self.grid_mask[row][col]
        if spot_mask == 'X':
            self.grid_mask[row][col] = '·'
        elif spot_mask == '·':
            self.grid_mask[row][col] = 'X'
            
    def show_bombs(self):
        for row in range(self.size):
            for column in range(self.size):
                if self.grid[row][column] == '*':
                    self.grid_mask[row][column] = '*'
            

def print_help():
    print('――――― Console Minesweeper ―――――')
    print('To dig in a spot, input the row\nand the column you want to dig in.')
    print('For example, if I wanted to dig\nin the row 2, column 4, I would\ntype: 2,4')
    print('―――――――――――――――――――――――――――――――――')
    print('If you just want to mark a spot\nwhere you know is a bomb, type the\ncoordinates followed with an ""m"".\nExample: 1,4m')
    print('\n')
    

def play(field):        
    pattern = re.compile(r""^[0-9]+,[0-9]+m?$"")
    os.system('cls' if os.name == 'nt' else 'clear')
    print(field)
    move = 'h'
    alive = True
    while alive:
        
        move = input(""Your move ('h' for help, 'q' to quit): "")
        os.system('cls' if os.name == 'nt' else 'clear')
        
        if move == 'h':
            print_help()
        elif move == 'q':
            print('Bye!\n')
            alive = 'bye'
            break
        elif re.fullmatch(pattern, move):
                row, column= [int(i)-1 for i in move.strip('m').split(',')]
                if (row > field.size) |( column > field.size):
                    print('Invalid coordinates\n')
                elif move[-1] == 'm':
                    field.mark_spot(row, column)
                else:
                    alive = field.dig(row, column)
                    if field.digged == (field.size**2 - field.n_bombs):
                        break
        else:
            print('Invalid input\n')
        
        print(field)
        
    if alive:
        if alive == True:
            print(field)
            print(""You won, congratulations!!!"")
    else:
        os.system('cls' if os.name == 'nt' else 'clear')
        field.show_bombs()
        print(field)
        print(""You lost :("")
        

field = MineField(10, 10)
play(field)"
advanced topic ,Creating face recognition,"This project is a real-time face recognition system that captures video 
from a camera, detects faces, and identifies them by comparing them to a
 set of known faces. The system can save images of detected faces and 
play an alarm for unrecognized faces.","1. Initialize the FaceRecognition class and its attributes
2. Load and encode known faces from a folder
3. Save the video stream from the camera
4. Detect and recognize faces in the video stream
5. Mark recognized and unrecognized faces in the video feed
6. Handle exiting and resource cleanup",6,"import cv2
import os

# Step 1: Initialize the FaceRecognition class and its attributes
def initialize_face_recognition():
    class FaceRecognition:
        def __init__(self):
            self.images = []
            self.base_names = []
            self.encoded_faces = []
            self.path = 'images'
            self.camera = cv2.VideoCapture(0, cv2.CAP_DSHOW)
            self.known_encoded_faces = []
            self.frame_one = None
            self.video_capture = None
            print('Please wait, encoding faces...')

# Execute Step 1
initialize_face_recognition()","import cv2
import os

# Step 1: Initialize the FaceRecognition class and its attributes
def initialize_face_recognition():


# Execute Step 1
initialize_face_recognition()","import cv2
import os
import face_recognition

# Sample dataset for step 2: Images directory
os.makedirs('images', exist_ok=True)
cv2.imwrite('images/person1.jpg', numpy.zeros((100, 100, 3)))

# Step 2: Load and encode known faces from a folder
def load_and_encode_faces():
    class FaceRecognition:
        def __init__(self):
            self.images = []
            self.base_names = []
            self.encoded_faces = []
            self.path = 'images'

        def known_image_folder(self):
            for image in os.listdir(self.path):
                if image.endswith(('.jpeg', '.JPG', '.jpg', '.png', '.PNG')):
                    img = cv2.imread(f""{self.path}/{image}"")
                    self.images.append(img)
                    self.base_names.append(os.path.splitext(image)[0])

        def encode_face(self, images):
            for image in images:
                image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                face_encoding = face_recognition.face_encodings(image_rgb)[0]
                self.encoded_faces.append(face_encoding)
            return self.encoded_faces

        def run(self):
            self.known_image_folder()
            self.known_encoded_faces = self.encode_face(self.images)
            print(""Encoding Complete"")

    # Execute Step 2
    face_recognition = FaceRecognition()
    face_recognition.run()

load_and_encode_faces()","import cv2
import os
import face_recognition

# Sample dataset for step 2: Images directory


# Step 2: Load and encode known faces from a folder
def load_and_encode_faces():


        def known_image_folder(self):


        def encode_face(self, images):


        def run(self):
)

    # Execute Step 2
pass","import cv2
import os

# Step 3: Save the video stream from the camera
def save_video_stream():
    class FaceRecognition:
        def __init__(self):
            self.camera = cv2.VideoCapture(0, cv2.CAP_DSHOW)
            self.video_capture = None

        def save_video_stream(self):
            os.makedirs('Security Camera Video', exist_ok=True)
            name = 'Video1.avi'
            if name in os.listdir('Security Camera Video'):
                name = f'Video{len(os.listdir(""Security Camera Video"")) + 1}.avi'
            fourcc = cv2.VideoWriter_fourcc(*'XVID')
            self.video_capture = cv2.VideoWriter(os.path.join('Security Camera Video', name), fourcc, 20.0, (640, 480))
            print(f'{name} saving ...')

        def run(self):
            self.save_video_stream()

    # Execute Step 3
    face_recognition = FaceRecognition()
    face_recognition.run()

save_video_stream()","import cv2
import os

# Step 3: Save the video stream from the camera
def save_video_stream():


        def save_video_stream(self):


        def run(self):","import cv2
import face_recognition

# Step 4: Detect and recognize faces in the video stream
def detect_faces_in_video():
    class FaceRecognition:
        def __init__(self):
            self.camera = cv2.VideoCapture(0, cv2.CAP_DSHOW)
            self.frame_one = None

        def detect_faces(self):
            while self.camera.isOpened():
                _, self.frame_one = self.camera.read()
                frame_one_rgb = cv2.cvtColor(self.frame_one, cv2.COLOR_BGR2RGB)
                face_locations = face_recognition.face_locations(frame_one_rgb)
                face_encodings = face_recognition.face_encodings(frame_one_rgb, face_locations)

                # For demonstration, print the number of faces detected
                print(f""Detected {len(face_locations)} faces"")

        def run(self):
            self.detect_faces()

    # Execute Step 4
    face_recognition = FaceRecognition()
    face_recognition.run()

detect_faces_in_video()","import cv2
import face_recognition

# Step 4: Detect and recognize faces in the video stream
def detect_faces_in_video():

        def __init__(self):


        def detect_faces(self):


        def run(self):


    # Execute Step 4","import cv2
import numpy
import face_recognition

# Sample dataset for step 5: Known faces
known_faces = [numpy.random.rand(128), numpy.random.rand(128)]  # Random face encodings for testing

# Step 5: Mark recognized and unrecognized faces in the video feed
def mark_faces_in_video():
    class FaceRecognition:
        def __init__(self, known_encoded_faces):
            self.camera = cv2.VideoCapture(0, cv2.CAP_DSHOW)
            self.frame_one = None
            self.known_encoded_faces = known_encoded_faces
            self.base_names = ['Person1', 'Person2']

        def mark_faces(self):
            while self.camera.isOpened():
                _, self.frame_one = self.camera.read()
                frame_one_rgb = cv2.cvtColor(self.frame_one, cv2.COLOR_BGR2RGB)
                face_locations = face_recognition.face_locations(frame_one_rgb)
                face_encodings = face_recognition.face_encodings(frame_one_rgb, face_locations)

                for face_encoding, face_location in zip(face_encodings, face_locations):
                    matches = face_recognition.compare_faces(self.known_encoded_faces, face_encoding)
                    face_distances = face_recognition.face_distance(self.known_encoded_faces, face_encoding)
                    best_match_index = numpy.argmin(face_distances)

                    if matches[best_match_index]:
                        name = self.base_names[best_match_index]
                    else:
                        name = ""Unknown""

                    top, right, bottom, left = face_location
                    cv2.rectangle(self.frame_one, (left, top), (right, bottom), (0, 255, 0), 2)
                    cv2.putText(self.frame_one, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

                cv2.imshow(""Face Recognition"", self.frame_one)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

        def run(self):
            self.mark_faces()

    # Execute Step 5
    face_recognition = FaceRecognition(known_faces)
    face_recognition.run()

mark_faces_in_video()","import cv2
import numpy
import face_recognition

# Sample dataset for step 5: Known faces
known_faces = [numpy.random.rand(128), numpy.random.rand(128)]  # Random face encodings for testing

# Step 5: Mark recognized and unrecognized faces in the video feed
def mark_faces_in_video():
    class FaceRecognition:
        def __init__(self, known_encoded_faces):


        def mark_faces(self):


        def run(self):
)

    # Execute Step 5","import cv2

# Step 6: Handle exiting and resource cleanup
def handle_exit_cleanup():
    class FaceRecognition:
        def __init__(self):
            self.camera = cv2.VideoCapture(0, cv2.CAP_DSHOW)
            self.video_capture = None

        def exit_protocol(self):
            self.camera.release()
            if self.video_capture:
                self.video_capture.release()
            cv2.destroyAllWindows()
            print(""Resources released and cleanup done"")

        def run(self):
            self.exit_protocol()

    # Execute Step 6
    face_recognition = FaceRecognition()
    face_recognition.run()

handle_exit_cleanup()","import cv2

# Step 6: Handle exiting and resource cleanup
def handle_exit_cleanup():


        def exit_protocol(self):


        def run(self):


    # Execute Step 6","import os
import winsound

import cv2
import face_recognition
import numpy


class FaceRecognition:

    def __init__(self):
        self.images = []
        self.base_names = []
        self.encoded_faces = []
        self.path = 'images'
        print('please wait my dummy program is busy encoding...')
        self.camera = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        self.known_encoded_faces = []
        self.frame_one = None
        self.video_capture = None

    def save_video_stream(self):
        os.makedirs('Security Camera Video', exist_ok=True)
        name = 'Video1.avi'
        if name in os.listdir('Security Camera Video'):
            name = f'{os.path.splitext(name)[0][:-1]}' \
                   f'{len(os.listdir(""Security Camera Video"")) + 1}' \
                   f'{os.path.splitext(name)[1]}'
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        self.video_capture = cv2.VideoWriter(os.path.join('Security Camera Video', name),
                                             fourcc, 20.0, (640, 480))
        print(f'{name} saving ...')

    def known_image_folder(self):
        for image in os.listdir(path=self.path):
            if not (image.endswith('.jpeg') or image.endswith('.JPG')
                    or image.endswith('.jpg') or image.endswith(
                    '.png') or image.endswith('.PNG')):
                continue
            img = cv2.imread(f""{self.path}/{image}"")
            self.images += [img]
            self.base_names += [os.path.splitext(image)[0]]

    def encode_face(self, images):
        for image in images:
            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            face_encoding = face_recognition.face_encodings(image_rgb)[0]
            self.encoded_faces += [face_encoding]
        return self.encoded_faces

    def run(self):
        self.known_image_folder()
        self.known_encoded_faces = self.encode_face(self.images)
        print(""Encoding Complete, camera opening..."")
        self.save_video_stream()
        self.open_camera_tasks()

    def open_camera_tasks(self):
        while self.camera.isOpened():
            _, self.frame_one = self.camera.read()
            self.detect_faces()
            self.video_capture.write(self.frame_one)
            cv2.imshow(""Press 'c' to capture image, q to quit."", self.frame_one)
            key = cv2.cv2.waitKey(1)
            if key == ord('q') or key == 27:
                self.exit_protocol()
            elif key == ord('c') or key == 32:
                self.save_image_capture()

    def save_image_capture(self):
        os.makedirs('Security Camera Images', exist_ok=True)
        name = 'Image1.png'
        if name in os.listdir('Security Camera Images'):
            name = f""{os.path.splitext(name)[0][:-1]}\
            {len(os.listdir('Security Camera Images')) + 1}"" \
                   f""{os.path.splitext(name)[1]}""
        cv2.imwrite(os.path.join('Security Camera Images', name), self.frame_one)
        print(f""{name} captured successfully."")

    def detect_faces(self):
        frame_one_rgb = cv2.cvtColor(self.frame_one, cv2.COLOR_BGR2RGB)
        face_location = face_recognition.face_locations(frame_one_rgb)
        face_encoding = face_recognition.face_encodings(frame_one_rgb, face_location)
        for face_encoded, face_located in zip(face_encoding, face_location):
            self.face_comparison(face_encoded, face_located)

    def face_comparison(self, face_encoded, face_located):
        compare_face = face_recognition.compare_faces(self.known_encoded_faces, face_encoded)
        face_distance = face_recognition.face_distance(self.known_encoded_faces, face_encoded)
        distance_index = numpy.argmin(face_distance)
        if compare_face[distance_index]:
            name = self.base_names[int(distance_index)].title()
            x, y, w, h = face_located
            cv2.rectangle(self.frame_one, (h, x), (y, w), (0, 255, 0), 2)
            cv2.rectangle(self.frame_one, (h, x-40), (y, w), (0, 255, 0), 2)
            cv2.putText(self.frame_one, name, (
                h + 30, x - 10), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (0, 255, 255), 2)
        else:
            x, y, w, h = face_located
            cv2.rectangle(self.frame_one, (h, x), (y, w), (0, 255, 0), 2)
            cv2.rectangle(self.frame_one, (h, x - 40), (y, w), (0, 255, 0), 2)
            cv2.putText(self.frame_one, ""Unknown"", (h, x - 10),
                        cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (0, 255, 255),
                        2)
            winsound.PlaySound('alert.wav', winsound.SND_ASYNC)
            print(""Intruder in the house."")

    def exit_protocol(self):
        self.camera.release()
        self.video_capture.release()
        cv2.destroyAllWindows()


if __name__ == ""__main__"":
    FaceRecognition().run()"
Games,Creating game (Brick Breaker Game),"This project is a simple brick-breaking game developed using the Pygame 
library. The player controls a paddle to bounce a ball and break bricks.
 The game includes functionality for ball movement, brick collision 
detection, score tracking, and handling game states such as win or game 
over.","1. Initialize the game window and settings
2. Define game objects: Ball, Bricks, and Paddle
3. Implement the Ball's motion and collision detection
4. Implement the Paddle's movement
5. Draw game objects and handle game states
6. Create the main game loop",6,"import pygame
from pygame.locals import *

# Step 1: Initialize the game window and settings
def initialize_game():
    # Initialize Pygame and set up the game window
    pygame.init()
    window_width = 500
    window_height = 500
    window = pygame.display.set_mode((window_width, window_height))
    pygame.display.set_caption('Brickstroy')
    font = pygame.font.SysFont('Arial', 30)
    return window, font

# Execute Step 1
window, font = initialize_game()","import pygame
from pygame.locals import *

# Step 1: Initialize the game window and settings
def initialize_game():
    # Initialize Pygame and set up the game window


# Execute Step 1","import pygame
from pygame.locals import *

# Step 2: Define game objects: Ball, Bricks, and Paddle
def define_game_objects():
    # Define the Ball class
    class Ball:
        def __init__(self, x, y):
            # Initialize the ball with position, speed, and other properties
            self.radius = 10
            self.x = x - self.radius
            self.y = y - 50
            self.rect = Rect(self.x, self.y, self.radius * 2, self.radius * 2)
            self.x_speed = 4
            self.y_speed = -4
            self.max_speed = 5
            self.game_over = 0

    # Define the Block class
    class Block:
        def __init__(self, window_width, window_height, rows, columns):
            # Initialize the block with dimensions and grid properties
            self.width = window_width // columns
            self.height = 40
            self.rows = rows
            self.columns = columns
            self.bricks = []

        def make_brick(self):
            # Create a grid of bricks with different power levels
            for row in range(self.rows):
                brick_row = []
                for col in range(self.columns):
                    x_brick = col * self.width
                    y_brick = row * self.height
                    rect = pygame.Rect(x_brick, y_brick, self.width, self.height)
                    if row < 2:
                        power = 3
                    elif row < 4:
                        power = 2
                    else:
                        power = 1
                    brick_row.append([rect, power])
                self.bricks.append(brick_row)

    # Define the Base class
    class Base:
        def __init__(self, window_width, window_height, columns):
            # Initialize the base pad with position, size, and speed
            self.width = window_width // columns
            self.height = 20
            self.x = (window_width // 2) - (self.width // 2)
            self.y = window_height - (self.height * 2)
            self.speed = 8
            self.rect = Rect(self.x, self.y, self.width, self.height)
            self.direction = 0

    return Ball, Block, Base

# Execute Step 2
Ball, Block, Base = define_game_objects()","import pygame
from pygame.locals import *

# Step 2: Define game objects: Ball, Bricks, and Paddle
def define_game_objects():
    # Define the Ball class


    # Define the Block class
    class Block:
        def __init__(self, window_width, window_height, rows, columns):
            # Initialize the block with dimensions and grid properties


        def make_brick(self):
            # Create a grid of bricks with different power levels


    # Define the Base class
    class Base:
        def __init__(self, window_width, window_height, columns):
            # Initialize the base pad with position, size, and speed


    return Ball, Block, Base

# Execute Step 2","import pygame
from pygame.locals import *
import numpy as np

# Sample dataset for step 3: Bricks array
sample_bricks = [
    [pygame.Rect(0, 0, 80, 40), 1], [pygame.Rect(80, 0, 80, 40), 2], [pygame.Rect(160, 0, 80, 40), 3]
]

# Step 3: Implement the Ball's motion and collision detection
def ball_motion_and_collision(ball, bricks, window_width, window_height, user_basepad):
    # Move the ball and handle collisions with walls, bricks, and the paddle
    collision_threshold = 5
    for row in bricks:
        for item in row:
            if ball.rect.colliderect(item[0]):
                if abs(ball.rect.bottom - item[0].top) < collision_threshold and ball.y_speed > 0:
                    ball.y_speed *= -1
                if abs(ball.rect.top - item[0].bottom) < collision_threshold and ball.y_speed < 0:
                    ball.y_speed *= -1
                if abs(ball.rect.right - item[0].left) < collision_threshold and ball.x_speed > 0:
                    ball.x_speed *= -1
                if abs(ball.rect.left - item[0].right) < collision_threshold and ball.x_speed < 0:
                    ball.x_speed *= -1
                if item[1] > 1:
                    item[1] -= 1
                else:
                    item[0] = (0, 0, 0, 0)

    if ball.rect.left < 0 or ball.rect.right > window_width:
        ball.x_speed *= -1
    if ball.rect.top < 0:
        ball.y_speed *= -1
    if ball.rect.bottom > window_height:
        ball.game_over = -1
    if ball.rect.colliderect(user_basepad.rect):
        if abs(ball.rect.bottom - user_basepad.rect.top) < collision_threshold and ball.y_speed > 0:
            ball.y_speed *= -1
            ball.x_speed += user_basepad.direction
            if ball.x_speed > ball.max_speed:
                ball.x_speed = ball.max_speed
            elif ball.x_speed < 0 and ball.x_speed < -ball.max_speed:
                ball.x_speed = -ball.max_speed
            else:
                ball.x_speed *= -1

    ball.rect.x += ball.x_speed
    ball.rect.y += ball.y_speed

    return ball.game_over

# Execute Step 3
ball = Ball(250, 450)
base_pad = Base(500, 500, 6)
ball_motion_and_collision(ball, [sample_bricks], 500, 500, base_pad)","import pygame
from pygame.locals import *
import numpy as np

# Sample dataset for step 3: Bricks array


# Step 3: Implement the Ball's motion and collision detection
def ball_motion_and_collision(ball, bricks, window_width, window_height, user_basepad):
    # Move the ball and handle collisions with walls, bricks, and the paddle




# Execute Step 3
ball = Ball(250, 450)
base_pad = Base(500, 500, 6)
ball_motion_and_collision(ball, [sample_bricks], 500, 500, base_pad)","import pygame
from pygame.locals import *

# Step 4: Implement the Paddle's movement
def paddle_movement(base_pad):
    # Move the paddle based on user input
    base_pad.direction = 0
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and base_pad.rect.left > 0:
        base_pad.rect.x -= base_pad.speed
        base_pad.direction = -1
    if keys[pygame.K_RIGHT] and base_pad.rect.right < 500:
        base_pad.rect.x += base_pad.speed
        base_pad.direction = 1

# Execute Step 4
base_pad = Base(500, 500, 6)
paddle_movement(base_pad)","import pygame
from pygame.locals import *

# Step 4: Implement the Paddle's movement
def paddle_movement(base_pad):
    # Move the paddle based on user input


# Execute Step 4","import pygame
from pygame.locals import *

# Step 5: Draw game objects and handle game states
def draw_objects_and_handle_states(window, ball, base_pad, bricks, font, game_over):
    # Draw the ball, bricks, and paddle; handle game over states
    window.fill((0, 0, 0))  # Clear screen
    for row in bricks:
        for brick in row:
            if brick[1] == 3:
                color = (255, 100, 10)
            elif brick[1] == 2:
                color = (255, 255, 255)
            else:
                color = (0, 255, 0)
            pygame.draw.rect(window, color, brick[0])
            pygame.draw.rect(window, (0, 0, 0), brick[0], 1)

    pygame.draw.circle(window, (0, 0, 255), (ball.rect.x + ball.radius, ball.rect.y + ball.radius), ball.radius)
    pygame.draw.circle(window, (255, 255, 255), (ball.rect.x + ball.radius, ball.rect.y + ball.radius), ball.radius, 1)

    pygame.draw.rect(window, (0, 0, 255), base_pad.rect)
    pygame.draw.rect(window, (255, 255, 255), base_pad.rect, 1)

    if game_over == 1:
        text = font.render('YOU WON!', True, (255, 255, 255))
        window.blit(text, (180, 250))
    elif game_over == -1:
        text = font.render('GAME OVER!', True, (255, 255, 255))
        window.blit(text, (180, 250))

    pygame.display.update()

# Execute Step 5
window, font = initialize_game()
ball = Ball(250, 450)
base_pad = Base(500, 500, 6)
block = Block(500, 500, 6, 6)
block.make_brick()
draw_objects_and_handle_states(window, ball, base_pad, block.bricks, font, 0)","import pygame
from pygame.locals import *

# Step 5: Draw game objects and handle game states

    # Draw the ball, bricks, and paddle; handle game over states


    pygame.display.update()

# Execute Step 5
window, font = initialize_game()
ball = Ball(250, 450)
base_pad = Base(500, 500, 6)
block = Block(500, 500, 6, 6)
block.make_brick()
draw_objects_and_handle_states(window, ball, base_pad, block.bricks, font, 0)","import pygame
from pygame.locals import *

# Step 6: Create the main game loop
def main_game_loop():
    # Set up the game loop","import pygame
from pygame.locals import *

# Step 6: Create the main game loop
def main_game_loop():
    # Set up the game loop","
import pygame
from pygame.locals import *

pygame.init()

'''
Defining gaming window size and font
'''
Window_width = 500
Window_height = 500

window = pygame.display.set_mode((Window_width, Window_height))
pygame.display.set_caption('Brickstroy')


font = pygame.font.SysFont('Arial', 30)

'''
Defining Bricks colour
'''
O_brick = (255, 100, 10)
w_brick = (255, 255, 255)
g_brick = (0, 255, 0)
black = (0, 0, 0)


game_rows = 6
game_coloumns = 6
clock = pygame.time.Clock()
frame_rate = 60
my_ball = False
game_over = 0
score = 0


class Ball():
    '''
Creating ball for the game
'''

    def __init__(self, x, y):

        self.radius = 10
        self.x = x - self.radius
        self.y = y - 50
        self.rect = Rect(self.x, self.y, self.radius * 2, self.radius * 2)
        self.x_speed = 4
        self.y_speed = -4
        self.max_speed = 5
        self.game_over = 0

    def motion(self):
        collision_threshold = 5
        block_object = Block.bricks
        brick_destroyed = 1
        count_row = 0
        for row in block_object:
            count_item = 0
            for item in row:
                # check collision with gaming window
                if self.rect.colliderect(item[0]):
                    if abs(self.rect.bottom - item[0].top) < collision_threshold and self.y_speed > 0:
                        self.y_speed *= -1

                    if abs(self.rect.top - item[0].bottom) < collision_threshold and self.y_speed < 0:
                        self.y_speed *= -1
                    if abs(self.rect.right - item[0].left) < collision_threshold and self.x_speed > 0:
                        self.x_speed *= -1
                    if abs(self.rect.left - item[0].right) < collision_threshold and self.x_speed < 0:
                        self.x_speed *= -1

                    if block_object[count_row][count_item][1] > 1:
                        block_object[count_row][count_item][1] -= 1
                    else:
                        block_object[count_row][count_item][0] = (0, 0, 0, 0)

                if block_object[count_row][count_item][0] != (0, 0, 0, 0):
                    brick_destroyed = 0
                count_item += 1
            count_row += 1

        if brick_destroyed == 1:
            self.game_over = 1

        # check for collision with bricks
        if self.rect.left < 0 or self.rect.right > Window_width:
            self.x_speed *= -1

        if self.rect.top < 0:
            self.y_speed *= -1
        if self.rect.bottom > Window_height:
            self.game_over = -1

        # check for collission with base
        if self.rect.colliderect(user_basepad):
            if abs(self.rect.bottom - user_basepad.rect.top) < collision_threshold and self.y_speed > 0:
                self.y_speed *= -1
                self.x_speed += user_basepad.direction
                if self.x_speed > self.max_speed:
                    self.x_speed = self.max_speed
                elif self.x_speed < 0 and self.x_speed < -self.max_speed:
                    self.x_speed = -self.max_speed
                else:
                    self.x_speed *= -1

        self.rect.x += self.x_speed
        self.rect.y += self.y_speed

        return self.game_over

    def draw(self):
        pygame.draw.circle(window, (0, 0, 255), (self.rect.x +
                           self.radius, self.rect.y + self.radius), self.radius)
        pygame.draw.circle(window, (255, 255, 255), (self.rect.x +
                           self.radius, self.rect.y + self.radius), self.radius, 1)

    def reset(self, x, y):

        self.radius = 10
        self.x = x - self.radius
        self.y = y - 50
        self.rect = Rect(self.x, self.y, self.radius * 2, self.radius * 2)
        self.x_speed = 4
        self.y_speed = -4
        self.max_speed = 5
        self.game_over = 0


class Block():
    '''
This class will help me create Blocks/bricks of the game
'''

    def __init__(self):
        self.width = Window_width // game_coloumns
        self.height = 40

    def make_brick(self):
        self.bricks = []
        single_brick = []
        for row in range(game_rows):

            brick_row = []

            for coloumn in range(game_coloumns):

                x_brick = coloumn * self.width
                y_brick = row * self.height
                rect = pygame.Rect(x_brick, y_brick, self.width, self.height)
                # assign power to the bricks based on row
                if row < 2:
                    power = 3
                elif row < 4:
                    power = 2
                elif row < 6:
                    power = 1

                single_brick = [rect, power]

                brick_row.append(single_brick)

            self.bricks.append(brick_row)

    def draw_brick(self):
        for row in self.bricks:
            for brick in row:

                if brick[1] == 3:
                    brick_colour = O_brick
                elif brick[1] == 2:
                    brick_colour = w_brick
                elif brick[1] == 1:
                    brick_colour = g_brick
                pygame.draw.rect(window, brick_colour, brick[0])
                pygame.draw.rect(window, black, (brick[0]), 1)


class base():
    '''
This class is to create the base pad of the game
'''

    def __init__(self):

        self.height = 20
        self.width = int(Window_width / game_coloumns)
        self.x = int((Window_width / 2) - (self.width / 2))
        self.y = Window_height - (self.height * 2)
        self.speed = 8
        self.rect = Rect(self.x, self.y, self.width, self.height)
        self.direction = 0

    def slide(self):

        self.direction = 0
        key = pygame.key.get_pressed()
        if key[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= self.speed
            self.direction = -1
        if key[pygame.K_RIGHT] and self.rect.right < Window_width:
            self.rect.x += self.speed
            self.direction = 1

    def draw(self):
        pygame.draw.rect(window, (0, 0, 255), self.rect)
        pygame.draw.rect(window, (255, 255, 255), self.rect, 1)

    def reset(self):

        self.height = 20
        self.width = int(Window_width / game_coloumns)
        self.x = int((Window_width / 2) - (self.width / 2))
        self.y = Window_height - (self.height * 2)
        self.speed = 8
        self.rect = Rect(self.x, self.y, self.width, self.height)
        self.direction = 0


def draw_text(text, font, w_brick, x, y):
    '''
    Funtion for showing text in gaming window
    '''
    image = font.render(text, True, w_brick)
    window.blit(image, (x, y))


Block = Block()
# Creating Brick
Block.make_brick()
# Defining base pad
user_basepad = base()
ball = Ball(user_basepad.x + (user_basepad.width // 2),
            user_basepad.y - user_basepad.height)   # Defining ball

game = True
while game:

    clock.tick(frame_rate)
    window.fill(black)                           # Gaming window Background
    Block.draw_brick()                           # Drawing bricks
    user_basepad.draw()                          # Drawing user basepad
    ball.draw()                                  # Drawing gaming ball

    if my_ball:
        user_basepad.slide()
        game_over = ball.motion()
        if game_over != 0:
            my_ball = False

    # Game Info on the gaming window
    if not my_ball:
        if game_over == 0:
            draw_text('CLICK ANYWHERE TO START', font,
                      w_brick, 90, Window_height // 2 + 100)
        elif game_over == 1:
            draw_text('YOU WON!', font, w_brick, 180, Window_height // 2 + 50)
            draw_text('CLICK ANYWHERE TO RESTART', font,
                      w_brick, 90, Window_height // 2 + 100)
        elif game_over == -1:
            draw_text('GAME OVER!', font, w_brick,
                      180, Window_height // 2 + 50)
            draw_text('CLICK ANYWHERE TO RESTART', font,
                      w_brick, 90, Window_height // 2 + 100)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game = False
        if event.type == pygame.MOUSEBUTTONDOWN and my_ball == False:
            my_ball = True
            ball.reset(user_basepad.x + (user_basepad.width // 2),
                       user_basepad.y - user_basepad.height)
            user_basepad.reset()
            Block.make_brick()

    pygame.display.update()

pygame.quit()"
advanced topic ,Creating a hand painter,"This project is a drawing application that uses computer vision to 
detect hand gestures for drawing on a canvas. The application employs 
the Mediapipe library for hand tracking, Pygame for rendering the 
drawing canvas, and OpenCV for capturing video input. The user can draw 
on the canvas by using their index finger and take screenshots by making
 specific gestures.","1. Initialize Video Capture and Hand Detection
2. Define Drawing Functions
3. Handle Hand Landmarks and Gestures
4. Implement Drawing on Canvas
5. Handle Color Selection and Canvas Clear
6. Implement Screenshot Functionality",6,"import cv2
import mediapipe as mp

# Step 1: Initialize Video Capture and Hand Detection
def initialize_video_hand_detection():
    # Initialize video capture and Mediapipe hand detection
    camera = cv2.VideoCapture(0)
    hands = mp.solutions.hands.Hands(max_num_hands=1, min_tracking_confidence=0.9)
    return camera, hands

# Execute Step 1
camera, hands = initialize_video_hand_detection()","import cv2
import mediapipe as mp

# Step 1: Initialize Video Capture and Hand Detection
def initialize_video_hand_detection():
    # Initialize video capture and Mediapipe hand detection

# Execute Step 1","import pygame

# Step 2: Define Drawing Functions
def define_drawing_functions():
    # Define functions to handle drawing on the Pygame window
    def generate_rainbow(rainbow):
        # Cycle through rainbow colors
        it = iter(rainbow)
        while True:
            yield next(it)
            try:
                yield next(it)
            except StopIteration:
                it = iter(rainbow)

    def draw_circle(window, color, position, radius):
        # Draw a circle on the Pygame window
        pygame.draw.circle(window, color, position, radius)

    return generate_rainbow, draw_circle

# Execute Step 2
generate_rainbow, draw_circle = define_drawing_functions()","import pygame

# Step 2: Define Drawing Functions
def define_drawing_functions():
    # Define functions to handle drawing on the Pygame window
    def generate_rainbow(rainbow):
        # Cycle through rainbow colors


    def draw_circle(window, color, position, radius):
        # Draw a circle on the Pygame window


    return generate_rainbow, draw_circle

# Execute Step 2","import mediapipe.python.solutions.drawing_utils as mp_drawing
import numpy as np

# Sample dataset for step 3: Sample frame and landmarks
sample_frame = np.zeros((100, 100, 3), dtype=np.uint8)
sample_landmarks = mp.solutions.hands.HandLandmark

# Step 3: Handle Hand Landmarks and Gestures
def handle_hand_landmarks_gestures(hands, frame):
    # Process frame for hand landmarks and handle gestures
    imgRGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)
    if results.multi_hand_landmarks:
        for handlms in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, handlms, mp.solutions.hands.HAND_CONNECTIONS)
            # Example: Print coordinates of index finger tip
            index_tip = handlms.landmark[sample_landmarks.INDEX_FINGER_TIP]
            print(f""Index Finger Tip: ({index_tip.x}, {index_tip.y})"")
    return frame

# Execute Step 3
frame = handle_hand_landmarks_gestures(hands, sample_frame)","import mediapipe.python.solutions.drawing_utils as mp_drawing
import numpy as np

# Sample dataset for step 3: Sample frame and landmarks

# Step 3: Handle Hand Landmarks and Gestures
def handle_hand_landmarks_gestures(hands, frame):
    # Process frame for hand landmarks and handle gestures


# Execute Step 3","import pygame

# Sample dataset for step 4: Sample window and color
WIDTH, HEIGHT = 640, 480
window = pygame.display.set_mode((WIDTH, HEIGHT))
color = (255, 0, 0)

# Step 4: Implement Drawing on Canvas
def draw_on_canvas(window, color, position):
    # Draw a circle on the canvas at the specified position
    pygame.draw.circle(window, color, position, 5)

# Execute Step 4
sample_position = (100, 100)
draw_on_canvas(window, color, sample_position)
pygame.display.update()","import pygame

# Sample dataset for step 4: Sample window and color
WIDTH, HEIGHT = 640, 480


# Step 4: Implement Drawing on Canvas
def draw_on_canvas(window, color, position):
    # Draw a circle on the canvas at the specified position


# Execute Step 4","import pygame

# Step 5: Handle Color Selection and Canvas Clear
def handle_color_selection_and_clear(window, rainbow_gen):
    # Handle user input for color selection and canvas clearing
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_c:
                window.fill((255, 255, 255))
            elif event.key == pygame.K_r:
                color = (255, 0, 0)
            elif event.key == pygame.K_g:
                color = (0, 255, 0)
            elif event.key == pygame.K_b:
                color = (0, 0, 255)
            elif event.key == pygame.K_l:
                color = next(rainbow_gen)
    return color

# Execute Step 5
rainbow = [(148, 0, 211), (75, 0, 130), (0, 0, 255), (0, 255, 0), (255, 255, 0), (255, 127, 0), (255, 0, 0)]
rainbow_gen = generate_rainbow(rainbow)
color = handle_color_selection_and_clear(window, rainbow_gen)
pygame.display.update()","import pygame

# Step 5: Handle Color Selection and Canvas Clear
def handle_color_selection_and_clear(window, rainbow_gen):
    # Handle user input for color selection and canvas clearing


# Execute Step 5","import pyautogui
import os

# Sample dataset for step 6: Desktop path
desktop = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
ss_count = 1

# Step 6: Implement Screenshot Functionality
def take_screenshot():
    # Capture and save a screenshot
    global ss_count
    image = pyautogui.screenshot()
    image.save(os.path.join(desktop, f""screenshot{ss_count}.png""))
    ss_count += 1

# Execute Step 6
take_screenshot()","import pyautogui
import os

# Sample dataset for step 6: Desktop path


# Step 6: Implement Screenshot Functionality
def take_screenshot():
    # Capture and save a screenshot


# Execute Step 6","import time

start = time.time()
from cv2 import VideoCapture, flip, COLOR_BGR2RGB, cvtColor, circle, FILLED, destroyAllWindows, imshow, CAP_PROP_FRAME_WIDTH, CAP_PROP_FRAME_HEIGHT
print(""Importing cv stuff"")
import mediapipe.python.solutions.drawing_utils as mp_drawing
print(""Importing hand module  stuff"")

import mediapipe.python.solutions.hands as mp_hands
print(""Importing more hand module  stuff"")

import pygame
print(""Importing pygame"")

from math import sqrt
print(""Importing math"")

import pyautogui
import os
print(""Importing other stuff"")


end = time.time()
print(end - start)

# 0.75s initial
# 0.73s final
# 3.5 x faster


# 640, 480
WIDTH, HEIGHT = 1000, 1000

# COLOURS
RED = (255, 0, 0)
VIOLET = (148, 0, 211)
INDIGO = (75, 0, 130)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
ORANGE = (255, 127, 0)
WHITE = (255, 255, 255)

color = RED
rainbow = [VIOLET, INDIGO, BLUE, GREEN, YELLOW, ORANGE, RED]

desktop = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
ss_count = 1

run = True

pygame.init()

window = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption(""Drawing Board"")

hands = mp_hands.Hands(max_num_hands=1, min_tracking_confidence=0.9)
camera = VideoCapture(0)

camera.set(CAP_PROP_FRAME_WIDTH, WIDTH)
camera.set(CAP_PROP_FRAME_HEIGHT, HEIGHT)




def generate_rainbow(rainbow):
    it = iter(rainbow)
    while True:
        yield next(it)
        try:
            yield next(it)
        except StopIteration:
            it = iter(rainbow)


def convert_to_pixel_coordinates():
    normalized_landmark = handlms.landmark[id]
    pixel_coordinate = mp_drawing._normalized_to_pixel_coordinates(normalized_landmark.x,
                                                                   normalized_landmark.y, width, height)
    return pixel_coordinate


gen_rainbow = generate_rainbow(rainbow)
window.fill(WHITE)

while run:
    ret, frame = camera.read()
    frame = flip(frame, 1)
    imgRGB = cvtColor(frame, COLOR_BGR2RGB)
    results = hands.process(imgRGB)
    hand = results.multi_hand_landmarks

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
    keys = pygame.key.get_pressed()
    if keys[pygame.K_q]:
        run = False
    if keys[pygame.K_c]:
        window.fill(WHITE)
    if keys[pygame.K_r]:
        color = RED
    if keys[pygame.K_b]:
        color = BLUE
    if keys[pygame.K_y]:
        color = YELLOW
    if keys[pygame.K_g]:
        color = GREEN
    if keys[pygame.K_o]:
        color = ORANGE
    if keys[pygame.K_l]:
        color = next(gen_rainbow)

    if hand:
        for handlms in hand:
            for id, lm in enumerate(handlms.landmark):
                height, width, c = frame.shape
                cx, cy = int(lm.x * width), int(lm.y * height)

                if id == 4:
                    circle(frame, (cx, cy), 15, (255, 0, 0), FILLED)
                    thumb_coordinates = convert_to_pixel_coordinates()

                if id == 8:
                    circle(frame, (cx, cy), 15, (255, 0, 255), FILLED)
                    index_coordinates = convert_to_pixel_coordinates()

                    try:
                        x_distance = index_coordinates[0] - thumb_coordinates[0]
                        y_distance = index_coordinates[1] - thumb_coordinates[1]
                        distance = sqrt((x_distance ** 2) + (y_distance ** 2))

                        # try:
                        if 0 <= distance <= 20:
                            pygame.draw.circle(window, color,
                                               (index_coordinates[0], index_coordinates[1]), 5)
                    except TypeError:
                        print(""ERROR"")

                if id == 12:
                    circle(frame, (cx, cy), 15, (255, 255, 0), FILLED)
                    middle_tip_coordinates = convert_to_pixel_coordinates()

                    try:

                        x_middle_distance = index_coordinates[0] - middle_tip_coordinates[0]
                        y_middle_distance = index_coordinates[1] - middle_tip_coordinates[1]
                        distance_middle_to_index = distance = sqrt(
                            (x_middle_distance ** 2) + (y_middle_distance ** 2))

                        if 0 <= distance_middle_to_index <= 20:
                            print(desktop)
                            image = pyautogui.screenshot()
                            image.save(desktop + f""/screenshot{ss_count}.png"")
                            ss_count += 1

                    except TypeError:
                        print(""error"")

                mp_drawing.draw_landmarks(frame, handlms, mp_hands.HAND_CONNECTIONS)

    pygame.display.update()
    imshow(""Window"", frame)

camera.release()
destroyAllWindows()
pygame.quit()"
Basics,Creating image inverter,"This project is an image inversion script that processes input image 
files to create inverted versions. The script uses the Python Imaging 
Library (PIL) to invert the colors of the images and save the output 
with a new filename. Additionally, it includes verbose mode to provide 
feedback about the process.","1. Check for Input Parameters
2. Parse Command-Line Arguments
3. Process Each Image File
4. Handle Image Inversion
5. Save Inverted Image
6. Implement Verbose Output",6,"import sys

# Step 1: Check for Input Parameters
def check_input():
    """"""Checks if the script is called with no input parameters.""""""
    if len(sys.argv) == 1:
        print(""Please provide image files to operate on!"")
        sys.exit(1)

# Execute Step 1
check_input()","import sys

# Step 1: Check for Input Parameters
def check_input():
    """"""Checks if the script is called with no input parameters.""""""


# Execute Step 1","# Step 2: Parse Command-Line Arguments
def parse_arguments():
    """"""Parses command-line arguments for verbose mode.""""""
    verbose_enabled = False
    if (""-v"" in sys.argv) or (""--verbose"" in sys.argv):
        verbose_enabled = True
    return verbose_enabled

# Execute Step 2
verbose_enabled = parse_arguments()","# Step 2: Parse Command-Line Arguments
def parse_arguments():
    """"""Parses command-line arguments for verbose mode.""""""


# Execute Step 2","import os

# Sample dataset for step 3: Sample command-line arguments
sys.argv = ['script.py', 'image1.jpg', '-v', 'image2.png']

# Step 3: Process Each Image File
def process_image_files():
    """"""Processes each image file passed as a command-line argument.""""""
    image_files = []
    for i, file in enumerate(sys.argv):
        if i == 0 or file in [""-v"", ""--verbose""]:
            continue
        image_files.append(file)
    return image_files

# Execute Step 3
image_files = process_image_files()
print(image_files)  # Output: ['image1.jpg', 'image2.png']","import os

# Sample dataset for step 3: Sample command-line arguments


# Step 3: Process Each Image File
def process_image_files():
    """"""Processes each image file passed as a command-line argument.""""""


# Execute Step 3","from PIL import Image, ImageOps, UnidentifiedImageError

# Sample dataset for step 4: Sample image file
sample_image_file = 'sample_image.jpg'

# Step 4: Handle Image Inversion
def invert_image(file):
    """"""Inverts the colors of the given image file.""""""
    try:
        with Image.open(file) as image:
            inverted_image = ImageOps.invert(image)
            return inverted_image
    except UnidentifiedImageError:
        print(f""{file} is not supported, please provide a supported file type."")
        return None

# Execute Step 4
inverted_image = invert_image(sample_image_file)
if inverted_image:
    inverted_image.show()  # Display the inverted image","from PIL import Image, ImageOps, UnidentifiedImageError

# Sample dataset for step 4: Sample image file


# Step 4: Handle Image Inversion
def invert_image(file):
    """"""Inverts the colors of the given image file.""""""


# Execute Step 4","import os

# Sample dataset for step 5: Sample inverted image and file path
sample_image_path_no_ext = 'sample_image'
sample_extension = '.jpg'

# Step 5: Save Inverted Image
def save_inverted_image(inverted_image, image_path_no_ext, extension):
    """"""Saves the inverted image with a new filename.""""""
    new_path_with_ext = image_path_no_ext + ""_inverted"" + extension
    inverted_image.save(new_path_with_ext)
    return new_path_with_ext

# Execute Step 5
new_path_with_ext = save_inverted_image(inverted_image, sample_image_path_no_ext, sample_extension)
print(new_path_with_ext)  # Output: 'sample_image_inverted.jpg'","import os

# Sample dataset for step 5: Sample inverted image and file path


# Step 5: Save Inverted Image
def save_inverted_image(inverted_image, image_path_no_ext, extension):
    """"""Saves the inverted image with a new filename.""""""


# Execute Step 5","# Sample dataset for step 6: Sample file and new path
sample_file = 'sample_image.jpg'
sample_new_path_with_ext = 'sample_image_inverted.jpg'

# Step 6: Implement Verbose Output
def verbose_output(verbose_enabled, file, new_path_with_ext):
    """"""Prints verbose output if enabled.""""""
    if verbose_enabled:
        print(f""Successfully inverted {file}\n{new_path_with_ext} is generated.\n"")

# Execute Step 6
verbose_output(verbose_enabled, sample_file, sample_new_path_with_ext)","# Sample dataset for step 6: Sample file and new path
sample_file = 'sample_image.jpg'
sample_new_path_with_ext = 'sample_image_inverted.jpg'

# Step 6: Implement Verbose Output
def verbose_output(verbose_enabled, file, new_path_with_ext):


# Execute Step 6","#!/usr/bin/env python3

from PIL import Image, ImageOps, UnidentifiedImageError
import sys, os

def check_input():
 """""" Checks if the script is called with no input parameters. """"""
 if len(sys.argv) == 1:
  print(""Please provide image files to operate on!"")
  sys.exit(1)

def main():
 """""" The main function """"""
 check_input()

 verbose_enabled = False
 if (""-v"" in sys.argv)  or (""--verbose"" in sys.argv):
  verbose_enabled = True

 i = 0
 for file in sys.argv:
  # To ignore the first parameter -> the script call + -v + --verbose
  if i == 0 or sys.argv[i] == ""-v"" or sys.argv[i] == ""--verbose"":
   i = i + 1
   continue

  image_path_no_ext, extension = os.path.splitext(file)

  try:
   with Image.open(file) as image:
    new_path_with_ext = image_path_no_ext + ""_inverted"" + extension
    ImageOps.invert(image).save(new_path_with_ext)
    if verbose_enabled:
     print(""Successfully inverted "" + file + ""\n"" + new_path_with_ext + "" is generated.\n"")
  except UnidentifiedImageError:
   print(file + "" is not suppotred, please provide a supported file type."")
  i = i + 1

if __name__ == '__main__':
 main()"
Games,Creating game (snake),"This project implements a simple Snake game using Python's Turtle graphics module. The game involves moving a snake around the screen, consuming food, and growing in length while avoiding collisions with the walls and the snake's own body. The score increases as the snake consumes food, and the game maintains a high score.","1. Initialize Game Screen
2. Create Snake and Food Objects
3. Define Movement Functions
4. Handle Key Press Events
5. Update Game State
6. Main Game Loop",6,"import turtle

# Step 1: Initialize Game Screen
def initialize_screen():
    """"""Initializes the game screen.""""""
    wn = turtle.Screen()
    wn.title(""SNAKE GAME"")
    wn.bgcolor(""black"")
    wn.setup(width=600, height=600)
    wn.tracer(0)
    return wn

# Execute Step 1
wn = initialize_screen()","import turtle

# Step 1: Initialize Game Screen
def initialize_screen():
    """"""Initializes the game screen.""""""","# Step 2: Create Snake and Food Objects
def create_snake_and_food():
    """"""Creates the snake head and food objects.""""""
    head = turtle.Turtle()
    head.shape(""square"")
    head.color(""green"")
    head.penup()
    head.goto(0, 0)
    head.direction = ""stop""

    food = turtle.Turtle()
    food.speed(0)
    food.shape(""circle"")
    food.color(""red"")
    food.penup()
    food.goto(0, 100)

    return head, food

# Execute Step 2
head, food = create_snake_and_food()","def create_snake_and_food():
    """"""Creates the snake head and food objects.""""""","# Step 3: Define Movement Functions
def goup():
    """"""Moves the snake up.""""""
    if head.direction != ""down"":
        head.direction = ""up""

def godown():
    """"""Moves the snake down.""""""
    if head.direction != ""up"":
        head.direction = ""down""

def goright():
    """"""Moves the snake right.""""""
    if head.direction != ""left"":
        head.direction = ""right""

def goleft():
    """"""Moves the snake left.""""""
    if head.direction != ""right"":
        head.direction = ""left""

# Execute Step 3
head.direction = ""stop""
goup()
godown()
goright()
goleft()","def goup():
    """"""Moves the snake up.""""""
def godown():
    """"""Moves the snake down.""""""
def goright():
    """"""Moves the snake right.""""""
def goleft():
    """"""Moves the snake left.""""""","# Step 4: Handle Key Press Events
def handle_keypress_events():
    """"""Binds key press events to movement functions.""""""
    wn.listen()
    wn.onkeypress(goup, ""Up"")
    wn.onkeypress(godown, ""Down"")
    wn.onkeypress(goleft, ""Left"")
    wn.onkeypress(goright, ""Right"")

# Execute Step 4
handle_keypress_events()","def handle_keypress_events():
    """"""Binds key press events to movement functions.""""""","# Sample dataset for step 5: Sample game state variablessegments = []score = 0high_score = 0delay = 0.1# Step 5: Update Game Statedef update_game_state():    """"""Updates the game state, including movement, collision detection, and score updates.""""""    if head.direction == ""up"":        y = head.ycor()        head.sety(y + 20)    if head.direction == ""down"":        y = head.ycor()        head.sety(y - 20)    if head.direction == ""right"":        x = head.xcor()        head.setx(x + 20)    if head.direction == ""left"":        x = head.xcor()        head.setx(x - 20)    # Add other game state updates like collision detection and score updates# Execute Step 5update_game_state()","def update_game_state():    """"""Updates the game state, including movement, collision detection, and score updates.""""""","import time
import random

# Step 6: Main Game Loop
def main_game_loop():
    """"""Runs the main game loop.""""""
    while True:
        wn.update()

        # Handle border collisions
        if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
            time.sleep(1)
            head.goto(0, 0)
            head.direction = ""stop""
            for segment in segments:
                segment.goto(1000, 1000)
            segments.clear()
            global score, delay
            score = 0
            delay = 0.1

        # Handle food collision
        if head.distance(food) < 20:
            x = random.randint(-270, 270)
            y = random.randint(-270, 270)
            food.goto(x, y)
            new_segment = turtle.Turtle()
            new_segment.speed(0)
            new_segment.color(""green"")
            new_segment.shape(""square"")
            new_segment.penup()
            segments.append(new_segment)
            delay -= 0.001
            score += 10
            global high_score
            if score > high_score:
                high_score = score

        # Move the end segments first in reverse order
        for i in range(len(segments) - 1, 0, -1):
            x = segments[i - 1].xcor()
            y = segments[i - 1].ycor()
            segments[i].goto(x, y)

        if len(segments) > 0:
            x = head.xcor()
            y = head.ycor()
            segments[0].goto(x, y)

        move()

        # Check for collisions with the body
        for segment in segments:
            if segment.distance(head) < 20:
                time.sleep(1)
                head.goto(0, 0)
                head.direction = ""stop""
                for segment in segments:
                    segment.goto(1000, 1000)
                segments.clear()
                score = 0
                delay = 0.1

        time.sleep(delay)

# Execute Step 6
main_game_loop()","def main_game_loop():
    """"""Runs the main game loop.""""""","import turtle
import time
import random

delay = 0.1
score = 0
high_score = 0

#Window Screen
wn = turtle.Screen()
wn.title(""SNAKE GAME"")
wn.bgcolor(""black"")

wn.setup(width=600,height=600)
wn.tracer(0)

#Head of Snake
head = turtle.Turtle()
head.shape(""square"")
head.color(""green"")
head.penup()
head.goto(0, 0)
head.direction = ""stop""

#Food in the game
food = turtle.Turtle()
food.speed(0)
food.shape(""circle"")
food.color(""red"")
food.penup()
food.goto(0, 100)

#Score
pen = turtle.Turtle()
pen.speed(0)
pen.shape(""turtle"")
pen.color(""white"")
pen.penup()
pen.hideturtle()
pen.goto(0, 250)
pen.write(""Score : 0  High Score : 0"", align=""center"",
          font=(""Times New Roman"", 24, ""bold""))


#Assigning key values
def goup():
    if head.direction != ""down"":
        head.direction = ""up""

def godown():
    if head.direction != ""up"":
        head.direction = ""down""
        
def goright():
    if head.direction != ""left"":
        head.direction = ""right""
        
def goleft():
    if head.direction != ""right"":
        head.direction = ""left""
        
def move():
    if head.direction == ""up"":
        y = head.ycor()
        head.sety(y+20)
        
    if head.direction == ""down"":
        y = head.ycor()
        head.sety(y-20)
        
    if head.direction == ""right"":
        x = head.xcor()
        head.setx(x+20)
        
    if head.direction == ""left"":
        x = head.xcor()
        head.setx(x-20)

wn.listen()
wn.onkeypress(goup, ""Up"")
wn.onkeypress(godown, ""Down"")
wn.onkeypress(goleft, ""Left"")
wn.onkeypress(goright, ""Right"")


#Main Loop
segments = []

while True:
    wn.update()
    #for collisions with border
    if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = ""stop""
        
        #hiding segments of snake
        for segment in segments:
            segment.goto(1000,1000)
        #clearing the segments
        segments.clear()
        
        #reset score
        score = 0
        
        #reset delay
        delay = 0.1
        
        pen.clear()
        pen.write(""Score : {} High Score : {} "".format(
            score, high_score), align=""center"", font=(""Times New Roman"", 24, ""bold""))
        
    #checking collision with food
    if head.distance(food) < 20:
        x = random.randint(-270, 270)
        y = random.randint(-270, 270)
        food.goto(x, y)
        d = [""red"",""yellow"",""blue""]
        colors = random.choice(d)
        food.color(colors)
        e = [""circle"",""square"",""triangle""]
        shapes = random.choice(e)
        food.shape(shapes)
        
        
        #adding new segment
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.color(""green"")
        new_segment.shape(""square"")
        new_segment.penup()
        segments.append(new_segment)
        
        delay -= 0.001
        score += 10
        
        if score>high_score:
            high_score = score
        pen.clear()
        pen.write(""Score : {} High Score : {} "".format(
            score, high_score), align=""center"", font=(""Times New Roman"", 24, ""bold""))
        
    #moving segments in reverse order
    for i in range(len(segments)-1,0,-1):
        x = segments[i-1].xcor()
        y = segments[i-1].ycor()
        segments[i].goto(x,y)
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)
        
    move()
    
    #Checking collisions with body
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0,0)
            head.direction = ""stop""
            
            #hide segments
            for segment in segments:
                segment.goto(1000,1000)
            segment.clear()
            
            score = 0
            delay = 0.1
            pen.clear()
            pen.write(""Score : {} High Score : {} "".format(
                score, high_score), align=""center"", font=(""Times New Roman"", 24, ""bold""))
    time.sleep(delay)

turtle.done()"
Basics,Demonstration interface python scripts,"This project implements a simple graphical quiz software using 
PySimpleGUI. The quiz presents multiple-choice questions to the user, 
who selects their answers. The software then evaluates the answers and 
provides feedback. The quiz continues until all questions have been 
answered.","1. Define Data Structure
2. Create Main Window
3. Initialize Variables
4. Start Quiz
5. Handle User Answers
6. End Quiz",6,"# Sample dataset for step 1
datatable = {
    ""1"": {
        ""question"": ""10 + 10"",
        ""answers"": {
            ""a"": ""20"",
            ""b"": ""100"",
            ""c"": ""1010"",
        },
        ""correct_answer"": ""a"",
    },
    ""2"": {
        ""question"": ""5 * 5"",
        ""answers"": {
            ""a"": ""55"",
            ""b"": ""25"",
            ""c"": ""500"",
        },
        ""correct_answer"": ""b"",
    },
    ""3"": {
        ""question"": ""3 ** 2"",
        ""answers"": {
            ""a"": ""3"",
            ""b"": ""32"",
            ""c"": ""9"",
        },
        ""correct_answer"": ""c"",
    },
}

# Step 1: Define Data Structure
def define_data_structure():
    """"""Defines the data structure for questions and answers.""""""
    return datatable

# Execute Step 1
datatable = define_data_structure()","def define_data_structure():
    """"""Defines the data structure for questions and answers.""""""","import PySimpleGUI as sg

# Step 2: Create Main Window
def create_main_window():
    """"""Creates the main window for the quiz application.""""""
    layout = [
        [sg.Text('Quiz!', font='_ 12 bold')],
        [sg.Text('Question:')],
        [sg.Input('', size=(30, 1), key='-QUESTION-')],
        [sg.Text('Answers:')],
        [sg.Multiline('', size=(30, 8), key='-OPTIONS-')],
        [sg.Radio('a', group_id='-RADIO-', key='a'),
         sg.Radio('b', group_id='-RADIO-', key='b'),
         sg.Radio('c', group_id='-RADIO-', key='c')],
        [sg.Button('Start', key='-START-'), sg.Button('Answer', key='-ANSWER-'),
         sg.Button('Exit', key='-EXIT-')]
    ]
    return sg.Window('Quiz!', layout, finalize=True)

# Execute Step 2
window = create_main_window()","def create_main_window():
    """"""Creates the main window for the quiz application.""""""","# Step 3: Initialize Variables
def initialize_variables():
    """"""Initializes variables for tracking the quiz state.""""""
    QUESTIONS_INDEX = 1
    END = False
    ANSWERED = False
    QUESTIONING = False
    CORRECT = 0
    return QUESTIONS_INDEX, END, ANSWERED, QUESTIONING, CORRECT

# Execute Step 3
QUESTIONS_INDEX, END, ANSWERED, QUESTIONING, CORRECT = initialize_variables()","def initialize_variables():
    """"""Initializes variables for tracking the quiz state.""""""","# Step 4: Start Quiz
def start_quiz():
    """"""Starts the quiz by displaying the first question and answers.""""""
    if not END:
        QUESTIONING = True
        answers.update(value='')
        question.update(value=f'{datatable[str(QUESTIONS_INDEX)][""question""]}')
        for answer, answer_data in datatable[str(QUESTIONS_INDEX)][""answers""].items():
            answers.print(f'({answer}): {answer_data}')
        correct_answer = datatable[str(QUESTIONS_INDEX)][""correct_answer""]
        ANSWERED = False
    else:
        QUESTIONING = False
        sg.popup('End of Quiz.')

# Execute Step 4
start_quiz()","def start_quiz():
    """"""Starts the quiz by displaying the first question and answers.""""""","# Step 5: Handle User Answers
def handle_user_answers(values):
    """"""Handles user answers and updates the quiz state.""""""
    if (values['a'] or values['b'] or values['c']) and QUESTIONING:
        for idx in ('a', 'b', 'c'):
            if values[idx]:
                USER_CHOICE = idx
        if not ANSWERED:
            if USER_CHOICE == correct_answer:
                sg.popup('Correct!')
                CORRECT += 1
            else:
                sg.popup('Wrong.')
        if not ANSWERED:
            QUESTIONS_INDEX += 1
            ANSWERED = True
        if QUESTIONS_INDEX > len(datatable):
            END = True
            sg.popup(f'The end. You got {CORRECT} of {len(datatable)}.')
        if not END:
            window.write_event_value('-START-', '')

# Execute Step 5
handle_user_answers(values)","def handle_user_answers(values):
    """"""Handles user answers and updates the quiz state.""""""","# Step 6: End Quiz
def end_quiz():
    """"""Ends the quiz and closes the window.""""""
    window.close()

# Execute Step 6
end_quiz()","def end_quiz():
    """"""Ends the quiz and closes the window.""""""","""""""
PyQuiz - a simple graphical quiz software
Demonstrates the use of PySimpleGui as an interface
and simple dictionary interaction
2022 Eduardo C. - https://github.com/ehcelino
""""""
import PySimpleGUI as sg

# The dictionary containing our questions and answers (can come from a file, a database...)
datatable = {
    ""1"": {
        ""question"": ""10 + 10"",
        ""answers"": {
            ""a"": ""20"",
            ""b"": ""100"",
            ""c"": ""1010"",
        },
        ""correct_answer"": ""a"",
    },
    ""2"": {
        ""question"": ""5 * 5"",
        ""answers"": {
            ""a"": ""55"",
            ""b"": ""25"",
            ""c"": ""500"",
        },
        ""correct_answer"": ""b"",
    },
    ""3"": {
        ""question"": ""3 ** 2"",
        ""answers"": {
            ""a"": ""3"",
            ""b"": ""32"",
            ""c"": ""9"",
        },
        ""correct_answer"": ""c"",
    },
}

# Our window definition.
def main_window():
    """"""
    Defines the main window.
    :return: PySimpleGUI Window object.
    """"""
    # Everything bound by []'s goes on one line.
    layout = [
        [sg.Text('Quiz!', font='_ 12 bold')],
        [sg.Text('Question:')],
        [sg.Input('', size=(30, 1), key='-QUESTION-')],
        [sg.Text('Answers:')],
        [sg.Multiline('', size=(30, 8), key='-OPTIONS-')],
        [sg.Radio('a', group_id='-RADIO-', key='a'),
         sg.Radio('b', group_id='-RADIO-', key='b'),
         sg.Radio('c', group_id='-RADIO-', key='c'),],
        [sg.Button('Start', key='-START-'), sg.Button('Answer', key='-ANSWER-'),
         sg.Button('Exit', key='-EXIT-')]
    ]

    return sg.Window('Quiz!', layout, finalize=True)

window = main_window()

# variables
QUESTIONS_INDEX = 1
END = False  # To keep track of the end of the game
ANSWERED = False  # If the question is still unanswered
QUESTIONING = False  # If there's an active question
CORRECT = 0

# aliases
question = window['-QUESTION-']
answers = window['-OPTIONS-']

while True:  # This is the main loop.
    event, values = window.read()

    if event == '-START-':
        if not END:
            QUESTIONING = True
            answers.update(value='')
            question.update(value=f'{datatable[str(QUESTIONS_INDEX)][""question""]}')
            for answer, answer_data in datatable[str(QUESTIONS_INDEX)][""answers""].items():
                answers.print(f'({answer}): {answer_data}')
            correct_answer = datatable[str(QUESTIONS_INDEX)][""correct_answer""]
            ANSWERED = False
        else:
            QUESTIONING = False
            sg.popup('End of Quiz.')

    if event == '-ANSWER-':
        if (values['a'] or values['b'] or values['c']) and QUESTIONING:
            for idx in ('a', 'b', 'c'):
                if values[idx]:
                    USER_CHOICE = idx
            if not ANSWERED:
                if USER_CHOICE == correct_answer:
                    sg.popup('Correct!')
                    CORRECT += 1
                else:
                    sg.popup('Wrong.')
            if not ANSWERED:
                QUESTIONS_INDEX += 1
                ANSWERED = True
            if QUESTIONS_INDEX > len(datatable):
                END = True
                sg.popup(f'The end. You got {CORRECT} of {len(datatable)}.')
            if not END:
                window.write_event_value('-START-', '')

    if event in (sg.WIN_CLOSED, '-EXIT-'):
        break


window.close()"
Basics,Demonstration interface python scripts,"This project implements a simple graphical date calculator using 
PySimpleGUI. The calculator can determine the number of days or working 
days between two given dates. The project demonstrates the use of 
PySimpleGUI for the graphical interface and datetime and numpy for date 
calculations","1. Define Constants
2. Implement Days Between Function
3. Implement Workdays Between Function
4. Create Main Window
5. Handle User Input
6. Close Application",6,"# Step 1: Define Constants
def define_constants():
    """"""Defines the date format constant.""""""
    DATE_FRMT = '%m-%d-%Y'
    return DATE_FRMT

# Execute Step 1
DATE_FRMT = define_constants()","def define_constants():
    """"""Defines the date format constant.""""""","from datetime import datetime
import PySimpleGUI as sg

# Sample dataset for step 2
date_one = '01-01-2022'
date_two = '01-10-2022'

# Step 2: Implement Days Between Function
def days_between(date_one, date_two, DATE_FRMT):
    """"""Determines how many days between dates.""""""
    result = ''
    try:
        tmp_one = datetime.strptime(date_one, DATE_FRMT)
        tmp_two = datetime.strptime(date_two, DATE_FRMT)
    except ValueError as exc:
        sg.popup('Error:', exc)
    else:
        mytimedelta = tmp_one - tmp_two
        result = mytimedelta.days
    return result

# Execute Step 2
print(days_between(date_one, date_two, DATE_FRMT))","def days_between(date_one, date_two, DATE_FRMT):
    """"""Determines how many days between dates.""""""","import numpy as np

# Sample dataset for step 3
date_one = '01-01-2022'
date_two = '01-10-2022'

# Step 3: Implement Workdays Between Function
def workdays_between(date_one, date_two, DATE_FRMT):
    """"""Determines how many workdays between dates.""""""
    result = ''
    try:
        tmp_one = datetime.strptime(date_one, DATE_FRMT)
        tmp_two = datetime.strptime(date_two, DATE_FRMT)
    except ValueError as exc:
        sg.popup('Error:', exc)
    else:
        result = np.busday_count(tmp_one.strftime('%Y-%m-%d'), tmp_two.strftime('%Y-%m-%d'))
    return result

# Execute Step 3
print(workdays_between(date_one, date_two, DATE_FRMT))","def workdays_between(date_one, date_two, DATE_FRMT):    """"""Determines how many workdays between dates.""""""","sample_bricks = [import PySimpleGUI as sg

# Step 4: Create Main Window
def create_main_window():
    """"""Creates the main window for the date calculator application.""""""
    tsz = (8, 1)  # Makes it easier to define sizes for multiple elements.
    isz = (15, 1)
    layout = [
        [sg.Text('Date calculator', font='_ 12 bold')],
        [sg.Text('Date format: US (mm-dd-yyyy', font='_ 10 italic')],
        [sg.Text('Date one:', size=tsz),
         sg.Input('', size=isz, key='-DATE01-')],
        [sg.Text('Date two:', size=tsz),
         sg.Input('', size=isz, key='-DATE02-')],
        [sg.Text('Answer:', size=tsz),
         sg.Input('', size=isz, key='-OUTPUT-')],
        [sg.Push(), sg.Button('Days between dates', key='-BETWEEN-'), sg.Push()],
        [sg.Push(), sg.Button('Working days bt. dates', key='-WORKING-'), sg.Push()],
        [sg.Push(), sg.Button('Exit', key='-EXIT-')]
    ]

    return sg.Window('Date calculator!', layout, finalize=True)

# Execute Step 4
window = create_main_window()","def create_main_window():
    """"""Creates the main window for the date calculator application.""""""","# Sample dataset for step 5
DATE_FRMT = '%m-%d-%Y'

# Step 5: Handle User Input
def handle_user_input(window, DATE_FRMT):
    """"""Handles user input for calculating days and workdays between dates.""""""
    while True:
        event, values = window.read()

        if event == '-BETWEEN-':
            try:
                window['-OUTPUT-'].update(value=str(abs(
                    days_between(values['-DATE01-'], values['-DATE02-'], DATE_FRMT))))
            except TypeError as err:
                sg.popup('Error:', err)

        if event == '-WORKING-':
            try:
                window['-OUTPUT-'].update(value=str(abs(
                    workdays_between(values['-DATE01-'], values['-DATE02-'], DATE_FRMT))))
            except TypeError as err:
                sg.popup('Error:', err)

        if event in (sg.WIN_CLOSED, '-EXIT-'):
            break

# Execute Step 5
handle_user_input(window, DATE_FRMT)","def handle_user_input(window, DATE_FRMT):
    """"""Handles user input for calculating days and workdays between dates.""""""","# Step 6: Close Application
def close_application(window):
    """"""Closes the date calculator application.""""""
    window.close()

# Execute Step 6
close_application(window)","def close_application(window):
    """"""Closes the date calculator application.""""""","""""""
Dates - a simple graphic dates calculator
Demonstrates the use of PySimpleGui as an interface
and date arithmetics using module datetime and numpy.
2022 Eduardo C. - https://github.com/ehcelino
""""""
from datetime import datetime
import PySimpleGUI as sg
import numpy as np

DATE_FRMT = '%m-%d-%Y'

def days_between(date_one, date_two):
    """"""
    Determines how many days between dates.
    :param date_one: date (us format) as string
    :param date_two: date (us format) as string
    :return: days as string
    """"""
    result = ''
    try:
        tmp_one = datetime.strptime(date_one, DATE_FRMT)
        tmp_two = datetime.strptime(date_two, DATE_FRMT)
    except ValueError as exc:
        sg.popup('Error:', exc)
    else:
        mytimedelta = tmp_one - tmp_two
        result = mytimedelta.days
    return result

def workdays_between(date_one, date_two):
    """"""
    Determines how many workdays between dates.
    :param date_one: date (us format) as string
    :param date_two: date (us format) as string
    :return: days as int
    """"""
    result = ''
    try:
        tmp_one = datetime.strptime(date_one, DATE_FRMT)
        tmp_two = datetime.strptime(date_two, DATE_FRMT)
    except ValueError as exc:
        sg.popup('Error:', exc)
    else:
        result = np.busday_count(tmp_one.strftime('%Y-%m-%d'), tmp_two.strftime('%Y-%m-%d'))
    return result

def main_window():
    """"""
    Defines the main window.
    :return: PySimpleGUI Window object.
    """"""
    tsz = (8, 1) # Makes easier to define sizes to multiple elements.
    isz = (15, 1)
    # Everything bound by []'s goes on one line.
    layout = [
        [sg.Text('Date calculator', font='_ 12 bold')],
        [sg.Text('Date format: US (mm-dd-yyyy', font='_ 10 italic')],
        [sg.Text('Date one:', size=tsz),
         sg.Input('', size=isz, key='-DATE01-')],
        [sg.Text('Date two:', size=tsz),
         sg.Input('', size=isz, key='-DATE02-')],
        [sg.Text('Answer:', size=tsz),
         sg.Input('', size=isz, key='-OUTPUT-')],
        [sg.Push(), sg.Button('Days between dates', key='-BETWEEN-'), sg.Push()],
        [sg.Push(), sg.Button('Working days bt. dates', key='-WORKING-'), sg.Push()],
        [sg.Push(), sg.Button('Exit', key='-EXIT-')]
    ]

    return sg.Window('Date calculator!', layout, finalize=True)

window = main_window()

while True:  # This is the main loop.
    event, values = window.read()

    if event == '-BETWEEN-':
        try:
            window['-OUTPUT-'].update(value=str(abs(
                days_between(values['-DATE01-'], values['-DATE02-']))))
        except TypeError as err:
            sg.popup('Error:', err)

    if event == '-WORKING-':
        try:
            window['-OUTPUT-'].update(value=str(abs(
                workdays_between(values['-DATE01-'], values['-DATE02-']))))
        except TypeError as err:
            sg.popup('Error:', err)

    if event in (sg.WIN_CLOSED, '-EXIT-'):
        break

window.close()"
Advanced topic ,Umbrella reminder (weather scraping),"This project implements a weather-based umbrella reminder system using 
Python. It checks the weather forecast for a specified city and sends an
 email reminder if rain is expected. The project demonstrates the use of
 web scraping, email sending via SMTP, and scheduling tasks.","1. Define Weather Checking Function
2. Define Email Sending Function
3. Implement Umbrella Reminder Function
4. Schedule Reminder Function
5. Run Scheduler
6. Close Scheduler (if needed)",6,"import requests
from bs4 import BeautifulSoup

# Step 1: Define Weather Checking Function
def check_weather(city):
    """"""Checks the weather for a given city.""""""
    url = ""https://www.google.com/search?q=weather "" + city
    html = requests.get(url).content
    soup = BeautifulSoup(html, 'html.parser')
    temperature = soup.find('div', attrs={'class': 'BNeawe iBp4i AP7Wnd'}).text
    time_sky = soup.find('div', attrs={'class': 'BNeawe tAd8D AP7Wnd'}).text
    sky = time_sky.split('\n')[1]
    return temperature, sky

# Execute Step 1
print(check_weather(""Hyderabad""))","def check_weather(city):
    """"""Checks the weather for a given city.""""""","import smtplib

# Sample dataset for step 2
subject = ""Umbrella Reminder""
body = ""Take an umbrella before leaving the house.""
from_email = ""YOUR EMAIL""
to_email = ""TO EMAIL""
password = ""YOUR PASSWORD""

# Step 2: Define Email Sending Function
def send_email(subject, body, from_email, to_email, password):
    """"""Sends an email with the given subject and body.""""""
    smtp_object = smtplib.SMTP('smtp.gmail.com', 587)
    smtp_object.starttls()
    smtp_object.login(from_email, password)
    msg = f""Subject:{subject}\n\n{body}"".encode('utf-8')
    smtp_object.sendmail(from_email, to_email, msg)
    smtp_object.quit()
    print(""Email Sent!"")

# Execute Step 2
send_email(subject, body, from_email, to_email, password)","def send_email(subject, body, from_email, to_email, password):
    """"""Sends an email with the given subject and body.""""""","# Sample dataset for step 3
city = ""Hyderabad""
from_email = ""YOUR EMAIL""
to_email = ""TO EMAIL""
password = ""YOUR PASSWORD""

# Step 3: Implement Umbrella Reminder Function
def umbrella_reminder(city, from_email, to_email, password):
    """"""Checks the weather and sends an umbrella reminder email if needed.""""""
    temperature, sky = check_weather(city)
    if sky in [""Rainy"", ""Rain And Snow"", ""Showers"", ""Haze"", ""Cloudy""]:
        subject = ""Umbrella Reminder""
        body = f""Take an umbrella before leaving the house. Weather condition for today is {sky} and temperature is {temperature} in {city}.""
        send_email(subject, body, from_email, to_email, password)

# Execute Step 3
umbrella_reminder(city, from_email, to_email, password)","def umbrella_reminder(city, from_email, to_email, password):
    """"""Checks the weather and sends an umbrella reminder email if needed.""""""","[pygame.Rect(0, 0, 80, 40), 1], [pygame.Rect(80, 0, 80, 40), 2], [pygame.Rect(160, 0, 80, 40), 3]import schedule

# Sample dataset for step 4
city = ""Hyderabad""
from_email = ""YOUR EMAIL""
to_email = ""TO EMAIL""
password = ""YOUR PASSWORD""

# Step 4: Schedule Reminder Function
def schedule_reminder():
    """"""Schedules the umbrella reminder function to run daily.""""""
    schedule.every().day.at(""06:00"").do(umbrella_reminder, city, from_email, to_email, password)

# Execute Step 4
schedule_reminder()","def schedule_reminder():
    """"""Schedules the umbrella reminder function to run daily.""""""","# Step 5: Run Scheduler
def run_scheduler():
    """"""Runs the scheduler to execute scheduled tasks.""""""
    while True:
        schedule.run_pending()

# Execute Step 5
run_scheduler()","def run_scheduler():
    """"""Runs the scheduler to execute scheduled tasks.""""""","# Step 6: Close Scheduler (if needed)
def close_scheduler():
    """"""Closes the scheduler and stops executing tasks.""""""
    schedule.clear()

# Execute Step 6
close_scheduler()","def close_scheduler():
    """"""Closes the scheduler and stops executing tasks.""""""","import schedule
import smtplib
import requests
from bs4 import BeautifulSoup
  
  
def umbrellaReminder():
    city = ""Hyderabad""
      
    # creating url and requests instance
    url = ""https://www.google.com/search?q="" + ""weather"" + city
    html = requests.get(url).content
      
    # getting raw data
    soup = BeautifulSoup(html, 'html.parser')
    temperature = soup.find('div',
                            attrs={'class': 'BNeawe iBp4i AP7Wnd'}).text
    time_sky = soup.find('div', 
                         attrs={'class': 'BNeawe tAd8D AP7Wnd'}).text
      
    # formatting data
    sky = time_sky.split('\n')[1]
  
    if sky == ""Rainy"" or sky == ""Rain And Snow"" or sky == ""Showers"" or sky == ""Haze"" or sky == ""Cloudy"":
        smtp_object = smtplib.SMTP('smtp.gmail.com', 587)
          
        # start TLS for security
        smtp_object.starttls()
          
        # Authentication
        smtp_object.login(""YOUR EMAIL"", ""PASSWORD"")
        subject = ""GeeksforGeeks Umbrella Reminder""
        body = f""Take an umbrella before leaving the house.\
        Weather condition for today is {sky} and temperature is\
        {temperature} in {city}.""
        msg = f""Subject:{subject}\n\n{body}\n\nRegards,\nGeeksforGeeks"".encode(
            'utf-8')
          
        # sending the mail
        smtp_object.sendmail(""FROM EMAIL"",
                             ""TO EMAIL"", msg)
          
        # terminating the session
        smtp_object.quit()
        print(""Email Sent!"")
  
  
# Every day at 06:00AM time umbrellaReminder() is called.
schedule.every().day.at(""06:00"").do(umbrellaReminder)
  
while True:
    schedule.run_pending()"
Data Structure & Algo,Image to pdf,This project involves converting an image file to a PDF file using Python. The program utilizes the img2pdf library to perform the conversion and the PIL (Pillow) library to handle the image file. The project demonstrates basic file handling and conversion tasks in Python.,"1. Import Necessary Libraries
2. Define Image and PDF Paths
3. Open Image File
4. Convert Image to PDF
5. Save PDF File
6. Close Files and Output Result",6,"# Step 1: Import Necessary Libraries
import img2pdf
from PIL import Image
import os

def import_libraries():
    """"""Imports necessary libraries.""""""
    import img2pdf
    from PIL import Image
    import os

# Execute Step 1
import_libraries()","def import_libraries():
    """"""Imports necessary libraries.""""""","# Step 2: Define Image and PDF Paths
def define_paths(img_path, pdf_path):
    """"""Defines the paths for the image and PDF files.""""""
    return img_path, pdf_path

# Sample dataset for step 2
img_path = ""C:/Users/vedan/OneDrive/Desktop/image.png""
pdf_path = ""C:/Users/vedan/OneDrive/Desktop/image.pdf""

# Execute Step 2
image_path, pdf_file_path = define_paths(img_path, pdf_path)
print(image_path, pdf_file_path)","def define_paths(img_path, pdf_path):
    """"""Defines the paths for the image and PDF files.""""""","from PIL import Image

# Step 3: Open Image File
def open_image(image_path):
    """"""Opens the image file.""""""
    image = Image.open(image_path)
    return image

# Sample dataset for step 3
image_path = ""C:/Users/vedan/OneDrive/Desktop/image.png""

# Execute Step 3
image = open_image(image_path)
print(""Image opened:"", image)","def open_image(image_path):
    """"""Opens the image file.""""""","import img2pdf

# Step 4: Convert Image to PDF
def convert_to_pdf(image):
    """"""Converts the image to PDF.""""""
    pdf_bytes = img2pdf.convert(image.filename)
    return pdf_bytes

# Sample dataset for step 4
image = Image.open(""C:/Users/vedan/OneDrive/Desktop/image.png"")

# Execute Step 4
pdf_bytes = convert_to_pdf(image)
print(""PDF conversion done"")","def convert_to_pdf(image):
    """"""Converts the image to PDF.""""""","# Step 5: Save PDF File
def save_pdf(pdf_bytes, pdf_path):
    """"""Saves the PDF file.""""""
    with open(pdf_path, ""wb"") as file:
        file.write(pdf_bytes)

# Sample dataset for step 5
pdf_bytes = img2pdf.convert(""C:/Users/vedan/OneDrive/Desktop/image.png"")
pdf_path = ""C:/Users/vedan/OneDrive/Desktop/image.pdf""

# Execute Step 5
save_pdf(pdf_bytes, pdf_path)
print(""PDF file saved"")","def save_pdf(pdf_bytes, pdf_path):
    """"""Saves the PDF file.""""""","# Step 6: Close Files and Output Result
def close_files(image):
    """"""Closes the image file and outputs result.""""""
    image.close()
    print(""Successfully made PDF file"")

# Sample dataset for step 6
image = Image.open(""C:/Users/vedan/OneDrive/Desktop/image.png"")

# Execute Step 6
close_files(image)","def close_files(image):
    """"""Closes the image file and outputs result.""""""","# importing necessary libraries
import img2pdf
from PIL import Image
import os
  
# storing image path
img_path = ""C:/Users/vedan/OneDrive/Desktop/image.png""
  
# storing pdf path
pdf_path = ""C:/Users/vedan/OneDrive/Desktop/image.pdf""
  
# opening image
image = Image.open(img_path)
  
# converting into chunks using img2pdf
pdf_bytes = img2pdf.convert(image.filename)
  
# opening or creating pdf file
file = open(pdf_path, ""wb"")
  
# writing pdf files with chunks
file.write(pdf_bytes)
  
# closing image file
image.close()
  
# closing pdf file
file.close()
  
# output
print(""Successfully made pdf file"")"
Data Structure & Algo,PDF text extractor,"This project involves creating a graphical user interface (GUI) 
application to convert PDF files to text using Python. The application 
utilizes the tkinter library for the GUI, PyPDF2 for reading the PDF content, and PIL
 for handling image files. Users can select a PDF file from their 
device, and the application will extract and display the text content.","1. Import Necessary Libraries
2. Create Main Window
3. Add Logo and Instructions
4. Add Browse Button to Select PDF
5. Extract and Display PDF Text
6. Main Loop to Run the Application",6,"# Step 1: Import Necessary Libraries
def import_libraries():
    """"""Imports necessary libraries.""""""
    import tkinter as tk
    import PyPDF2
    from PIL import Image, ImageTk
    from tkinter.filedialog import askopenfile

# Execute Step 1
import_libraries()","def import_libraries():
    """"""Imports necessary libraries.""""""","# Step 2: Create Main Window
def create_main_window():
    """"""Creates the main window of the application.""""""
    root = tk.Tk()
    root.title('PDF to TEXT')
    root.iconbitmap('./logo.png')
    root.resizable(False, False)
    return root

# Execute Step 2
root = create_main_window()","def create_main_window():
    """"""Creates the main window of the application.""""""","# Step 3: Add Logo and Instructions
def add_logo_and_instructions(root):
    """"""Adds a logo and instructions to the main window.""""""
    canvas = tk.Canvas(root, width=600, height=400)
    canvas.grid(columnspan=3, rowspan=3)

    logo = Image.open('logo2.png')
    logo = ImageTk.PhotoImage(logo)
    logo_label = tk.Label(image=logo)
    logo_label.image = logo
    logo_label.grid(column=1, row=0)

    instructions = tk.Label(root, text='Select a PDF file on your device to extract all its text.', font='calibre')
    instructions.grid(columnspan=3, column=0, row=1)

# Execute Step 3
add_logo_and_instructions(root)","def add_logo_and_instructions(root):
    """"""Adds a logo and instructions to the main window.""""""","# Step 4: Add Browse Button to Select PDF
def add_browse_button(root):
    """"""Adds a browse button to the main window to select a PDF file.""""""
    browse_text = tk.StringVar()
    browse_btn = tk.Button(root, textvariable=browse_text, command=lambda: open_file(root, browse_text), font='calibre', bg='red', width=15, height=2)
    browse_text.set('Browse')
    browse_btn.grid(column=1, row=2)

# Execute Step 4
add_browse_button(root)","def add_browse_button(root):
    """"""Adds a browse button to the main window to select a PDF file.""""""","import PyPDF2
from tkinter.filedialog import askopenfile

# Step 5: Extract and Display PDF Text
def open_file(root, browse_text):
    """"""Extracts text from the selected PDF file and displays it.""""""
    browse_text.set('On it...')
    file = askopenfile(parent=root, mode='rb', title='Choose a file', filetypes=[('PDF file', '*.pdf')])
    text = """"

    if file:
        read_pdf = PyPDF2.PdfReader(file)
        for i in range(len(read_pdf.pages)):
            text += read_pdf.pages[i].extract_text()

        text_box = tk.Text(root, height=10, width=50, padx=15, pady=15)
        text_box.insert(1.0, text)
        text_box.tag_config('center', justify='center')
        text_box.tag_add('center', 1.0, 'end')
        text_box.grid(column=1, row=3)

        browse_text.set('Browse')

# Sample dataset for step 5
root = tk.Tk()
browse_text = tk.StringVar()
browse_text.set('Browse')

# Execute Step 5
open_file(root, browse_text)","def open_file(root, browse_text):
    """"""Extracts text from the selected PDF file and displays it.""""""","# Step 6: Main Loop to Run the Application
def main_loop(root):
    """"""Runs the main loop of the application.""""""
    root.mainloop()

# Execute Step 6
main_loop(root)","def main_loop(root):
    """"""Runs the main loop of the application.""""""","import tkinter as tk
import PyPDF2
from PIL import Image, ImageTk
from tkinter.filedialog import askopenfile

root = tk.Tk()
root.title('PDF to TEXT')
root.iconbitmap('./logo.png')
root.resizable(False, False)


canvas = tk.Canvas(root, width=600, height=400)
canvas.grid(columnspan=3, rowspan=3)

# Insert logo into the window
logo = Image.open('logo2.png')
logo = ImageTk.PhotoImage(logo)
logo_label = tk.Label(image=logo)
logo_label.image = logo
logo_label.grid(column=1, row=0)

# instructions
instructions = tk.Label(root, text='Select a PDF file on your device to extract all its text.', font='calibre')
instructions.grid(columnspan=3, column=0, row=1)

# Get the PDF file on device
browse_text = tk.StringVar()
browse_btn = tk.Button(root, textvariable=browse_text, command=lambda: open_file(), font='calibre', bg='red', width=15, height=2)
browse_text.set('Browse')
browse_btn.grid(column=1, row=2)

canvas = tk.Canvas(root, width=600, height=200)
canvas.grid(columnspan=3, rowspan=3)


def open_file():
    browse_text.set('On it...')
    # Open the PDF file using the PdfFileReader object
    file = askopenfile(parent=root, mode='rb', title='Choose a file', filetypes=[('PDF file', '*.pdf')])
    text = """"

    if file:
        read_pdf = PyPDF2.PdfReader(file)
        for i in range(len(read_pdf.pages)):
            text += read_pdf.pages[i].extract_text()

        text_box = tk.Text(root, height=10, width=50, padx=15, pady=15)
        text_box.insert(1.0, text)
        text_box.tag_config('center', justify='center')
        text_box.tag_add('center', 1.0, 'end')
        text_box.grid(column=1, row=3)

        browse_text.set('Browse')


def convert_to_docx():
    pass


root.mainloop()"
Data Structure & Algo,Docx file analyzer,"This project involves creating a Python script to analyze a Word Document (.docx)
 and collect words that are bold, italicized, or underlined. The 
collected words are then written at the end of the document. The script 
uses the python-docx library to handle Word documents. The project will help understand text processing and manipulation within Word documents.","1. Import Necessary Libraries
2. Calculate Total Words in Document
3. Remove Unwanted Characters from Text
4. Analyze Document for Specific Formatting
5. Write Collected Data to Document
6. Main Function to Execute the Script",6,"# Step 1: Import Necessary Libraries
def import_libraries():
    """"""Imports necessary libraries.""""""
    from docx import Document
    from docx.api import Document
    from docx.enum.text import WD_ALIGN_PARAGRAPH

# Execute Step 1
import_libraries()","def import_libraries():
    """"""Imports necessary libraries.""""""","# Step 2: Calculate Total Words in Document
def get_total_words(docxFile):
    """"""Calculates total words in the given docx file.""""""
    from docx import Document
    document = Document(docxFile)
    total = 0
    for p in document.paragraphs:
        for run in p.runs:
            total += len(run.text.split())
    return total

# Sample dataset for step 2
docxFile = 'sample.docx'

# Execute Step 2
total_words = get_total_words(docxFile)
print(f""Total words: {total_words}"")","def get_total_words(docxFile):
    """"""Calculates total words in the given docx file.""""""","# Step 3: Remove Unwanted Characters from Text
def remove_unwanted(words):
    """"""Removes unwanted characters from the given text.""""""
    unwanted_characters = [
        '""', ""'"", ""’"", ""“"", "":"", ""\n"", ""-"", ""— — "", ""—"", ""."", "","", "";"", ""!"", ""?""
    ]
    for char in unwanted_characters:
        words = words.replace(char, """")
    return words

# Sample dataset for step 3
sample_text = 'Hello, World!'

# Execute Step 3
cleaned_text = remove_unwanted(sample_text)
print(f""Cleaned text: {cleaned_text}"")","def remove_unwanted(words):
    """"""Removes unwanted characters from the given text.""""""","# Step 4: Analyze Document for Specific Formatting
def analyze(docxFile):
    """"""Analyzes the docx file for bold, italicized, and underlined words.""""""
    from docx import Document
    document = Document(docxFile)

    collect = [
        {""b"": []}, {""i"": []}, {""u"": []}, {""bi"": []}, {""bu"": []}, {""iu"": []}, {""biu"": []}
    ]

    for p in document.paragraphs:
        for run in p.runs:
            if run.bold and run.italic and run.underline:
                collect[6][""biu""].append(remove_unwanted(run.text))
            elif run.bold and run.italic:
                collect[3][""bi""].append(remove_unwanted(run.text))
            elif run.bold and run.underline:
                collect[4][""bu""].append(remove_unwanted(run.text))
            elif run.italic and run.underline:
                collect[5][""iu""].append(remove_unwanted(run.text))
            elif run.bold:
                collect[0][""b""].append(remove_unwanted(run.text))
            elif run.italic:
                collect[1][""i""].append(remove_unwanted(run.text))
            elif run.underline:
                collect[2][""u""].append(remove_unwanted(run.text))

    return collect

# Sample dataset for step 4
docxFile = 'sample.docx'

# Execute Step 4
collected_data = analyze(docxFile)
print(f""Collected data: {collected_data}"")","def analyze(docxFile):
    """"""Analyzes the docx file for bold, italicized, and underlined words.""""""","# Step 5: Write Collected Data to Document
def write_data(docxFile, data):
    """"""Writes collected data to the end of the given docx file.""""""
    from docx import Document
    from docx.enum.text import WD_ALIGN_PARAGRAPH

    document = Document(docxFile)
    wordsList = """"

    def add_words(key):
        nonlocal wordsList
        categories = {
            ""b"": ""\nBold Words:-"", ""i"": ""\n\nItalicized Words:-"", ""u"": ""\n\nUnderlined Words:-"",
            ""bi"": ""\n\nBold & Italicized Words:-"", ""bu"": ""\n\nBold & Underlined Words:-"",
            ""biu"": ""\n\nBold & Italicized & Underlined Words:-"", ""iu"": ""\n\nItalicized & Underlined Words:-""
        }
        for word in words[key]:
            category = categories[key]
            if len(wordsList) == 0 or category not in wordsList:
                wordsList = wordsList + f""{category}\n{word}""
            else:
                wordsList = wordsList + f"", {word}""

    title_p = document.add_paragraph(f""\n========== Extracted Words ==========\n"")
    title_p.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER

    write_p = document.add_paragraph()

    for words in data:
        for key in words:
            if words[key]:
                add_words(key)

    write_p.add_run(f""{wordsList}"")

    ending_p = document.add_paragraph(""\n===================\n"")
    ending_p.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER

    document.save(docxFile)
    return

# Sample dataset for step 5
docxFile = 'sample.docx'
data = collected_data

# Execute Step 5
write_data(docxFile, data)
print(""Data written to document."")","def write_data(docxFile, data):
    """"""Writes collected data to the end of the given docx file.""""""","# Step 6: Main Function to Execute the Script
def main():
    """"""Main function to execute the script.""""""
    from sys import argv
    docx = argv[1]
    data = analyze(docx)
    write_data(docx, data)

# Sample dataset for step 6
docxFile = 'sample.docx'

# Execute Step 6
if __name__ == ""__main__"":
    main()","def main():    """"""Main function to execute the script.""""""",""""""" This module uses 'python-docx' package to analyze a Word Document ('.docx')
    This module can be imported in other programs but the preffered way is to run it 
    as a Script from the command line like this:
    
    $ python extract.py <name-of-word-document-file>
    
    The basic function of the program is to analyze the word document and 
    collect bold, italic and underlined words from it and then 
    after analyzing write these collected words at the end of the word document.
    So the program first reads the word document, collects bold, italic 
    and underlined words from it and then writes the collected words at
    the very end of the same word document 
    Copyright 2023 Kashaan Mahmood
    License: MIT License
             https://opensource.org/license/mit/
    """"""


from docx import Document
from docx.api import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH

# global variables
total_words = 0
wordsList = """"


# calculate total words in docx
def get_total_words(docxFile):
    document = Document(docxFile)
    total = 0
    for p in document.paragraphs:
        for run in p.runs:
            total += len(run.text.split())
    return total


unwanted_characters = [
    '""',
    ""'"",
    ""’"",
    ""“"",
    "":"",
    ""\n"",
    ""-"",
    ""— — "",
    ""—"",
    ""."",
    "","",
    "";"",
    ""!"",
    ""?"",
]


def remove_unwanted(words):
    """"""remove unwanted characters from analyzed output""""""
    for i in unwanted_characters:
        if i in words:
            words = words.replace(i, """")
    return words


def analyze(docxFile):
    """"""analyze the docx file and collect bold, italicized, and underlined words from it
    and return a `collect` object these selected words
    """"""

    document = Document(docxFile)

    collect = [
        {""b"": []},
        {""i"": []},
        {""u"": []},
        {""bi"": []},
        {""bu"": []},
        {""iu"": []},
        {""biu"": []},
    ]

    for p in document.paragraphs:
        for run in p.runs:
            if run.bold and run.italic and run.underline:
                filtered_text = remove_unwanted(run.text)
                collect[6][""biu""].append(filtered_text)

            elif run.bold and run.italic:
                filtered_text = remove_unwanted(run.text)
                collect[3][""bi""].append(filtered_text)

            elif run.bold and run.underline:
                filtered_text = remove_unwanted(run.text)
                collect[4][""bu""].append(filtered_text)

            elif run.italic and run.underline:
                filtered_text = remove_unwanted(run.text)
                collect[5][""iu""].append(filtered_text)

            elif run.bold:
                filtered_text = remove_unwanted(run.text)
                collect[0][""b""].append(filtered_text)

            elif run.italic:
                filtered_text = remove_unwanted(run.text)
                collect[1][""i""].append(filtered_text)

            elif run.underline:
                filtered_text = remove_unwanted(run.text)
                collect[2][""u""].append(filtered_text)

    return collect


def write_data(docxFile, data):
    """"""gets the `collect` variable as 'data' argument from analyze()
    and reads and appends the 'data' to end of docx file
    """"""

    global wordsList

    document = Document(docxFile)

    def save_document():
        document.save(docxFile)
        return ""saved""

    def add_words(key):
        global wordsList
        categories = {
            ""b"": ""\nBold Words:-"",
            ""i"": ""\n\nItalicized Words:-"",
            ""u"": ""\n\nUnderlined Words:-"",
            ""bi"": ""\n\nBold & Italicized Words:-"",
            ""bu"": ""\n\nBold & Underlined Words:-"",
            ""biu"": ""\n\nBold & Italicized & Underlined Words:-"",
            ""iu"": ""\n\nItalicized & Underlined Words:-"",
        }
        for word in words[key]:
            category = categories[key]
            if len(wordsList) == 0 or category not in wordsList:
                wordsList = wordsList + f""{category}\n{word}""
            else:
                wordsList = wordsList + f"", {word}""

    title_p = document.add_paragraph(f""\n========== Extracted Words ==========\n"")

    title_p.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER

    write_p = document.add_paragraph()

    for words in data:
        if words.__contains__(""b"") and words[""b""]:
            add_words(""b"")

        elif words.__contains__(""u"") and words[""u""]:
            add_words(""u"")

        elif words.__contains__(""bi"") and words[""bi""]:
            add_words(""bi"")

        elif words.__contains__(""bu"") and words[""bu""]:
            add_words(""bu"")

        elif words.__contains__(""iu"") and words[""iu""]:
            add_words(""iu"")

        elif words.__contains__(""biu"") and words[""biu""]:
            add_words(""biu"")

    write_p.add_run(f""{wordsList}"")

    ending_p = document.add_paragraph(""\n===================\n"")
    ending_p.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER

    save_document()
    return


# function calls inside main()


def main():
    global total_words

    data = analyze(docx)
    write_data(docx, data)


if __name__ == ""__main__"":
    from sys import argv
    import time

    # get docx file
    docx = argv[1]

    print(f""Started at {time.strftime('%X')}..."")
    # calling main()
    main()
    print(f""Finished at {time.strftime('%X')}..."")"
Data Structure & Algo,Bitcoin price analyzer,"This project is a Python script that fetches the current price of 
Bitcoin in USD and calculates the value of a specified amount of 
Bitcoin. The script retrieves Bitcoin pricing data from the CoinDesk API
 and processes user input from the command line to perform the 
calculation.","1. Import Necessary Libraries
2. Check Command-Line Argument
3. Convert Argument to Float
4. Fetch Bitcoin Price from API
5. Calculate Bitcoin Value
6. Handle Potential Errors",6,"# Step 1: Import Necessary Libraries
def import_libraries():
    """"""Imports necessary libraries for the script.""""""
    import requests
    import sys

# Execute Step 1
import_libraries()","def import_libraries():
    """"""Imports necessary libraries for the script.""""""","# Step 2: Check Command-Line Argument
def check_argument():
    """"""Exits the program if no command-line argument is provided.""""""
    import sys
    if len(sys.argv) == 1:
        sys.exit(""Missing command-line argument"")

# Sample dataset for step 2
import sys
sys.argv = ['script_name.py']

# Execute Step 2
check_argument()","def check_argument():
    """"""Exits the program if no command-line argument is provided.""""""","# Step 3: Convert Argument to Float
def convert_argument():
    """"""Converts command-line argument to float or exits if not a number.""""""
    import sys
    try:
        bitcoin = sys.argv[1]
        bitcoin = float(bitcoin)
    except ValueError:
        sys.exit(""Command-line argument is not a number"")
    return bitcoin

# Sample dataset for step 3
sys.argv = ['script_name.py', '1.5']

# Execute Step 3
bitcoin_amount = convert_argument()
print(f""Bitcoin amount: {bitcoin_amount}"")","def convert_argument():    """"""Converts command-line argument to float or exits if not a number.""""""","def ball_motion_and_collision(ball, bricks, window_width, window_height, user_basepad):# Step 4: Fetch Bitcoin Price from API
def fetch_bitcoin_price():
    """"""Fetches the current Bitcoin price in USD from the CoinDesk API.""""""
    import requests
    try:
        response = requests.get(""https://api.coindesk.com/v1/bpi/currentprice.json"")
        rate = response.json()[""bpi""][""USD""][""rate_float""]
        return rate
    except requests.RequestException:
        sys.exit(""An error occurred while fetching the Bitcoin price"")

# Execute Step 4
bitcoin_price = fetch_bitcoin_price()
print(f""Current Bitcoin price: ${bitcoin_price}"")","def fetch_bitcoin_price():
    """"""Fetches the current Bitcoin price in USD from the CoinDesk API.""""""","# Step 5: Calculate Bitcoin Value
def calculate_bitcoin_value(bitcoin, rate):
    """"""Calculates the value of the specified amount of Bitcoin in USD.""""""
    value = bitcoin * rate
    print(f""Current Price: ${value:,.4f}"")

# Sample dataset for step 5
bitcoin = 1.5
rate = 40000.0

# Execute Step 5
calculate_bitcoin_value(bitcoin, rate)","def calculate_bitcoin_value(bitcoin, rate):
    """"""Calculates the value of the specified amount of Bitcoin in USD.""""""","# Step 6: Handle Potential Errors
def handle_errors():
    """"""Handles potential errors in the script.""""""
    import requests
    import sys

    # Check for argument
    check_argument()
    
    # Convert argument
    bitcoin = convert_argument()

    # Fetch Bitcoin price
    try:
        rate = fetch_bitcoin_price()
        calculate_bitcoin_value(bitcoin, rate)
    except requests.RequestException:
        print(""An error occurred while fetching the Bitcoin price"")

# Sample dataset for step 6
sys.argv = ['script_name.py', '1.5']

# Execute Step 6
handle_errors()","def handle_errors():
    """"""Handles potential errors in the script.""""""","import requests
import sys


"""""" Exit program if no command-line argument is provided """"""
if len(sys.argv) == 1:
    sys.exit(""Missing command-line argument"")


"""""" 
Convert command-line argument to float or
Exit if command line argument is not a number
""""""
try:
    bitcoin = sys.argv[1]
    bitcoin = float(bitcoin)
except ValueError:
    sys.exit(""Command-line argument is not a number"")


""""""Get Bitcoin price""""""
try:
    response = requests.get(""https://api.coindesk.com/v1/bpi/currentprice.json"")
    rate = response.json()[""bpi""][""USD""][""rate_float""]
    print(f""Current Price: ${bitcoin * rate:,.4f}"")
except requests.RequestException:
    print(""An Error Occurred"")"
Data Structure & Algo,Password generator,"This project is a Python-based GUI application for generating random 
passwords. It uses the Tkinter library for the graphical interface and 
allows users to specify the desired password length. The application can
 generate the password, display it, and copy it to the clipboard.","1. Import Necessary Libraries
2. Define the Password Generation Function
3. Define the Clipboard Copy Function
4. Create the Main Application Window
5. Add Widgets to the Window
6. Run the Application",6,"# Step 1: Import Necessary Libraries
def import_libraries():
    """"""Imports necessary libraries for the application.""""""
    import tkinter as tk
    import random
    import string
    import pyperclip

# Execute Step 1
import_libraries()","def import_libraries():
    """"""Imports necessary libraries for the application.""""""","# Step 2: Define the Password Generation Function
def generate_password():
    """"""Generates a random password based on user-defined length.""""""
    password_length = length_entry.get()
    if password_length.isdigit() and int(password_length) > 0:
        password = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=int(password_length)))
        password_entry.delete(0, tk.END)
        password_entry.insert(0, password)
    else:
        password_entry.delete(0, tk.END)
        password_entry.insert(0, ""Invalid password length"")

# Sample dataset for step 2
length_entry = tk.Entry()
password_entry = tk.Entry()

# Execute Step 2
length_entry.insert(0, '12')
generate_password()","def generate_password():
    """"""Generates a random password based on user-defined length.""""""","# Step 3: Define the Clipboard Copy Function
def copy_password():
    """"""Copies the generated password to the clipboard.""""""
    password = password_entry.get()
    pyperclip.copy(password)

# Sample dataset for step 3
password_entry = tk.Entry()
password_entry.insert(0, 'SamplePassword!123')

# Execute Step 3
copy_password()","def copy_password():
    """"""Copies the generated password to the clipboard.""""""","# Step 4: Create the Main Application Window
def create_main_window():
    """"""Creates the main application window.""""""
    root = tk.Tk()
    root.title(""Password Generator"")
    return root

# Execute Step 4
root = create_main_window()","def create_main_window():
    """"""Creates the main application window.""""""","# Step 5: Add Widgets to the Window
def add_widgets(root):
    """"""Adds widgets to the application window.""""""
    length_label = tk.Label(root, text=""Password Length:"")
    length_label.pack(pady=10)
    
    global length_entry
    length_entry = tk.Entry(root, width=5)
    length_entry.pack()
    
    generate_button = tk.Button(root, text=""Generate Password"", command=generate_password)
    generate_button.pack(pady=10)
    
    password_label = tk.Label(root, text=""Generated Password:"")
    password_label.pack()
    
    global password_entry
    password_entry = tk.Entry(root, width=30)
    password_entry.pack(pady=10)
    
    copy_button = tk.Button(root, text=""Copy Password"", command=copy_password)
    copy_button.pack(pady=10)

# Sample dataset for step 5
root = tk.Tk()

# Execute Step 5
add_widgets(root)","def add_widgets(root):
    """"""Adds widgets to the application window.""""""","# Step 6: Run the Application
def run_application(root):
    """"""Runs the Tkinter main loop to start the application.""""""
    length_entry.focus()
    root.mainloop()

# Execute Step 6
run_application(root)","def run_application(root):
    """"""Runs the Tkinter main loop to start the application.""""""","import tkinter as tk
import random
import string
import pyperclip

# Define the main function for generating the password
def generate_password():
    password_length = length_entry.get()
    if password_length.isdigit() and int(password_length) > 0:
        password = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=int(password_length)))
        password_entry.delete(0, tk.END)
        password_entry.insert(0, password)
    else:
        password_entry.delete(0, tk.END)
        password_entry.insert(0, ""Invalid password length"")

# Define the function for copying the password to the clipboard
def copy_password():
    password = password_entry.get()
    pyperclip.copy(password)

# Create the main window
root = tk.Tk()
root.title(""Password Generator"")

# Create the password length label and entry widget
length_label = tk.Label(root, text=""Password Length:"")
length_label.pack(pady=10)
length_entry = tk.Entry(root, width=5)
length_entry.pack()

# Create the ""Generate Password"" button
generate_button = tk.Button(root, text=""Generate Password"", command=generate_password)
generate_button.pack(pady=10)

# Create the password entry widget
password_label = tk.Label(root, text=""Generated Password:"")
password_label.pack()
password_entry = tk.Entry(root, width=30)
password_entry.pack(pady=10)

# Create the ""Copy Password"" button
copy_button = tk.Button(root, text=""Copy Password"", command=copy_password)
copy_button.pack(pady=10)

# Set the focus on the length entry widget
length_entry.focus()

# Run the main loop
root.mainloop()"
Data Structure & Algo,HTML to CSV,"This project is designed to read data from an HTML file, write it to a 
CSV file, convert the CSV file to an Excel file, and then modify the 
Excel file by applying bold formatting to specific cell values. The 
project leverages the pandas, csv, and openpyxl libraries to accomplish these tasks.","1. Import Necessary Libraries
2. Read Data from HTML File
3. Write Data to CSV File
4. Convert CSV to Excel
5. Modify Excel Formatting
6. Execute the Functions",6,"# Step 1: Import Necessary Libraries
def import_libraries():
    """"""Imports necessary libraries for the project.""""""
    import csv
    import openpyxl
    import pandas as pd
    from openpyxl import Workbook
    from openpyxl.styles import Font

# Execute Step 1
import_libraries()","def import_libraries():
    """"""Imports necessary libraries for the project.""""""","# Step 2: Read Data from HTML File
def read_html_file(filepath):
    """"""Reads data from the specified HTML file.""""""
    return pd.read_html(filepath)

# Sample dataset for step 2
filepath = ""./Test Report_2021-08-18_12-45-00.html""

# Execute Step 2
file = read_html_file(filepath)","def read_html_file(filepath):
    """"""Reads data from the specified HTML file.""""""","# Step 3: Write Data to CSV File
def write_to_csv(file, csv_path):
    """"""Writes data from the HTML file to a CSV file.""""""
    for index, data in enumerate(file):
        if index:
            data.to_csv(csv_path, mode='a+', header=True)

# Sample dataset for step 3
csv_path = ""./your_csv_name.csv""

# Execute Step 3
write_to_csv(file, csv_path)","def write_to_csv(file, csv_path):
    """"""Writes data from the HTML file to a CSV file.""""""","# Step 4: Convert CSV to Excel
def csv_to_excel(csv_path, excel_path):
    """"""Converts the CSV file to an Excel file.""""""
    wb = Workbook()
    ws = wb.active

    with open(csv_path, 'r') as f:
        for row in csv.reader(f):
            ws.append(row)

    wb.save(excel_path)

# Sample dataset for step 4
excel_path = 'name.xlsx'

# Execute Step 4
csv_to_excel(csv_path, excel_path)","def csv_to_excel(csv_path, excel_path):
    """"""Converts the CSV file to an Excel file.""""""","# Step 5: Modify Excel Formatting
def modify_excel_formatting(excel_path):
    """"""Modifies the Excel file by applying bold formatting to specific cell values.""""""
    wb_obj = openpyxl.load_workbook(excel_path)
    sheet_obj = wb_obj.active

    rows = sheet_obj.max_row
    cols = sheet_obj.max_column

    for i in range(1, rows + 1):
        for j in range(1, cols + 1):
            if (""Test_Cases"" in str(sheet_obj.cell(i, j).value)) or (""Status"" in str(sheet_obj.cell(i, j).value)):
                x = sheet_obj.cell(i, j).coordinate
                sheet_obj[x].font = Font(bold=True)

    wb_obj.save(excel_path)

# Execute Step 5
modify_excel_formatting(excel_path)","def modify_excel_formatting(excel_path):
    """"""Modifies the Excel file by applying bold formatting to specific cell values.""""""","# Step 6: Execute the Functions
def execute():
    """"""Executes the main functions for the project.""""""
    print(""Starting task one"")
    write_to_csv(file, csv_path)
    print(""Task one over"")
    print(""Starting task two"")
    csv_to_excel(csv_path, excel_path)
    print(""Task two over"")
    print(""Starting task three"")
    modify_excel_formatting(excel_path)
    print(""Task three over"")

# Execute Step 6
execute()","def execute():
    """"""Executes the main functions for the project.""""""","# Importing necessary libraries
import csv
import openpyxl
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font

# Reading HTML file and defining paths for CSV and Excel files
file = pd.read_html(""./Test Report_2021-08-18_12-45-00.html"")
path = ""./your_csv_name.csv""
xlpath = 'name.xlsx'

# Function to write data from HTML to CSV and convert it to Excel format
def write_html_csv():
    for index, data in enumerate(file):
        # Check for index value and print data
        if index:
            data.to_csv(""./your_csv_name.csv"", mode='a+', header=True)

    # Creating an instance of Workbook and creating a new sheet
    wb = Workbook()
    ws = wb.active

    # Reading CSV file and writing data to Excel
    with open(path, 'r') as f:
        for row in csv.reader(f):
            ws.append(row)
    
    # Saving the Excel file
    wb.save(xlpath)

# Function to modify the Excel sheet by adding bold font to certain cell values
def modify_excel():
    # Opening the Excel file
    wb_obj = openpyxl.load_workbook(xlpath)
    sheet_obj = wb_obj.active

    # Getting the number of rows and columns in the sheet
    rows = sheet_obj.max_row
    cols = sheet_obj.max_column

    # Looping through each cell and checking for certain values to apply font style
    for i in range(1, rows + 1):
        for j in range(1, cols + 1):
            if (""Test_Cases"" in str(sheet_obj.cell(i, j).value)) or (""Status"" in str(sheet_obj.cell(i, j).value)):
                x = sheet_obj.cell(i, j).coordinate
                y = sheet_obj.cell(i, j).row
                sheet_obj[x].font = Font(bold=True)

    # Saving the modified Excel file
    wb_obj.save(xlpath)

# Running the functions and printing messages to indicate completion of tasks
print(""Starting task one"")
write_html_csv()
print(""Task one over"")
print(""Starting task two"")
modify_excel()
print(""Task two over"")"
Data Structure & Algo,Star Pattern Generator,"This project is focused on generating different patterns of stars using 
nested loops in Python. Each pattern follows a specific arrangement of 
stars and spaces. The general structure of the project includes 
implementing a function for each pattern, where each function will 
handle the creation of a particular star pattern.","1. Define Function for Pattern 1
2. Define Function for Pattern 2
3. Define Function for Pattern 3
4. Define Function for Pattern 4
5. Define Function for Pattern 5
6. Execute Pattern Functions",6,"# Step 1: Define Function for Pattern 1
def pattern1():
    """"""Prints a right-angle triangle pattern of stars.""""""
    for i in range(6):
        for k in range(i + 1):
            print(""*"", end="""")
        print()

# Execute Step 1
pattern1()","def pattern1():
    """"""Prints a right-angle triangle pattern of stars.""""""","# Step 2: Define Function for Pattern 2
def pattern2():
    """"""Prints an inverted right-angle triangle pattern of stars.""""""
    for i in range(5, 0, -1):
        for k in range(i):
            print(""*"", end="""")
        print()

# Execute Step 2
pattern2()","def pattern2():
    """"""Prints an inverted right-angle triangle pattern of stars.""""""","# Step 3: Define Function for Pattern 3
def pattern3():
    """"""Prints a right-aligned right-angle triangle pattern of stars.""""""
    for i in range(5):
        for j in range(1, 6):
            if j <= 5 - i:
                print("" "", end="""")
            else:
                print(""*"", end="""")
        print()

# Execute Step 3
pattern3()","def pattern3():
    """"""Prints a right-aligned right-angle triangle pattern of stars.""""""","# Step 4: Define Function for Pattern 4
def pattern4():
    """"""Prints an inverted right-aligned right-angle triangle pattern of stars.""""""
    for i in range(5, 0, -1):
        for j in range(1, 6):
            if j <= 5 - i:
                print("" "", end="""")
            else:
                print(""*"", end="""")
        print()

# Execute Step 4
pattern4()","def pattern4():
    """"""Prints an inverted right-aligned right-angle triangle pattern of stars.""""""","# Step 5: Define Function for Pattern 5
def pattern5():
    """"""Prints a diamond pattern of stars.""""""
    for i in range(9):
        if i <= 4:
            spaces = 4 - i
            stars = 2 * i + 1
        else:
            spaces = i - 4
            stars = 17 - 2 * i
        for j in range(1, 11):
            if j <= spaces:
                print("" "", end="""")
            elif j <= spaces + stars:
                print(""*"", end="""")
        print()

# Execute Step 5
pattern5()","def pattern5():
    """"""Prints a diamond pattern of stars.""""""","# Step 6: Execute Pattern Functions
def execute_patterns():
    """"""Executes all the pattern functions.""""""
    print(""Pattern 1:"")
    pattern1()
    print(""\nPattern 2:"")
    pattern2()
    print(""\nPattern 3:"")
    pattern3()
    print(""\nPattern 4:"")
    pattern4()
    print(""\nPattern 5:"")
    pattern5()

# Execute Step 6
execute_patterns()","def execute_patterns():
    """"""Executes all the pattern functions.""""""","# Pattern 1
# *
# **
# ***
# ****
# *****

# Loop through the rows from 0 to 5 (6 rows in total)
for i in range(6):
    # Loop through the columns from 0 to i (inclusive) for each row
    for k in range(i+1):
        # Print a star with no newline character
        print(""*"", end="""")
    # Move to the next line
    print()

# Pattern 2
# *****
# ****
# ***
# **
# *

# Loop through the rows from 5 to 1 (inclusive)
for i in range(5, 0, -1):
    # Loop through the columns from 0 to i (inclusive) for each row
    for k in range(i):
        # Print a star with no newline character
        print(""*"", end="""")
    # Move to the next line
    print()

# Pattern 3
#     *
#    **
#   ***
#  ****
# *****

# Loop through the rows from 0 to 4 (5 rows in total)
for i in range(5):
    # Loop through the columns from 1 to 5 for each row
    for j in range(1, 6):
        # Print a space with no newline character if j is less than or equal to 5-i
        if j <= 5-i:
            print("" "", end="""")
        else:
            # Otherwise, print a star with no newline character
            print(""*"", end="""")
    # Move to the next line
    print()

# Pattern 4
# *****
#  ****
#   ***
#    **
#     *

# Loop through the rows from 5 to 1 (inclusive)
for i in range(5, 0, -1):
    # Loop through the columns from 1 to 5 for each row
    for j in range(1, 6):
        # Print a space with no newline character if j is less than or equal to 5-i
        if j <= 5-i:
            print("" "", end="""")
        else:
            # Otherwise, print a star with no newline character
            print(""*"", end="""")
    # Move to the next line
    print()

# Pattern 5
#     *
#    ***
#   *****
#  *******
# *********
# *********
#  *******
#   *****
#    ***
#     *

# Loop through the rows from 0 to 8 (9 rows in total)
for i in range(9):
    # Determine the number of spaces and stars to print for this row
    if i <= 4:
        spaces = 4 - i
        stars = 2*i + 1
    else:
        spaces = i - 4
        stars = 17 - 2*i
    # Loop through the columns for each row
    for j in range(1, 11):
        # Print spaces or stars as appropriate for the current column
        if j <= spaces:
            print("" "", end="""")
        elif j <= spaces + stars:
            print(""*"", end="""")
    # Move to the next line
    print()"